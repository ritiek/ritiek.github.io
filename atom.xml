<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Ritiek Malhotra</title>
    <subtitle>Just some of my adventures!</subtitle>
    <link rel="self" type="application/atom+xml" href="https://ritiek.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://ritiek.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-10-20T00:00:00+00:00</updated>
    <id>https://ritiek.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>MicroSD Boot Partition with NVMe Root Filesystem on Raspberry Pi 5</title>
        <published>2025-10-20T00:00:00+00:00</published>
        <updated>2025-10-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/10/20/microsd-boot-partition-with-nvme-root-filesystem-on-raspberry-pi-5/"/>
        <id>https://ritiek.github.io/2025/10/20/microsd-boot-partition-with-nvme-root-filesystem-on-raspberry-pi-5/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/10/20/microsd-boot-partition-with-nvme-root-filesystem-on-raspberry-pi-5/">&lt;p&gt;I run NixOS on my Raspberry Pi 5. For a while I&#x27;ve been running everything off a microSD card, but
I wanted to migrate to an NVMe drive connected through a M.2 HAT via the PCIe slot for better performance
and reliability.&lt;&#x2F;p&gt;
&lt;p&gt;I currently use the now deprecated &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;raspberry-pi-nix&quot;&gt;raspberry-pi-nix&lt;&#x2F;a&gt;
flake to build an image for my RPi5. While I&#x27;d like to migrate to the actively maintained
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvmd&#x2F;nixos-raspberrypi&quot;&gt;nixos-raspberrypi&lt;&#x2F;a&gt; flake, I haven&#x27;t gotten around to it yet.
When using u-boot with this flake, it&#x27;s currently unable to boot directly off NVMe on the Pi 5, so a
hybrid boot approach with the microSD card is necessary.&lt;&#x2F;p&gt;
&lt;p&gt;I found it&#x27;s possible to set up a hybrid boot configuration - boot from the microSD card initially,
then mount the NVMe drive as the root filesystem. This gives me the performance benefits of NVMe
while working around the u-boot limitations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;updating-the-firmware&quot;&gt;Updating the firmware&lt;&#x2F;h2&gt;
&lt;p&gt;Before attempting the hybrid boot setup, I updated my Raspberry Pi 5&#x27;s firmware to the latest version.
Newer firmware versions have better NVMe support and handle drive detection more reliably. For example,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;firmware&#x2F;issues&#x2F;1833&quot;&gt;this issue&lt;&#x2F;a&gt; tracks recently released improvements
for booting off NVMe drives connected through PCIe switches.&lt;&#x2F;p&gt;
&lt;p&gt;I flashed Raspberry Pi OS to a separate microSD card, booted from it, and updated the bootloader
firmware directly from the command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo rpi-eeprom-update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alternatively, the bootloader can be updated through the interactive menu:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo raspi-config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then navigate to &lt;strong&gt;Advanced Options → Bootloader Version → Latest&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After the update completed, I rebooted and verified the firmware version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo rpi-eeprom-update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once confirmed the firmware was up to date, I proceeded with setting up the hybrid boot configuration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-hybrid-boot-approach&quot;&gt;The hybrid boot approach&lt;&#x2F;h2&gt;
&lt;p&gt;The idea is simple: the Raspberry Pi 5 reads the boot partition from the microSD card to load the
kernel and initial boot configuration, but then switches to using the NVMe drive for the actual
root filesystem.&lt;&#x2F;p&gt;
&lt;p&gt;The boot process works like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;RPi5 firmware reads the FAT32 boot partition on the microSD card (&lt;code&gt;&#x2F;dev&#x2F;mmcblk0p1&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;It loads the kernel and reads &lt;code&gt;cmdline.txt&lt;&#x2F;code&gt; which specifies the root partition.&lt;&#x2F;li&gt;
&lt;li&gt;The root partition specified in &lt;code&gt;cmdline.txt&lt;&#x2F;code&gt; points to the NVMe drive instead of the microSD card.&lt;&#x2F;li&gt;
&lt;li&gt;System boots with NVMe as the root filesystem.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;setting-up-the-hybrid-boot&quot;&gt;Setting up the hybrid boot&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;step-1-prepare-cmdline-txt-for-delayed-boot&quot;&gt;Step 1: Prepare cmdline.txt for delayed boot&lt;&#x2F;h3&gt;
&lt;p&gt;First, I needed to give the system enough time to detect the NVMe drive during boot. I mounted the
boot partition and modified &lt;code&gt;cmdline.txt&lt;&#x2F;code&gt; before cloning:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;mmcblk0p1 &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo vi &#x2F;mnt&#x2F;cmdline.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I added &lt;code&gt;rootwait rootdelay=30&lt;&#x2F;code&gt; to the end of the existing parameters. The &lt;code&gt;rootdelay=30&lt;&#x2F;code&gt; gives the
system 30 seconds to detect and initialize the NVMe drive before attempting to mount the root partition.&lt;&#x2F;p&gt;
&lt;p&gt;Once done, I unmounted the partition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo umount &#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-2-clone-the-microsd-card-to-nvme&quot;&gt;Step 2: Clone the microSD card to NVMe&lt;&#x2F;h3&gt;
&lt;p&gt;Next, I cloned the entire microSD card contents to the NVMe drive (dangerous! this will wipe off the
NVMe drive).&lt;&#x2F;p&gt;
&lt;p&gt;I switched to a root shell to avoid permission issues with block device operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo su
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# pv &#x2F;dev&#x2F;mmcblk0 &amp;gt; &#x2F;dev&#x2F;sda
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This took a while since it&#x27;s copying everything bit-by-bit to the NVMe drive. The result is an exact
duplicate of the microSD card on the NVMe.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-3-modify-partition-identifiers-to-avoid-conflicts&quot;&gt;Step 3: Modify partition identifiers to avoid conflicts&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s the tricky part - both the microSD card and NVMe now have identical partition UUIDs and labels,
which would confuse the system about which partition to mount. Since I&#x27;m using the microSD card&#x27;s boot
partition and the NVMe&#x27;s root partition, I needed to change identifiers to avoid conflicts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;&#x2F;strong&gt; Before making any changes, note down the current UUIDs, PARTUUIDs, and labels of all
partitions on both the drive as well as the microSD card:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo blkid &#x2F;dev&#x2F;mmcblk0p1 &#x2F;dev&#x2F;mmcblk0p2 &#x2F;dev&#x2F;sda1 &#x2F;dev&#x2F;sda2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save this output somewhere safe. If something goes wrong, we&#x27;ll need these values to revert the changes.&lt;&#x2F;p&gt;
&lt;p&gt;Since the system will use the microSD card&#x27;s boot partition and the NVMe&#x27;s root partition, I needed
to change identifiers on the unused partitions to avoid conflicts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;For the ext4 root partition on the microSD card&lt;&#x2F;strong&gt; (&lt;code&gt;&#x2F;dev&#x2F;mmcblk0p2&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;I changed the microSD card&#x27;s root partition identifiers so it won&#x27;t conflict with the NVMe&#x27;s root
partition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Change the label
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo e2label &#x2F;dev&#x2F;mmcblk0p2 NIXOS_SD_UNUSED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Change filesystem UUID
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo tune2fs &#x2F;dev&#x2F;mmcblk0p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; random
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo blkid &#x2F;dev&#x2F;mmcblk0p2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This partition can be kept as a backup root filesystem in case the NVMe fails, or repurposed for
other storage needs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;For the FAT32 boot partition on the NVMe&lt;&#x2F;strong&gt; (&lt;code&gt;&#x2F;dev&#x2F;sda1&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;I also changed the NVMe&#x27;s boot partition identifiers so it won&#x27;t conflict with the microSD card&#x27;s
boot partition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Change the label
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo fatlabel &#x2F;dev&#x2F;sda1 FIRMWARE_UNUSED
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Change filesystem UUID using mlabel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;drive x: file=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev&#x2F;sda1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt; &#x2F;tmp&#x2F;mtoolsrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; MTOOLS_SKIP_CHECK=1 sudo env MTOOLSRC=&#x2F;tmp&#x2F;mtoolsrc mlabel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -N&lt;&#x2F;span&gt;&lt;span&gt; ABCDEF01 x:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify changes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo blkid &#x2F;dev&#x2F;sda1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; The &lt;code&gt;mlabel -N&lt;&#x2F;code&gt; command takes an 8-digit hexadecimal value for the FAT32 volume serial number.
We only change the filesystem UUID of the NVMe boot partition, not the disk signature, because changing
the disk signature would alter the PARTUUID of &lt;code&gt;&#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt; which needs to remain stable for &lt;code&gt;cmdline.txt&lt;&#x2F;code&gt;
to reference it correctly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-4-verify-cmdline-txt-points-to-the-correct-partition&quot;&gt;Step 4: Verify cmdline.txt points to the correct partition&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;cmdline.txt&lt;&#x2F;code&gt; on the microSD card&#x27;s boot partition should reference the NVMe&#x27;s root partition.
Mine looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;root=PARTUUID=2178694e-02 rootfstype=ext4 fsck.repair=yes rootwait rootdelay=30 console=tty1 console=serial0,115200n8 init=&#x2F;sbin&#x2F;init loglevel=7 lsm=landlock,yama,bpf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;root=PARTUUID=2178694e-02&lt;&#x2F;code&gt; should match the PARTUUID of the NVMe&#x27;s root partition (&lt;code&gt;&#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt;),
not the microSD card&#x27;s root partition.&lt;&#x2F;p&gt;
&lt;p&gt;The PARTUUID of NVMe root partition can be verified with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo blkid &#x2F;dev&#x2F;sda2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output will show both the filesystem UUID and partition PARTUUID. Make sure the PARTUUID in
&lt;code&gt;cmdline.txt&lt;&#x2F;code&gt; matches what you see for &lt;code&gt;&#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-5-boot-with-both-drives-connected&quot;&gt;Step 5: Boot with both drives connected&lt;&#x2F;h3&gt;
&lt;p&gt;I connected both the microSD card and NVMe drive back into my RPi5 and powered it on. The system now:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Reads the boot partition from the microSD card.&lt;&#x2F;li&gt;
&lt;li&gt;Mounts the root filesystem from the NVMe drive.&lt;&#x2F;li&gt;
&lt;li&gt;Runs NixOS entirely off the NVMe for all file operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Success! My NixOS root partition now runs off the NVMe drive, giving me the performance and reliability
I was looking for.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expanding-the-nvme-storage&quot;&gt;Expanding the NVMe storage&lt;&#x2F;h2&gt;
&lt;p&gt;After getting the hybrid boot working, I realized the NVMe drive had much more space than the microSD
card I cloned from. The cloned root partition was only using the same amount of space as the original
microSD card, leaving the rest of the NVMe drive unused.&lt;&#x2F;p&gt;
&lt;p&gt;The root partition on the NVMe can be resized to use all available space, or new partitions can be
created for additional storage.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Setup local network hostname resolution through Pi-hole</title>
        <published>2025-10-02T00:00:00+00:00</published>
        <updated>2025-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/10/02/setup-local-network-hostname-resolution-through-pihole/"/>
        <id>https://ritiek.github.io/2025/10/02/setup-local-network-hostname-resolution-through-pihole/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/10/02/setup-local-network-hostname-resolution-through-pihole/">&lt;p&gt;I have lots of devices connected to my parents&#x27; local network - Computers, RPis, phones, cameras, ESP8266&#x2F;32s
based smart switches&#x2F;sensors. To the point where it&#x27;d exhaust my (ISP-provided) router&#x27;s DHCP reservation
list. Most of them are hosted with some kind of network service that I need to access every now and then.
This gets tricky, because it&#x27;s acceptable for some of them to have downtime which causes my router to assign
a different IP address to these devices when they next come up online after their DHCP lease happens to have
expired. The router lets me reserve IP addresses for only a handful of devices before it
stops accepting any more entries. Even so, I still have to remember and enter IP addresses around or worse -
look them up on my router&#x27;s DHCP reservation list to figure out what hostname is assigned what IP address.&lt;&#x2F;p&gt;
&lt;p&gt;I remember coming across mDNS in the past which&#x27;d let me resolve IP addresses by the device hostname.
I used to be able to access Pi-hole by entering &lt;code&gt;http:&#x2F;&#x2F;pihole.lan&#x2F;&lt;&#x2F;code&gt; on one of my Pis inside the
local network. Looking into it now, it seems mDNS requires special software to be installed on both the
client as well as the machine trying to access the client. I don&#x27;t prefer setting up another software on my
machines. Nope, this solution isn&#x27;t even practical for other devices on my local network like the ESP8266s.
I wanted to resolve the machines on my local network through an easy to remember hostname but not in the
mDNS way. Sounds like something I could do by setting my own DNS server inside the local network and then
have a DHCP server hand out this DNS server to the clients in the local network to resolve DNS queries.
I already host Pi-hole that my devices use as a DNS server to help keep unwanted traffic off my network.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keeping-my-local-dns-server-updated&quot;&gt;Keeping my local DNS server updated&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;d be nice to update my local DNS server&#x27;s mapping of hostnames to IP addresses as close to real time as
possible as soon as a device on my local network gets assigned with an IP address. I could mostly identify
devices based on the MAC address of the connecting network interface.&lt;&#x2F;p&gt;
&lt;p&gt;So I prepared a mapping of MAC addresses to the hostname that I&#x27;d like them to resolve to, such as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;AA:11:BB:22:CC:33 - desktop-computer.pihole
&lt;&#x2F;span&gt;&lt;span&gt;A1:B1:A2:B2:A3:B3 - camera-1.pihole
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are then two ways I could think of to achieve this. These are as described below.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-host-both-my-own-dns-server-as-well-as-a-dhcp-server&quot;&gt;1. Host both my own DNS server as well as a DHCP server&lt;&#x2F;h3&gt;
&lt;p&gt;Pi-hole has a built-in DHCP server. Every time it&#x27;d hand out an IP address, it&#x27;d map the MAC address of the
client that requested for DHCP allocation to the IP address it just handed out. This would look something
like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;AA:11:BB:22:CC:33 - 192.168.1.2
&lt;&#x2F;span&gt;&lt;span&gt;A1:B1:A2:B2:A3:B3 - 192.168.1.3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pi-hole would then be able to take the MAC address to hostname mapping that I prepared previously and it
could then create a local DNS entry that&#x27;d map IP address to the corresponding hostname that I assigned to
a MAC address. These local DNS entries created would then look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;192.168.1.2 - desktop-computer.pihole
&lt;&#x2F;span&gt;&lt;span&gt;192.168.1.3 - camera-1.pihole
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pi-hole has a well-documented API to programmatically create local DNS entries that could work well for such
a case. This approach would also neatly update the DNS entries in real-time. All the locally assigned DNS
entries would show up in Pi-hole WebUI in Settings -&amp;gt; Local DNS Records. Any devices whose MAC addresses
haven&#x27;t been accounted for in my MAC address to hostname mapping could get a hostname of, say
&lt;code&gt;unknown-device-AC-CA-BD-DB-CE-EC.pihole&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-extract-arp-table-off-my-router&quot;&gt;2. Extract ARP table off my router&lt;&#x2F;h3&gt;
&lt;p&gt;For the previous setup to work reliably, my Pi-hole needs to be on whenever my router is on. Right now, I’m
not sure I can keep the Pi-hole running all the time. I don’t want to add another device (even a small one
like a Raspberry Pi Zero W) just to run Pi-hole and handle DHCP, because that would introduce another failure
point in my network. To use Pi-hole for DHCP, I’d have to turn off the DHCP on my router. So, if Pi-hole
goes offline even while the router is working, devices still won’t be able to obtain IP address leases. It&#x27;d
require both of them to be online at the same time for connections to work properly.&lt;&#x2F;p&gt;
&lt;p&gt;I imagined I could extract the latest ARP table off my router which&#x27;d give me MAC address to IP address
mapping, and then define new DNS entries based off my MAC address to hostname mapping that I created
previously. I&#x27;d then pass these DNS entries to my Pi-hole server so they can be resolved properly. I could
set my Pi-hole&#x27;s IP address as the DNS server to hand out when issuing DHCP leases. This can be done inside
of my router&#x27;s settings page. This would then assign Pi-hole as the DNS server to all the devices that are
part of the local network.&lt;&#x2F;p&gt;
&lt;p&gt;I went ahead with this approach given the drawbacks of the previous setup. With this approach, it doesn&#x27;t
matter if my Pi-hole goes down, my machines would fallback to the next DNS server provided by DHCP as defined
in my router and at worst my machines wouldn&#x27;t be able to resolve any custom-defined hostnames. The internet
and connections would still work normally otherwise. This implementation can be found in my Pi 5&#x27;s NixOS
config in this commit
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;commit&#x2F;28bcb1bb2ede994677d78bfed3b995420a599a60&quot;&gt;&lt;code&gt;28bcb1b&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
It&#x27;s been less than a week, too soon to say but so far so good.&lt;&#x2F;p&gt;
&lt;p&gt;I am able to extract the ARP table by
authenticating with the router programmatically on the HTTP port and then firing off another request to fetch
the relevant HTML page that contains the ARP table which can be parsed through regex. This procedure would
likely be different depending on the router firmware. Router and Pi-hole&#x27;s
credentials are stored encrypted using sops-nix in the config itself. This systemd service runs every 30
minutes and updates the Pi-hole DNS entries as per the extracted ARP table. This has one caveat that the
local DNS could go out-of-date within those 30 minutes and would not be able to resolve any new IP address
leases to custom-defined hostnames until the service runs again.&lt;&#x2F;p&gt;
&lt;p&gt;I now point to my cameras in Frigate through my custom-assigned hostname. Both Frigate and Pi-hole run on
the same Pi 5 through different Docker compose configurations. I cannot access Pi-hole&#x27;s container from inside Frigate using &lt;code&gt;127.0.0.1&lt;&#x2F;code&gt;. I also can&#x27;t use &lt;code&gt;host.docker.internal&lt;&#x2F;code&gt; to refer to my host machine as
this hostname would itself have to be resolved in the first place so Docker doesn&#x27;t allow referring to DNS
servers through hostname. To portably assign Pi-hole as a DNS server to Frigate, I had to set the DNS to
Bridge IP address utilized by my Docker socket as described in this commit
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;commit&#x2F;9d270486691e3aaaef55b30df2daff47bd8d5f06&quot;&gt;&lt;code&gt;9d27048&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Extendable 170-point breadboard on Pimoroni Explorer HAT Pro</title>
        <published>2025-10-01T00:00:00+00:00</published>
        <updated>2025-10-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/10/01/extendable-170-point-breadboard-on-pimoroni-explorer-hat-pro/"/>
        <id>https://ritiek.github.io/2025/10/01/extendable-170-point-breadboard-on-pimoroni-explorer-hat-pro/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/10/01/extendable-170-point-breadboard-on-pimoroni-explorer-hat-pro/">&lt;p&gt;I got myself Pimoroni Explorer HAT Pro for my Raspberry Pi 5 to make protoyping and playing around with
electronics a little easier! It comes with a cool blue looking 170-points breadboard.&lt;&#x2F;p&gt;
&lt;p&gt;It however lacks a latch point for mounting more breadboards with it.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250918_211356_preview.jpeg&quot; width=&quot;450&quot;&gt;
  &lt;i&gt;No latch points on the Pimoroni blue breadboard&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I had a few more cool white looking 170-points breadboard
lying around which have latching points. So I got one of them stickied onto my Explorer HAT!&lt;&#x2F;p&gt;
&lt;p&gt;Now I can mount more breadboards!&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: center; align-items: center;&quot;&gt;
  &lt;div style=&quot;text-align: center; margin-right: 20px;&quot;&gt;
    &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250918_210939_preview.jpeg&quot; width=&quot;300&quot;&gt;
    &lt;i&gt;Latch points on this breadboard!&lt;&#x2F;i&gt;
  &lt;&#x2F;div&gt;
  &lt;div style=&quot;text-align: center;&quot;&gt;
    &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250918_210900_preview.jpeg&quot; width=&quot;300&quot;&gt;
    &lt;i&gt;Mounted breadboard. Yay!&lt;&#x2F;i&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Re-doing my Homelab with NixOS</title>
        <published>2025-09-09T00:00:00+00:00</published>
        <updated>2025-09-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/09/09/re-doing-my-homelab-with-nixos/"/>
        <id>https://ritiek.github.io/2025/09/09/re-doing-my-homelab-with-nixos/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/09/09/re-doing-my-homelab-with-nixos/">&lt;p&gt;It&#x27;s been close to 2 years since my earlier homelab post (&lt;a href=&quot;&#x2F;2023&#x2F;12&#x2F;26&#x2F;homelabbing-on-a-raspberry-pi-4&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;).
I moved onto a shiny Raspberry Pi 5 shortly afterwards (from an RPi4) and worked on a few things. This
post is a continuity to how things have evolved in terms of my requirements and the solutions I now see
as a better fit.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest change has been me migrating everything to NixOS, and it&#x27;s been transformative for how I think about managing my homelab infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-nixos-for-a-homelab&quot;&gt;Why NixOS for a homelab?&lt;&#x2F;h2&gt;
&lt;p&gt;When I first started self-hosting, I was managing services the traditional way: installing packages directly on the system, editing config files scattered across &lt;code&gt;&#x2F;etc&#x2F;&lt;&#x2F;code&gt;, and hoping I&#x27;d remember all the changes I made when something broke.&lt;&#x2F;p&gt;
&lt;p&gt;NixOS seems to help with this. Instead of imperatively configuring your system, you declare what you want in a configuration file, and NixOS builds the entire system through it. This means I can completely recreate my homelab setup on a fresh Raspberry Pi just by copying over my configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve slowly migrated most of my machines to run NixOS, including my RPi5 role-playing as homelab. Diving
into NixOS has been one of the few significant investments that I&#x27;m really happy about. Beyond the obvious reproducibility benefits, NixOS fundamentally changes how I think about system complexity.&lt;&#x2F;p&gt;
&lt;p&gt;My current NixOS configuration can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;tree&#x2F;f5b87e8fcd23ca6eb05ac79a2143319dbd9967a6&quot;&gt;here&lt;&#x2F;a&gt;. All the techniques I discuss below are implemented in this config, so you can see exactly how they work in practice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-approach-to-self-hosting&quot;&gt;My approach to self-hosting&lt;&#x2F;h2&gt;
&lt;p&gt;I got into self-hosting mostly because it seemed fun and tinkerable. However, with time it&#x27;s become
pretty important to me, more so to resist stashing away more of my digital identity within walled gardens.&lt;&#x2F;p&gt;
&lt;p&gt;I tend to approach hosting services for personal use with a very long-term perspective. I&#x27;ve got services
like Immich (photo management) and paperless-ngx (document organization) that I&#x27;ve spent time curating carefully. They hold important paperwork and memories of loved ones. Lately I try to approach preserving them in a way I hope will outlive me, at least for a while.&lt;&#x2F;p&gt;
&lt;p&gt;I mainly run a few scheduled jobs and otherwise host services that tend to run idle most of the time, so
a low-powered and power-efficient machine like Raspberry Pis seems like a good deal to me. In the cases I
could use more power (such as AI inference or gaming with Sunshine game streaming), I&#x27;m okay with a little bit of wait and
offloading processing to a beefier machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-a-nixos-homelab-from-scratch&quot;&gt;Setting up a NixOS homelab from scratch&lt;&#x2F;h2&gt;
&lt;p&gt;One of the most satisfying aspects of NixOS is how I can generate a complete system image from my configuration. Here&#x27;s my typical workflow when setting up or rebuilding my homelab:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-and-deploying-the-system&quot;&gt;Building and deploying the system&lt;&#x2F;h3&gt;
&lt;p&gt;NixOS lets me generate an image file of my entire configuration that I can
then write directly to a microSD card. It&#x27;ll boot up on my Pi with all my
favorite packages pre-installed and my environment exactly as defined. However, since I use sops-nix to
store encrypted secrets directly in my config, there are a few additional steps I need to perform to get my homelab-specific private SSH key in place (this key allows sops-nix to decrypt my secrets).&lt;&#x2F;p&gt;
&lt;p&gt;The process looks like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the system image&lt;&#x2F;strong&gt; (preferably using an ARM64 machine for native compilation):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd &#x2F;etc&#x2F;nixos
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix build .#pilab-sd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write the image to microSD&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pv .&#x2F;result&#x2F;sd-image&#x2F;*.img.zst | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unzstd &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;dev&#x2F;sdc &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial boot setup&lt;&#x2F;strong&gt;: Plug the microSD into my Pi and power it up.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add the decryption key&lt;&#x2F;strong&gt;: Wait 3-4 minutes for the Pi to set up its directory structure, then power off and mount the microSD on another machine to place my private SSH key into Pi&#x27;s &lt;code&gt;&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key&lt;&#x2F;code&gt; (I wonder if it&#x27;s possible to automate this step by inserting in a Yubikey at boot).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final boot&lt;&#x2F;strong&gt;: Plug the microSD back into the Pi and boot it up.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That&#x27;s it! I can now SSH into my Pi and be greeted with my complete environment. I can start my services using &lt;code&gt;sudo homelab-start&lt;&#x2F;code&gt;, which I&#x27;ve defined in my flake config.&lt;&#x2F;p&gt;
&lt;p&gt;No more spending hours trying to remember how I configured something months ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automating-software-updates-safely&quot;&gt;Automating software updates safely&lt;&#x2F;h2&gt;
&lt;p&gt;One challenge I faced early on was keeping my NixOS system updated. I initially started with NixOS stable channels, but quickly realized my favorite new features in tools like Hyprland (a tiling window manager) sometimes take a while to hit stable channels. I also had issues with screen-sharing.&lt;&#x2F;p&gt;
&lt;p&gt;I moved to unstable channels, but had a similar feeling of being a bit behind. Eventually, I decided to track nixpkgs master branch directly for the latest everything.&lt;&#x2F;p&gt;
&lt;p&gt;This created three problems I needed to solve:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Staying current&lt;&#x2F;strong&gt;: Updates should track upstream as closely as possible&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Avoiding broken updates&lt;&#x2F;strong&gt;: Don&#x27;t start an update if packages will break halfway through&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reducing compilation time&lt;&#x2F;strong&gt;: Avoid compiling everything on my local machines (since NixOS builds up official cache only once the packages reach unstable channels)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;my-automated-update-solution&quot;&gt;My automated update solution&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s the system I&#x27;ve developed and it&#x27;s been running rock-solid for months:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Daily automated testing&lt;&#x2F;strong&gt;: GitHub Actions creates a pull request to my dotfiles repository every day with the most up-to-date package versions in my &lt;code&gt;flake.lock&lt;&#x2F;code&gt; file. For every such update, GitHub Actions attempts to build all packages for all my machines and pushes the resulting build cache to my RPi5.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Binary cache hosting&lt;&#x2F;strong&gt;: My RPi5 hosts an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zhaofengli&#x2F;attic&quot;&gt;Attic&lt;&#x2F;a&gt; server (think of it as a self-hosted binary cache for Nix packages). GitHub Actions can reach my RPi5 through my Headscale network (my personal VPN control server hosted on a VPS).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Checks&lt;&#x2F;strong&gt;: The PR only gets a green checkmark if all packages build successfully on all my machines. This means the update will go through successfully everywhere since I share my &lt;code&gt;flake.lock&lt;&#x2F;code&gt; between machines.&lt;&#x2F;p&gt;
&lt;p&gt;You can see an example of this automated process in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;pull&#x2F;33&quot;&gt;this PR&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Manual approval&lt;&#x2F;strong&gt;: I only accept updates by merging green PRs. After merging, I manually run &lt;code&gt;git pull&lt;&#x2F;code&gt; and &lt;code&gt;sudo nixos-rebuild switch --flake .#my-machine&lt;&#x2F;code&gt; on each machine. The build cache gets pulled from my RPi5&#x27;s Attic server, so updates are fast.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Recovery options&lt;&#x2F;strong&gt;: If there&#x27;s a runtime bug (not caught at compile time), I have two options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Rollback to the previous NixOS generation and wait for the bug to be fixed upstream&lt;&#x2F;li&gt;
&lt;li&gt;Revert just the problematic package by pinning it to an older nixpkgs version&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This setup gives me bleeding-edge packages with confidence that they&#x27;ll actually work. Since implementing this system a few months ago, I haven&#x27;t come across pushing any failing updates onto my machines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backups-with-restic&quot;&gt;Backups with Restic&lt;&#x2F;h2&gt;
&lt;p&gt;I moved from Kopia to Restic for backups because a single Kopia instance doesn&#x27;t support backing up to multiple repositories, and I didn&#x27;t want to maintain multiple Kopia instances. NixOS has a native Restic module that gives fine control over backup schedules, snapshot pruning, compression levels, and more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-restic-works-well-in-my-setup&quot;&gt;Why Restic works well in my setup&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Version compatibility&lt;&#x2F;strong&gt;: My Restic backup servers and clients run on different machines, but they stay compatible because they use the same &lt;code&gt;flake.lock&lt;&#x2F;code&gt; file. All my machines run the same Restic version, so I never worry about client-server version mismatches.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Encrypted credentials&lt;&#x2F;strong&gt;: I store backup passwords and repository credentials encrypted using sops-nix, so they&#x27;re version-controlled but secure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Monitoring integration&lt;&#x2F;strong&gt;: My backup jobs send success&#x2F;failure notifications to my self-hosted Uptime Kuma monitoring server (also running on the RPi5).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-system-recovery&quot;&gt;Testing system recovery&lt;&#x2F;h3&gt;
&lt;p&gt;For the system itself (not just data), I periodically test my disaster recovery process. I&#x27;ll use my RPi4 to build a fresh image for my RPi5, flash it to a new microSD card, and boot my RPi5 from the new card. This simulates a &quot;the microSD died&quot; scenario and ensures I can actually recover my complete system setup.&lt;&#x2F;p&gt;
&lt;p&gt;My Restic configuration files are available in my dotfiles: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;f5b87e8fcd23ca6eb05ac79a2143319dbd9967a6&#x2F;machines&#x2F;pilab&#x2F;services&#x2F;restic.nix&quot;&gt;client config&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;f5b87e8fcd23ca6eb05ac79a2143319dbd9967a6&#x2F;machines&#x2F;pilab&#x2F;services&#x2F;restic-server.nix&quot;&gt;server config&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;on-demand-services-to-save-memory&quot;&gt;On-demand services to save memory&lt;&#x2F;h2&gt;
&lt;p&gt;Running lots of containers on my RPi5&#x27;s 8GB of RAM eventually became a bottleneck, even with zram compression. Rather than buying more hardware, I researched running non-essential services on-demand (when someone actually tries to access them).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-on-demand-services-work&quot;&gt;How on-demand services work&lt;&#x2F;h3&gt;
&lt;p&gt;Services like Navidrome (music streaming), TubeArchivist (YouTube archival), and Memos (note-taking) don&#x27;t need to run 24&#x2F;7. I&#x27;m okay waiting a few seconds for these to start up when I want to use them.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the technique I developed:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Port monitoring&lt;&#x2F;strong&gt;: socat listens for connections on the service&#x27;s normal port&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Service startup&lt;&#x2F;strong&gt;: When a connection is detected, the actual service launches on an internal port&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Proxy mode&lt;&#x2F;strong&gt;: socat forwards requests to the now-running service&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Automatic shutdown&lt;&#x2F;strong&gt;: A monitor checks for active connections every ~10 minutes. If there are none, the service stops and socat resumes listening&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can see this implemented for Navidrome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;f5b87e8fcd23ca6eb05ac79a2143319dbd9967a6&#x2F;machines&#x2F;pilab&#x2F;compose&#x2F;navidrome.nix&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This setup has freed up 1-2GB of physical memory (or 7-8GB accounting for zram compression) when services are idle. That&#x27;s significant on an 8GB machine. I&#x27;ve extended this pattern to several other services like Mealie (recipe management) and HomeBox (inventory tracking).&lt;&#x2F;p&gt;
&lt;p&gt;The user experience is alrightish. These services usually start fast enough.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exposing-services-securely&quot;&gt;Exposing services securely&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes I need to share a service running on my RPi5 with friends or family who aren&#x27;t part of my Tailscale network. For these cases, I run a reverse proxy using Nginx on my personal VPS, which routes requests through my RPi5 over my Headscale connection.&lt;&#x2F;p&gt;
&lt;p&gt;The VPS also runs NixOS. I can hand out a subdomain to friends, and they can access my service without needing special software or VPN access. More details about my VPS setup and how I use nixos-anywhere to install NixOS on providers that don&#x27;t officially support it are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;tree&#x2F;f5b87e8fcd23ca6eb05ac79a2143319dbd9967a6&#x2F;machines&#x2F;clawsiecats&quot;&gt;here&lt;&#x2F;a&gt; (Vultr and HostVDS for now).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-plans-wi-fi-router-functionality&quot;&gt;Future plans: Wi-Fi router functionality&lt;&#x2F;h2&gt;
&lt;p&gt;This is still an idea needing research, but I&#x27;m considering running a wireless access point from my RPi5. The goal would be to route all connected devices through a VPN automatically, avoiding the need to configure VPN on each device individually. I&#x27;d also like to explore OpenWrt-style features like VLANs for isolating sketchy IoT devices.&lt;&#x2F;p&gt;
&lt;p&gt;This appeals to me because I have a basic router and would rather avoid buying new hardware if I can integrate something like this into my RPi5 itself. It&#x27;s currently connected to the Internet via an Ethernet cable anyway, so an access point off with this setup shouldn&#x27;t be so bad I guess. NixOS on top should help me keep router-specific configuration manageable. I might do a post if this ever happens.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;power-consumption-and-hardware-setup&quot;&gt;Power consumption and hardware setup&lt;&#x2F;h2&gt;
&lt;p&gt;My current setup includes three SSDs attached to my RPi5 and a few other peripherals:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First NVMe using the Pimoroni NVMe Base (for primary data storage)&lt;&#x2F;li&gt;
&lt;li&gt;Second NVMe in a USB enclosure via USB 3.0 (for on-site backups)&lt;&#x2F;li&gt;
&lt;li&gt;Third external SSD via USB 3.0 (for storing Attic build cache)&lt;&#x2F;li&gt;
&lt;li&gt;Official active cooler (minimal power draw)&lt;&#x2F;li&gt;
&lt;li&gt;USB 2.0 Wi-Fi dongle (for experimental Wi-Fi router functionality)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This entire setup consumes about 7.5-8.0W at idle (measured with a local Kill-A-Watt equivalent) and peaks at 11-13W under load.&lt;&#x2F;p&gt;
&lt;p&gt;When the two external drives suspend after periods of inactivity, power consumption further drops to around 6.5-7.2W at idle. I haven&#x27;t seen it exceed 14W under load in real-world usage, which I&#x27;m happy with for the compute it provides.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-nixos-advantage-for-homelabs&quot;&gt;The NixOS advantage for homelabs&lt;&#x2F;h2&gt;
&lt;p&gt;Simple things that used to require research and manual setup are now just configuration options. Take zram (memory compression) as an example: on other distributions, I&#x27;d need to find a userspace program, set up systemd services, and hope it all works together.&lt;&#x2F;p&gt;
&lt;p&gt;With NixOS, zram is a simple &lt;code&gt;zramSwap.enable = true;&lt;&#x2F;code&gt; or watchdog is &lt;code&gt;systemd.settings.Manager.RuntimeWatchdogSec = 360;&lt;&#x2F;code&gt; in my configuration. Although, this is not to say it&#x27;s all glitters. It definitely has it quirks, but those somewhat make sense too when looking at them through the lens of NixOS trying to be as reproducible as possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Flashing OpenBeken on 3-pin Wi-Fi switch based on BC101VE-11P (BK7238)</title>
        <published>2025-07-27T00:00:00+00:00</published>
        <updated>2025-07-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/07/27/flashing-openbeken-on-3-pin-wifi-switch-based-on-bc101ve-11p/"/>
        <id>https://ritiek.github.io/2025/07/27/flashing-openbeken-on-3-pin-wifi-switch-based-on-bc101ve-11p/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/07/27/flashing-openbeken-on-3-pin-wifi-switch-based-on-bc101ve-11p/">&lt;p&gt;I received this 3-pin Wi-Fi switch costing INR 500 that lets me control power to the connected appliance
through the vendor&#x27;s proprietary Android app. It works fine. It looks to be based on Tuya as I am also
able to pair up the switch to the Smart Life Android app.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;1-3_preview.jpeg&quot; width=&quot;300&quot;&gt;
  &lt;i&gt;The switch&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;Screenshot_2025-07-05-13-43-50-167_com.livsmartautomation.livsmart_cropped_preview.jpeg&quot; width=&quot;300&quot;&gt;
  &lt;i&gt;Vendor&#x27;s Android app&lt;br&gt;(The switch doesn&#x27;t have energy monitoring circuitry&lt;br&gt;but the app shows 1W as a placeholder anyway)&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to see I could cut the cloud as well as flash a more open firmware to it.
I started off with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ct-Open-Source&#x2F;tuya-convert&quot;&gt;tuya-convert&lt;&#x2F;a&gt;.
It didn&#x27;t work cause the peripheral is based on a newer firmware that
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ct-Open-Source&#x2F;tuya-convert?tab=readme-ov-file#procedure&quot;&gt;isn&#x27;t supported&lt;&#x2F;a&gt;
by tuya-convert. I went ahead to disassemble it to inspect it better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disassembly&quot;&gt;Disassembly&lt;&#x2F;h2&gt;
&lt;p&gt;I basically did something like this:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250721_205551_preview.jpeg&quot; width=&quot;300&quot;&gt;
  &lt;i&gt;Insert and run a knife or a sharp object around the&lt;br&gt;edges to cut through any hardened glue&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250721_211032_preview.jpeg&quot; width=&quot;300&quot;&gt;
  &lt;i&gt;Apply pressure on both the exposed ends with a blunt&lt;br&gt;object and pry it open carefully&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_145416_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;Opened carefully&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_145115_cropped_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;Clearer&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_145834_cropped_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;
    Lift the circuit board by inserting a screwdriver or a small&lt;br&gt;
    object through the small gap and applying force&lt;br&gt;
    just above the plastic casing
  &lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_150442_preview.jpeg&quot; width=&quot;900&quot;&gt;
  &lt;i&gt;Ok, lifted successfully&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;The sticker on the SoC reads &quot;BC101VE-11P&quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;beken-bc101ve-11p&quot;&gt;Beken BC101VE-11P&lt;&#x2F;h2&gt;
&lt;p&gt;Looking up on this SoC, I found this page by Cionlabs, who looks to be the manufacturer
of the BC101VE-11P SoC:
&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;cionlabs.com&#x2F;product&#x2F;bc101ve-11p&#x2F;&quot;&gt;https:&#x2F;&#x2F;cionlabs.com&#x2F;product&#x2F;bc101ve-11p&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interesting points to note on the page:
&lt;br&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;BC101VE-11P based on BK7238&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ESP8685-WROOM-03 Pin compatible&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Digging further into these points, it looks like the SoC isn&#x27;t an ESP MCU (which I&#x27;m
previously familiar with). It also looks like Tasmota doesn&#x27;t support BK7238 at the time
of writing this. However, it does mention about pins being compatible with
ESP8685-WROOM-03 and there&#x27;s a Tasmota-like alternative called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshwprojects&#x2F;OpenBK7231T_App&quot;&gt;OpenBeken&lt;&#x2F;a&gt; available for
this SoC.&lt;&#x2F;p&gt;
&lt;p&gt;I also found this datasheet on the BC101VE-01-11P from cionlabs here (wonder if it&#x27;s for
the same MCU, cause mine just mentions BC101VE-11P):
&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;cionlabs.com&#x2F;wp-content&#x2F;uploads&#x2F;2025&#x2F;06&#x2F;BC101VE-01-11P-V1.4.pdf&quot;&gt;https:&#x2F;&#x2F;cionlabs.com&#x2F;wp-content&#x2F;uploads&#x2F;2025&#x2F;06&#x2F;BC101VE-01-11P-V1.4.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It features this pin layout:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;image_preview.jpeg&quot; width=&quot;600&quot;&gt;
  &lt;i&gt;Pin layout of the BC101VE-01-11P from the official datasheet&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Also looking up on the ESP8685-WROOM-03, I found this PDF datasheet from Espressif which
illustrates its pin layout schematic:
&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.espressif.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;documentation&#x2F;esp8685-wroom-03_datasheet_en.pdf&quot;&gt;https:&#x2F;&#x2F;www.espressif.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;documentation&#x2F;esp8685-wroom-03_datasheet_en.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;image_preview.jpeg.1&quot; width=&quot;1000&quot;&gt;
  &lt;i&gt;Illustration of ESP8685-WROOM-03&#x27;s pin layout schematic&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; It looks like this SoC by Espressif was previously referred to as ESP8685-WROOM-03
but has since joined the ranks of ESP32 fam and this same SoC is now also known as ESP32-C3.&lt;&#x2F;p&gt;
&lt;p&gt;The top and bottom pin layout on the official datasheet as well as the ESP8685-WROOM-03 seems
to match with what I have on my BC101VE-11P (5 pins on the top side and 6 pins on the bottom
side) as in the picture:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_202349_cropped_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;Top and bottom pin layout on my BC101VE-11P&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;However, the layout of the test pins on the bottom side neither matches with what I have on
my BC101VE-11P from the switch (mine aren&#x27;t aligned in the same way as &lt;code&gt;TX2&lt;&#x2F;code&gt;, &lt;code&gt;RX2&lt;&#x2F;code&gt;, &lt;code&gt;TDO&lt;&#x2F;code&gt;
are in this picture), nor does it match with the ESP8685-WROOM-03.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250705_185511_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;Test pin layout on my BC101VE-11P&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uart&quot;&gt;UART&lt;&#x2F;h2&gt;
&lt;p&gt;On the first glance, it looks all the pins on the SoC that we need to have in contact to form
a UART serial connection are consistent in the pin layout:
&lt;br&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;3v3
&lt;br&gt;&lt;&#x2F;li&gt;
&lt;li&gt;GND
&lt;br&gt;&lt;&#x2F;li&gt;
&lt;li&gt;RX
&lt;br&gt;&lt;&#x2F;li&gt;
&lt;li&gt;TX&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All the 4 pins are present on bottom side on both the SoCs.&lt;&#x2F;p&gt;
&lt;p&gt;UART can be established using another machine through a USB to TTL adapter.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;!-- &lt;p align=&quot;center&quot;&gt; --&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;l2HYjdi.png&quot; width=&quot;200&quot;&gt;
  &lt;i&gt;USB to TTL adapter&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a good idea to power up BC101VE-11P module now using the USB to TTL adapter to make sure
it&#x27;s still operable after the plastic surgery. Don&#x27;t need to solder anything yet.
Get a few jumper cables and form up connections through temporary contact as described:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;This should power up the module and I could see the blue onboard LED on the smart switch board
flash once and turn off. It&#x27;s got some life, cool!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, let&#x27;s try if we can see anything over UART. May want to consider soldering wires to the
BC101VE-11P at this point. For now I had a coworker help me out with making temporary contacts
(buying out some buffer tehee):&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;On my Linux laptop connected over UART, the device showed up as &lt;code&gt;&#x2F;dev&#x2F;ttyACM0&lt;&#x2F;code&gt;. It could
instead also show up as &lt;code&gt;&#x2F;dev&#x2F;USB0&lt;&#x2F;code&gt; or something. Verify once.&lt;&#x2F;p&gt;
&lt;p&gt;Setting the baud rate to 115200 with picocom seems to have worked:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; picocom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; 115200 &#x2F;dev&#x2F;ttyACM0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It also helps that my (and most other) USB to TTL devices flash a different LED whenever
data is being emitted over serial.&lt;&#x2F;p&gt;
&lt;p&gt;I noticed my BC101VE-11P module flash the blue LED once and spew these logs over serial
everytime I powered it up:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; os_addr(0x10000)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..........
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BK7238_1.0.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REG:cpsr&lt;&#x2F;span&gt;&lt;span&gt;        spsr        r13      BK7238_1.0.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REG:cpsr&lt;&#x2F;span&gt;&lt;span&gt;        spsr        r13         r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SVC:0x000000D3&lt;&#x2F;span&gt;&lt;span&gt;              0x00401C1C  0x000033A0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IRQ:0x000000D2&lt;&#x2F;span&gt;&lt;span&gt;  0x00000010  0x00401E0C  0x2C00B449
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FIR:0x000000D1&lt;&#x2F;span&gt;&lt;span&gt;  0x00000010  0x00401FFC  0x3289416B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYS:0x000000DF&lt;&#x2F;span&gt;&lt;span&gt;              0x0040192C  0x00000158
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ST:0x00000000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[I&#x2F;FAL]&lt;&#x2F;span&gt;&lt;span&gt; Fal(V0.4.0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;success
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[I&#x2F;OTA]&lt;&#x2F;span&gt;&lt;span&gt; RT-Thread OTA package(V0.2.8-beken-1133282d-20220604) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt; success.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; os_addr(0x10000)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..........
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FATAL:&lt;&#x2F;span&gt;&lt;span&gt; read zero bytes from port
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;term_exitfunc:&lt;&#x2F;span&gt;&lt;span&gt; reset failed for dev UNKNOWN: Input&#x2F;output error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then it&#x27;d go silent afterwards and &lt;code&gt;&#x2F;dev&#x2F;ttyACM0&lt;&#x2F;code&gt; device file would disappear.&lt;&#x2F;p&gt;
&lt;p&gt;I guessed it to be a power issue or a bad USB to TTL adapter. I had a spare NodeMCU ESP8266
development board that I had flashed Tasmota onto a while ago but hadn&#x27;t configured it any
further, so it&#x27;d still be broadcasting tasmota&#x27;s default AP when it&#x27;s powered on properly.&lt;&#x2F;p&gt;
&lt;!-- &lt;p&gt; --&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;image_preview.jpeg.2&quot; width=&quot;400&quot;&gt;
  &lt;i&gt;NodeMCU ESP8266 Development Board&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I tried to power up the NodeMCU through the 3v3 rail:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;And the tasmota&#x27;s AP didn&#x27;t show up either! Although, powering it up through the 5V rail
seems to have worked and I could see tasmota&#x27;s AP and connect over to 192.168.4.1 on the
AP just fine:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;So, it&#x27;s very likely a power issue where my machine&#x27;s USB port or the USB to TTL adapter
isn&#x27;t able to compensate for the additional demand in current when the voltage is lowered
to 3.3V, in order to supply the same power as on a 5V rail.&lt;&#x2F;p&gt;
&lt;p&gt;Sadly the BC101VE-11P accepts only 3.3V input and not a 5V input. For the sake of it, I decided
to power up the BC101VE-11P module over 3.3V but with the USB to TTL now connected to a wall
adapter:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Noticed a slight change in the behaviour of the blue onboard LED this time. The LED now blinked
every second instead of previously flashing once and shutting down when connected to my machine
over USB. This behaviour was consistent.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Decided to give another try to power up my spare NodeMCU ESP8266 through the 5V rail on my USB
to TTY adapter connected to my machine&#x27;s USB port where the NodeMCU would in-turn power up the
BC101VE-11P through one of the 3V3 output pins present on the development board:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;This gave me a solid light up of blue LED onboard. Additionally, hooking up the RX and TX connections
directly to the BC101VE-11 from my USB to TTL looked to be giving logs properly over serial now:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; picocom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; 115200 &#x2F;dev&#x2F;ttyACM0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; os_addr(0x10000)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..........
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[garbled&lt;&#x2F;span&gt;&lt;span&gt; output]start addr:0x4114d0, size:191280
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Flash]id:0x854215
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--write&lt;&#x2F;span&gt;&lt;span&gt; status reg:4004,1--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[Flash]init&lt;&#x2F;span&gt;&lt;span&gt; over
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sctrl_sta_ps_init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SDK&lt;&#x2F;span&gt;&lt;span&gt; Rev: 3.0.70 d414331
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]app:[tcb]4127b0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;4117a8-4127a8:4096:0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]extended_app:[tcb]413020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;412818-413018:2048:4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]idle:[tcb]413490 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;413088-413488:1024:0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]timer_thd:[tcb]414218 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;413610-414210:3072:2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OSK&lt;&#x2F;span&gt;&lt;span&gt; Rev: F-3.0.44 d414331
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cset:0&lt;&#x2F;span&gt;&lt;span&gt; 0 0 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[FUNC]rwnxl_init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chip&lt;&#x2F;span&gt;&lt;span&gt; id=7238 device id=22068000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IP&lt;&#x2F;span&gt;&lt;span&gt; Rev: W4-3.0.70-P0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;txdesc&lt;&#x2F;span&gt;&lt;span&gt; flush
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[FUNC]intc_init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[FUNC]calibration_main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;device_id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0x22068000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calibration_main&lt;&#x2F;span&gt;&lt;span&gt; over
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flash&lt;&#x2F;span&gt;&lt;span&gt; txpwr table:0xf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dif&lt;&#x2F;span&gt;&lt;span&gt; g and n20 ID in flash:4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt; txpwr tab from flash success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uncali&lt;&#x2F;span&gt;&lt;span&gt; adc value:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;00 00 00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span&gt; in flash is:253
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]temp_detct:[tcb]414830 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;414428-414828:1024:3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lpf_i &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span&gt; in flash is:76, 78
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xtal&lt;&#x2F;span&gt;&lt;span&gt; in flash is:83
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xtal_cali:83
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--init_xtal&lt;&#x2F;span&gt;&lt;span&gt; = 83
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[FUNC]ps_init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; watchdog enabled, period=10000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt; watchdog enabled, period=60000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[FUNC]func_init_extended&lt;&#x2F;span&gt;&lt;span&gt; OVER!!!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_type:0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]kmsgbk:[tcb]4158f8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;4148f0-4158f0:4096:6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]init_thread:[tcb]416138 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;415960-416130:2000:0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]core_thread:[tcb]417000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;4167f8-416ff8:2048:7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]rf_arbitrate:[tcb]417968 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;417160-417960:2048:8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rf_thread_init&lt;&#x2F;span&gt;&lt;span&gt; ok
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]ble:[tcb]418a80 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;417a78-418a78:4096:5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ble&lt;&#x2F;span&gt;&lt;span&gt; mac:a0-24-42-0b-32-81
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rwip_heap_env&lt;&#x2F;span&gt;&lt;span&gt; addr:0x418ae8 size:4044
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rwip_heap_db&lt;&#x2F;span&gt;&lt;span&gt; addr:0x419ac0 size:3084
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rwip_heap_msg&lt;&#x2F;span&gt;&lt;span&gt; addr:0x41a6d8 size:10364
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rwip_heap_non_ret&lt;&#x2F;span&gt;&lt;span&gt; addr:0x41cf60 size:668
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xvr_reg_init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tx_pwr_idx:20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enter&lt;&#x2F;span&gt;&lt;span&gt; normal mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[gapm_cmp_evt_handler]&lt;&#x2F;span&gt;&lt;span&gt; conidx:0,operation:0x1,status:0x0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd-&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;addr.addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; :0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[gapm_cmp_evt_handler]&lt;&#x2F;span&gt;&lt;span&gt; conidx:0,operation:0x3,status:0x0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gapm_cmp_evt:GAPM_SET_DEV_CONFIG
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gapm_cmp_evt:wait&lt;&#x2F;span&gt;&lt;span&gt; GAPM_GEN_RAND_NB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[gapm_cmp_evt_handler]&lt;&#x2F;span&gt;&lt;span&gt; conidx:0,operation:0x33,status:0x0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gapm_cmp_evt:GAPM_GEN_RAND_NB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[gapm_cmp_evt_handler]&lt;&#x2F;span&gt;&lt;span&gt; conidx:0,operation:0x33,status:0x0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gapm_cmp_evt:GAPM_GEN_RAND_NB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[gapm_cmp_evt_handler]&lt;&#x2F;span&gt;&lt;span&gt; conidx:0,operation:0x5,status:0x0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gapm_cmp_evt:BLE_STACK_OK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]cli:[tcb]41fc50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;41ec48-41fc48:4096:3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Initializing&lt;&#x2F;span&gt;&lt;span&gt; TCP&#x2F;IP stack
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tcp_port:60670
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]tcp&#x2F;ip:[tcb]4129d8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;417160-417960:2048:7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[THD]wp�BK7238_1.0.14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;REG:cpsr&lt;&#x2F;span&gt;&lt;span&gt;        spsr        r13         r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SVC:0x000000D3&lt;&#x2F;span&gt;&lt;span&gt;              0x00401C1C  0x000033A0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;IRQ:0x000000D2&lt;&#x2F;span&gt;&lt;span&gt;  0x00000010  0x00401E0C  0x2C049409
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FIR:0x000000D1&lt;&#x2F;span&gt;&lt;span&gt;  0x00000010  0x00401FFC  0x3289506B
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SYS:0x000000DF&lt;&#x2F;span&gt;&lt;span&gt;              0x0040192C  0x00000158
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ST:0x00000000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[I&#x2F;FAL]&lt;&#x2F;span&gt;&lt;span&gt; Fal(V0.4.0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;success
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[I&#x2F;OTA]&lt;&#x2F;span&gt;&lt;span&gt; RT-Thread OTA package(V0.2.8-beken-1133282d-20220604) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt; success.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I got the above logs from the stock vendor firmware present on thGe BC101VE-11P. It mentions
&lt;code&gt;Initializing TCP&#x2F;IP stack&lt;&#x2F;code&gt; and &lt;code&gt;tcp_port:60670&lt;&#x2F;code&gt; (pretty much used by Tuya) which hints that
the module is powered up and operating properly. I could also see the module showing up as
&quot;online&quot; in the vendor shipped Android app at this point.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flashing-openbeken&quot;&gt;Flashing OpenBeken&lt;&#x2F;h2&gt;
&lt;p&gt;So far so good with the pins on BC101VE-11P matching with the ones mentioned in the official
documentation as well as present on ESP8685-WROOM-03.&lt;&#x2F;p&gt;
&lt;p&gt;Now to find out what pin boots the BC101VE-11P into UART flash&#x2F;download mode. This doesn&#x27;t
seem to be clearly documented in the official datasheet.&lt;&#x2F;p&gt;
&lt;p&gt;The datasheet on the ESP8685-WROOM-03 by Espressif mentions the following:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;image_preview.jpeg.3&quot; width=&quot;1000&quot;&gt;
  &lt;i&gt;Chip Boot Mode Control on ESP8685-WROOM-03&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Which doesn&#x27;t make much sense as there&#x27;s no pin labelled as GPIO8 on my BC101VE-11P (what pin
should I pull-up&#x2F;provide 3.3V to for booting into joint download boot mode?).&lt;&#x2F;p&gt;
&lt;p&gt;I also came across this document on ESP8685-WROOM-03:
&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;fcc.report&#x2F;FCC-ID&#x2F;2AC7Z-ESP868503&#x2F;5612045.pdf&quot;&gt;https:&#x2F;&#x2F;fcc.report&#x2F;FCC-ID&#x2F;2AC7Z-ESP868503&#x2F;5612045.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It mentions:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;IO9 is internally logic high. If IO9 is set to pull-up, the Boot mode is selected. If this
pin is pull-down or left floating, the Download mode is selected. For more information on
ESP8685-WROOM-03, please refer to ESP8685-WROOM-03 Datasheet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, both the above sources mention about pulling-down GPIO9 to for download mode. Let&#x27;s just
try this and forget about the GPIO8 for now. However, as I mentioned before, the test pin points
present in the middle of the SoC do not the match between both the modules.
This is inconvenient because now I&#x27;m not sure what pin on the BC101VE-11P corresponds to
GPIO9.&lt;&#x2F;p&gt;
&lt;p&gt;I got the top and bottom pins soldered on the module from a local shop to make everything
manageable. The necessary ones are 3V3, GND, RX, TX.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250719_171151_preview.jpeg&quot; width=&quot;425&quot;&gt;
  &lt;i&gt;&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250719_171139_preview.jpeg&quot; width=&quot;425&quot;&gt;
  &lt;i&gt;Some nice soldering!&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;And then connecting the pins all over again:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;td&gt;5V&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;td&gt;3V3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;th&gt;USB to TTL&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;TX&lt;&#x2F;td&gt;&lt;td&gt;RX&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250719_174553_preview.jpeg&quot; width=&quot;600&quot;&gt;
  &lt;i&gt;Yay it works!&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250719_174715_preview.jpeg&quot; width=&quot;600&quot;&gt;
  &lt;i&gt;UART logs show up fine as well&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I had to do some experimenting to try to boot the module into download mode. I connected the
module to my lappy through UART and ran a loop to try dump the firmware from the flash:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; while true; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; bk7231tools read_flash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyACM0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; 0x200000 switch_stock_fw.bin; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt; 1s; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;0x200000&lt;&#x2F;code&gt; because BC101VE-11P is mentioned to have 2MB of flash storage.&lt;&#x2F;p&gt;
&lt;p&gt;Then I pulled-down each of the test pins using my fingers to bring one end of the jumper cable
in contact with GND temporarily, and then rebooting the module (by re-connecting 3V3 or GND).
One pin at a time.&lt;&#x2F;p&gt;
&lt;p&gt;After some fighting, I found that pulling-down one of the following points (as circled orange
in the picture below) allowed my lappy to dump the flash! This means the module went into
download mode.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250727_024344_marked_preview.jpeg&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;Pulling-down one of these pins causes the&lt;br&gt;module to boot into download mode&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;So to boot into download mode, additionally make one of these contacts:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NodeMCU ESP8266&lt;&#x2F;th&gt;&lt;th&gt;BC101VE-11P&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;&amp;lt;Unknown Pin-1&amp;gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GND&lt;&#x2F;td&gt;&lt;td&gt;&amp;lt;Unknown Pin-2&amp;gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Sometimes if one of the encircled pin didn&#x27;t work, then the other encircled pin worked into
booting the module into download mode most times.&lt;&#x2F;p&gt;
&lt;p&gt;Once I had a backup of the stock firmware done, I downloaded the latest OpenBeken release for
BK7238 for UART Flash from:
&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshwprojects&#x2F;OpenBK7231T_App&#x2F;releases&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;openshwprojects&#x2F;OpenBK7231T_App&#x2F;releases&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;and flashed it onto my module using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo bk7231tools write_flash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyACM0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; 0 OpenBK7238_QIO_1.18.138.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had to also to pass &lt;code&gt;-B&lt;&#x2F;code&gt; flag to overwrite the bootloader. Before deciding to overwrite the
bootloader, make sure you&#x27;ve taken a dump of the stock firmware. This is supposed to be risky.&lt;&#x2F;p&gt;
&lt;p&gt;After the flashing was performed successfully, I rebooted the module into normal mode.
Post this I am unable to see any logs through UART. However, an access point with its SSID
&quot;OpenBK7238_xxxxxxxx&quot; did start to show up. Connecting to it and accessing 192.168.4.1
in the webbrowser looks to have worked!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tbd-configuration&quot;&gt;[TBD] Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;[Need to work on this section]&lt;&#x2F;p&gt;
&lt;p&gt;I configured OpenBeken to connect to my Wi-Fi router. OpenBeken offers a GPIO testing tool
under the Launch Web Application option accessible through the OpenBeken webserver running
on the module. I figured the blue LED is connected invertedly to GPIO6 and the push button
on the switch is connected to GPIO10.&lt;&#x2F;p&gt;
&lt;p&gt;I still need to figure out what GPIO pin the relay is connected to, something I&#x27;ll be
able to do when I can get the plastic enclosure up and connect it 220V AC using pogo pins,
which I believe should power up the relay.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20250720_162523_preview.jpeg&quot; width=&quot;600&quot;&gt;
  &lt;i&gt;My switch running OpenBeken v1.18.138&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This is the configuration that shows up on my Web Application as of now:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;vendor&amp;quot;: &amp;quot;Tuya&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;bDetailed&amp;quot;: &amp;quot;0&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;name&amp;quot;: &amp;quot;Full Device Name Here&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;model&amp;quot;: &amp;quot;enter short model name here&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;chip&amp;quot;: &amp;quot;BK7238&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;board&amp;quot;: &amp;quot;TODO&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;flags&amp;quot;: &amp;quot;1024&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;keywords&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;TODO&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;TODO&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;TODO&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;pins&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;6&amp;quot;: &amp;quot;LED_n;57&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;10&amp;quot;: &amp;quot;Btn;53&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;command&amp;quot;: &amp;quot;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;image&amp;quot;: &amp;quot;https:&#x2F;&#x2F;obrazki.elektroda.pl&#x2F;YOUR_IMAGE.jpg&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;wiki&amp;quot;: &amp;quot;https:&#x2F;&#x2F;www.elektroda.com&#x2F;rtvforum&#x2F;topic_YOUR_TOPIC.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NixOS on Radxa Zero 3W</title>
        <published>2025-03-27T00:00:00+00:00</published>
        <updated>2025-03-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/03/27/nixos-on-radxa-zero-3w/"/>
        <id>https://ritiek.github.io/2025/03/27/nixos-on-radxa-zero-3w/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/03/27/nixos-on-radxa-zero-3w/">&lt;p&gt;I was able to get NixOS working on Radxa Zero 3W! It&#x27;s got some firmware related issues, with
the major one being built-in WiFi not getting detected correctly. Otherwise, it seems usable for
the most part.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;&#x2F;h2&gt;
&lt;p&gt;NixOS SD card images can be build using this flake:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nabam&#x2F;nixos-rockchip&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;nabam&#x2F;nixos-rockchip&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Use the image for &lt;code&gt;CM3&#x2F;CM3 I&#x2F;O&lt;&#x2F;code&gt; board type.&lt;&#x2F;p&gt;
&lt;!-- TODO: I think the reason this probably works is.. (See boot source code (at home)). --&gt;
&lt;p&gt;Basically, add the inputs to our flake.nix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:nabam&#x2F;nixos-rockchip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Define the target outputs in flake.nix&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosConfigurations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radxa-zero-3 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosSystem &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aarch64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;machines&#x2F;radxa-zero-3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;machines&#x2F;radxa-zero-3&#x2F;hw-config.nix
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;specialArgs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radxa-zero-3-sd &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosConfigurations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;radxa-zero-3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdImage&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add this config to the board&#x27;s hardware configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;config, lib, pkgs, modulesPath, inputs, ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;noZFS &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;overlays &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;      (final: super: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;zfs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zfs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;overrideAttrs &lt;&#x2F;span&gt;&lt;span&gt;(_: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;platforms &lt;&#x2F;span&gt;&lt;span&gt;= [ ]; });
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;imports &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosModules&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sdImageRockchip
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosModules&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noZFS
&lt;&#x2F;span&gt;&lt;span&gt;  ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# I&amp;#39;ll assume native host machine as aarch64.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# (I believe &amp;quot;aarch64-linux&amp;quot; can be changed to &amp;quot;x86-64-linux&amp;quot; to cross-compile)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;uBoot &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;packages&lt;&#x2F;span&gt;&lt;span&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aarch64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uBootRadxaCM3IO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;kernelPackages &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rockchip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;legacyPackages&lt;&#x2F;span&gt;&lt;span&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aarch64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kernel_linux_6_12_rockchip&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;p&gt;It looks like the onboard WiFi is not yet supported by the kernel shipped with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;commit&#x2F;b6eaf97c6960d97350c584de1b6dcff03c9daf42&quot;&gt;current latest version
of NixOS unstable&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to note that early Radxa Zero 3W boards shipped with a different WiFi chip, AP6212. The
newer versions and the board I have on me come with the AIC WiFi chip. Both of these depened on a different
software driver. The AIC WiFi chip requires the AIC8800 driver.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;forum.radxa.com&#x2F;t&#x2F;wifi-driver-for-radxa-zero-3w&#x2F;20507&quot;&gt;https:&#x2F;&#x2F;forum.radxa.com&#x2F;t&#x2F;wifi-driver-for-radxa-zero-3w&#x2F;20507&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s an open issue on nixpkgs to add support for the newer Radxa Zero 3W&#x27;s onboard WiFi module:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;342133&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;342133&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the meanwhile, it&#x27;s possible to feed internet to the board via USB tethering. My Android mobile device,
as well most Android devices out there support USB tethering out-of-the-box.&lt;&#x2F;p&gt;
&lt;p&gt;I also tried an RTL8192EU based WiFi dongle and it has been a plug-and-play experience as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-know-if-the-board-is-booting-into-the-os&quot;&gt;How to know if the board is booting into the OS?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve tried out the &lt;code&gt;CM3&#x2F;CM3 I&#x2F;O&lt;&#x2F;code&gt; image variant from
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nabam&#x2F;nixos-rockchip&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;nabam&#x2F;nixos-rockchip&lt;&#x2F;a&gt;
which looks to boot properly on my Radxa Zero 3W.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easy to verify whether the image is booting into the OS if we&#x27;ve a supported micro-HDMI cable and a
monitor around.&lt;&#x2F;p&gt;
&lt;p&gt;If not, there&#x27;s another way to verify whether the boot sequence is working correctly. Try out the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Flash the image onto the microSD card.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Mount this flashed microSD card onto your local machine first and take note of the directory structure
present in the root partition.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Insert this flashed SD card into Radxa Zero 3W and keep the board powered on for ~5 mins. If the boot
sequence is working as expected, the software should perform nix path registrations on the first boot.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now pull out the microSD card from the board and mount it onto your local machine. If the directory
structure has changed considerably from before, and nix-path-registrations file is no longer present in the
root partition, that means the boot was a success!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That is pretty much it! If you&#x27;re headless, you can build a config using nixos-rockchip that launches the
OpenSSH server on boot with your credentials. You can then find the IP address of the board after tethering
and SSH&#x27;ing into the board should then work just fine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radxa-zero-3e&quot;&gt;Radxa Zero 3E?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve also Radxa Zero 3E with me which doesn&#x27;t seem to boot up with the Radxa CM3&#x2F;CM3 I&#x2F;O image (or any
other image, including the Radxa-supported Debian and Ubuntu images).
I&#x27;m not sure if I received a damaged board or that the boot addresses are different
between the 3W and the 3E. I&#x27;ve read people having issues with the microSD slot where the pins do not
make contact when the microSD card is inserted on the 3E, although mine seems to look good in this
regard. More tinkering imminent.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NixOS on 1 GB Vultr VPS using nixos-anywhere</title>
        <published>2025-02-10T00:00:00+00:00</published>
        <updated>2025-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/02/10/nixos-on-1gb-vultr-vps-using-nixos-anywhere/"/>
        <id>https://ritiek.github.io/2025/02/10/nixos-on-1gb-vultr-vps-using-nixos-anywhere/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/02/10/nixos-on-1gb-vultr-vps-using-nixos-anywhere/">&lt;p&gt;It seems we can override a machine&#x27;s OS with a simple flake-based NixOS configuration using
nixos-anywhere, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix run github:nix-community&#x2F;nixos-anywhere -- \
&lt;&#x2F;span&gt;&lt;span&gt;  --flake .#yummyflake root@12.121.212.121
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What I mean by &#x27;simple NixOS configuration&#x27; is - a configuration with none of these features:
LUKS encryption, impermanence, or secrets provisioning (sops-nix, agenix, etc.). Although, the
configuration must perform some kind of disk partitioning using disko, for nixos-anywhere to do
its magic. Such an install should go smooth enough without the need of manual intervention at
any step during the process.&lt;&#x2F;p&gt;
&lt;p&gt;However, the flake-based NixOS configuration I&#x27;ll be installing on a Vultr VPS is for a machine
that goes by clawsiecats. This machine configuration is publicly available here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;clawsiecats&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;clawsiecats&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It enables all of the NixOS specific features mentioned above - BTRFS partitioning on LUKS,
impermanence, and secrets provisioning using sops-nix.&lt;&#x2F;p&gt;
&lt;p&gt;This is what makes things a little trickier. The rest of the post is mainly me talking about
setting up these features in NixOS configuration so that the configuration can be deployed using
nixos-anywhere with the least amount of manual intervention, on a Vultr VPS (adaptable to
other hosting providers usually, only difference should be the partitioning scheme [GPT&#x2F;MBR]
used by the hosting provider).&lt;&#x2F;p&gt;
&lt;p&gt;If the reader is following this guide with care then it&#x27;s recommended to open
the above link to my machine&#x27;s configuration (which is Vultr ready including all these features)
and go through it side-by-side along with this
guide as there are a lot of references to it to help things make sense.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;secrets-provisioning-sops-nix&quot;&gt;Secrets Provisioning (sops-nix)&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s agenix and many more that seem nice. Up to you. I&#x27;m currently using sops-nix so I&#x27;ll
dive into it here. Start by adding sops-nix as an input in your flake:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sops-nix &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:Mic92&#x2F;sops-nix&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;follows &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;sops-nix allows to provision machine specific secrets, and I tie my secret key to my machine&#x27;s
private SSH host key. I keep this private SSH host key unique for every machine configuration.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sops &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;defaultSopsFile &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;..&#x2F;machines&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;networking&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#bf616a;&quot;&gt;hostName&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ab7967;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;secrets.yaml&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;sshKeyPaths &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# .&#x2F;machines&#x2F;clawsiecats&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# My version of this file can be found here:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;clawsiecats&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jitsi.htpasswd&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ENC[AES256_GCM,data:abc...,iv:xy...z=,tag:qwe...type:str]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tailscale.authkey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ENC[AES256_GCM,data:xy...z,iv:ab...c,tag:rty...,type:str]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sops&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shamir_threshold&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kms&lt;&#x2F;span&gt;&lt;span&gt;: []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcp_kms&lt;&#x2F;span&gt;&lt;span&gt;: []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;azure_kv&lt;&#x2F;span&gt;&lt;span&gt;: []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hc_vault&lt;&#x2F;span&gt;&lt;span&gt;: []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;secrets.yaml&lt;&#x2F;code&gt; can be edited using the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix run nixpkgs#sops edit .&#x2F;machines&#x2F;clawsiecats&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this may prompt for 2FA on our key, if it&#x27;s set up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;impermanence&quot;&gt;Impermanence&lt;&#x2F;h2&gt;
&lt;p&gt;This seems mostly to be a NixOS concept mainly achieved by mounting &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; as &lt;code&gt;tmpfs&lt;&#x2F;code&gt;.
The idea, is that we perform bind mounts or create symlinks inside &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; that point to the actual
persistent files and directories mounted somewhere else (this stuff we explicitly specify to
preserve).&lt;&#x2F;p&gt;
&lt;p&gt;This is supposed to help mitigate the lingering build up of files that could potentially get
in the way of purity of NixOS (we ideally wouldn&#x27;t want a program to imperatively read and write
its config in &lt;code&gt;&#x2F;etc&#x2F;&lt;&#x2F;code&gt; in NixOS) as any residual files that get created in &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; will automatically
be cleaned up on reboot (since &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; is &lt;code&gt;tmpfs&lt;&#x2F;code&gt; living in memory or swap).&lt;&#x2F;p&gt;
&lt;p&gt;I use impermanence in my configuration setup. Impermanence can be set up using custom solutions
for syncing &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; from our persistent storage. Anyway, I&#x27;ll be using the impermanence module
which seems to solve this pretty well (through bind mounts and symlinks). Add the module as an
input to your flake with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impermanence&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:nix-community&#x2F;impermanence&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few important files present under &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; that should be persisted, such as host SSH
keys which we&#x27;ll be persisting in the next step and &lt;code&gt;&#x2F;etc&#x2F;machine-id&lt;&#x2F;code&gt; which is what many
processes depend on to identify themselves that they&#x27;re running on the same machine in the
case the process restarts (we wouldn&#x27;t want maybe ACME certificates to be re-generated on
every reboot since &lt;code&gt;&#x2F;etc&#x2F;machine-id&lt;&#x2F;code&gt; would be re-created if we were not to persist it).&lt;&#x2F;p&gt;
&lt;p&gt;For now, we&#x27;ll generate a &lt;code&gt;&#x2F;etc&#x2F;machine-id&lt;&#x2F;code&gt; locally which we&#x27;ll transfer to our target
machine later under the persistent storage.
Let&#x27;s create a directory on our local machine first where we&#x27;ll store all the files that we&#x27;d
like to transfer to our target machine when nixos-anywhere gets invoked:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export BASEDIR=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&#x2F;mnt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; systemd-machine-id-setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --root&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;nix&#x2F;persist&#x2F;system&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If impermanence weren&amp;#39;t setup, then we&amp;#39;d have moved this file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# under &#x2F;etc&#x2F;, like so:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# $ systemd-machine-id-setup --root=&amp;quot;$BASEDIR&amp;quot;&#x2F;etc&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;btrfs-on-luks&quot;&gt;BTRFS on LUKS&lt;&#x2F;h2&gt;
&lt;p&gt;Now to set up encryption at partition level. List &lt;code&gt;disko&lt;&#x2F;code&gt; as an input in your flake if not
already:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disko &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:nix-community&#x2F;disko&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;follows &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and configure an encrypted partition, for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disko&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;devices&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disk&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clawsiecats&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;device &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkDefault &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev&#x2F;vda&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disko&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;devices&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disk&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clawsiecats&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;partitions&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;esp &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;size &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;200M&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;EF00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;filesystem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;format &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vfat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mountpoint &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;boot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;partitions&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;luks &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;luks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cryptnix&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;allowDiscards &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We&amp;#39;ll be providing this key when invoking nixos-anywhere.
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;passwordFile &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;tmp&#x2F;disk.key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# NOTE: Use `pbkdf2` instead of `argon2id` for a lower
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#       memory footprint.
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# extraFormatArgs = [ &amp;quot;--pbkdf pbkdf2&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;btrfs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mountpoint &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;nix&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;mountOptions &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;noatime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;compress-force=zstd:3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        ];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;extraArgs &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Lcryptnix -f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;      };
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The way I currently deploy nixos-anywhere to handle LUKS using my configuration is - I first
generate a random SSH key pair and store the private key from this key pair on the target
NixOS machine, specifically here &lt;code&gt;&#x2F;boot&#x2F;ssh_host_ed25519_key&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d -m755 &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;boot&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh-keygen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; ed25519&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -a&lt;&#x2F;span&gt;&lt;span&gt; 100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -N &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;boot&#x2F;ssh_host_ed25519_key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This private SSH key will be used for hosting a dropbear SSH server on initrd.
I&#x27;ll connect to this server and provide the key to decrypt my LUKS block device. This will
allow the machine to boot into stage 2.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following configuration to your target machine to setup the dropbear SSH server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initrd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;availableKernelModules &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ahci&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;xhci_pci&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sr_mod&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;virtio_blk&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;virtio_pci&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;virtio_net&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initrd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kernelModules &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [ ]&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;boot&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initrd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;network &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ssh &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2222&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hostKeys &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;boot&#x2F;ssh_host_ed25519_key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;authorizedKeys &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;your_username&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openssh&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authorizedKeys&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;postCommands &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;    echo &amp;#39;cryptsetup-askpass&amp;#39; &amp;gt;&amp;gt; &#x2F;root&#x2F;.profile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I fetch my private SSH key for this machine which is also stored encrypted in my repository -
&lt;code&gt;.&#x2F;machines&#x2F;secrets.yaml&lt;&#x2F;code&gt;. This file would look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# .&#x2F;machines&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# My version of this file can be found here:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clawsiecats_ssh_host_ed25519_key:&lt;&#x2F;span&gt;&lt;span&gt; ENC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;AES256_GCM,data:abcde...=,tag:xyz...==,type:str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The file is encrypted through sops:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix run nixpkgs#sops -- edit .&#x2F;machines&#x2F;secrets.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ll extract the private SSH key for the target configuration that I am to be deploying,
and also store it a file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export BASEDIR=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix run nixpkgs#sops -- decrypt .&#x2F;machines&#x2F;secrets.yaml \
&lt;&#x2F;span&gt;&lt;span&gt;  --extract &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&amp;quot;clawsiecats_ssh_host_ed25519_key&amp;quot;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; \
&lt;&#x2F;span&gt;&lt;span&gt;  --output &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;nix&#x2F;persist&#x2F;system&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; chmod 600 &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;nix&#x2F;persist&#x2F;system&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll also store the public key corresponding to this private key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh-keygen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y -f &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;nix&#x2F;persist&#x2F;system&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key \
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;gt; &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;nix&#x2F;persist&#x2F;system&#x2F;etc&#x2F;ssh&#x2F;ssh_host_ed25519_key.pub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want NixOS on target machine to be able to access this decrypted private SSH key.
This step is important as this private key provides access to target machine configuration
specific secrets, listed in .&#x2F;machines&#x2F;clawsiecats&#x2F;secrets.yaml&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll need to push our LUKS key to the target machine so that the target machine can use it
to encrypt the disk. Looks like nixos-anywhere has an option for this
&lt;code&gt;--disk-encryption-keys&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;invoke-nixos-anywhere&quot;&gt;Invoke nixos-anywhere&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ll be installing NixOS on a Vultr instance with only 1 GB RAM. When booting our 1 GB
instance with Debian, I&#x27;ve noticed that nixos-anywhere fails half-way due to target
machine running out of available memory.&lt;&#x2F;p&gt;
&lt;p&gt;This issue also happens if I boot the machine with official NixOS installer image, which is a
bit surprising since in this case nixos-anywhere doesn&#x27;t even call &lt;code&gt;kexec&lt;&#x2F;code&gt;. My idea was that
since &lt;code&gt;kexec&lt;&#x2F;code&gt; tends to load NixOS in memory when the base OS is not NixOS (the case with
Debian), this leaves a bigger memory footprint. I was hoping it would be enough to start off
with the base OS as NixOS so that &lt;code&gt;kexec&lt;&#x2F;code&gt; doesn&#x27;t get called, but alas.&lt;&#x2F;p&gt;
&lt;p&gt;With neither of these methods working, I tried writing my own minimal NixOS configuration with
ZRAM setup as linked below, which seems to work!
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;generators&#x2F;minimal.nix&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;generators&#x2F;minimal.nix&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Replace &lt;code&gt;users.users.root.openssh.authorizedKeys.keys&lt;&#x2F;code&gt; in the above configuration with how
you&#x27;ll be identifying yourself.&lt;&#x2F;p&gt;
&lt;p&gt;I build an ISO out of this configuration. This can be done by adding nix-generators as an
input in your flake.nix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixos-generators &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;github:nix-community&#x2F;nixos-generators&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;follows &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and defining an output target, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# My version of this file can be found here:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;flake.nix#L265-L270
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;minimal-iso &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixos-generators&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nixosGenerate &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;generators&#x2F;minimal.nix &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;specialArgs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;format &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;iso&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and invoking:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix build .#minimal-iso
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;should generate an image in &lt;code&gt;.&#x2F;result&#x2F;iso&#x2F;nixos-25.05.20250117.08a54ef-x86_64-linux.iso&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s possible to upload and boot from a custom ISO image through the Vultr dashboard and that&#x27;s
what we&#x27;ll do here with this generated image. We&#x27;ll need to publicly host our image file
somehow since Vultr takes a URL to the custom image. Not covering this here.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll also need to remount the writable tmpfs nix store on our target machine to allocate more
space, otherwise nixos-anywhere tends to run out of space:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh root@12.121.212.121 &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mount -o remount,size=512M &#x2F;nix&#x2F;.rw-store&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all of this in place, invoking nixos-anywhere should now successfully do its thing!&lt;&#x2F;p&gt;
&lt;p&gt;This is how we&#x27;ll invoke it so that it pushes the disk encryption key as well as the files
that we&#x27;d like to persist on our target NixOS machine:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; export LUKS_PASSPHRASE=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_strong_password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nix run github:nix-community&#x2F;nixos-anywhere -- \
&lt;&#x2F;span&gt;&lt;span&gt;  --extra-files &amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASEDIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; \
&lt;&#x2F;span&gt;&lt;span&gt;  --flake .#clawsiecats root@12.121.212.121 \
&lt;&#x2F;span&gt;&lt;span&gt;  --disk-encryption-keys &#x2F;tmp&#x2F;disk.key &amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LUKS_PASSPHRASE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To avoid this work every time we are to be deploying the configuration on a new machine, I&#x27;ve
made a script that&#x27;ll automatically create SSH keys and other necessary files, remount the nix
store, push the files on to our target machine, and invoke nixos-anywhere with the right
parameters:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;clawsiecats&#x2F;anywhere.sh&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;2d99108&#x2F;machines&#x2F;clawsiecats&#x2F;anywhere.sh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once we&#x27;ve the target machine booted into minimal NixOS ISO, we can call this script locally
using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;machines&#x2F;clawsiecats&#x2F;anywhere.sh .#clawsiecats-luks root@12.121.212.121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --luks
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The installation should succeed and the machine should reboot automatically. We can now detach
our minimal ISO image using the Vultr dashboard and have the machine boot into the NixOS we
just installed. We&#x27;ll need to SSH into port 2222 and enter the decryption key to move further
into the boot process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh root@12.121.212.121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 2222
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should now be dropped onto all the tooling and fluffiness defined in our flake:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ssh your_username@12.121.212.121
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That should be all!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>WPA&#x2F;WPA2 networks can undermine surveillance tech</title>
        <published>2025-01-11T00:00:00+00:00</published>
        <updated>2025-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2025/01/11/wpa-wpa2-networks-can-undermine-surveillance-tech/"/>
        <id>https://ritiek.github.io/2025/01/11/wpa-wpa2-networks-can-undermine-surveillance-tech/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2025/01/11/wpa-wpa2-networks-can-undermine-surveillance-tech/">&lt;p&gt;There&#x27;s a home that&#x27;s built on a nice mountain. The members of this nuclear family all live a life that
requires them to spend a part of the day outside the house. Parents go out to attend work. The kids have school.
Knowing that there&#x27;ll be no one (or worse, only kids) in the house for a period of time everyday, the family
realized it&#x27;d be nice to secure the perimeter of the house by setting up surveillance cameras. The family members consume technology but they aren&#x27;t very technical themselves. They research a bit around before deciding on
the cameras they&#x27;ll use to set the surveillance up using.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Honey. These surveillance cameras also have a mobile app. It says so on the website.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;What if there happens to be an electricity cut? Cameras gonna go off.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Humm. Yeah.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Oh, found them. These ones have an internal battery that says it should last the camera for 2 hours.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;These cameras work on WiFi, but that&#x27;s fine as we&#x27;ve already got our ONT on a UPS backup.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Awesome! Karen from my office also uses similar cameras for their home.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Let&#x27;s get these!&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The family gets some nice cameras that they fit around the house. Their phones don&#x27;t have to be connected to
their home WiFi since these &quot;nice&quot; cameras have come with a mobile app that allows them to see the video feed
of their cameras even if they are outside of their home. This means, the family can monitor their cameras from
their office workplace.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been a few months now with the cameras installed. Their house is safe. The mobile app notifies the
parents when their kids have returned safely from school. They&#x27;re able to monitor their house during the
occasional power-outages. The video feeds stay on the (camera company&#x27;s proprietary) cloud. Which is cool
as the parents are now able to access the past video feeds, even when the cameras are turned off.&lt;&#x2F;p&gt;
&lt;p&gt;Everything&#x27;s looking good.&lt;&#x2F;p&gt;
&lt;p&gt;One day, dad gets a notification on his phone from the camera&#x27;s mobile app: &quot;Human presence detected!&quot;.
Dad thinks to himself without checking the camera feed:&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Oh cool. Wifey&#x27;s sandals must be here.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;He expects to receive a call from the delivery guy since the front door is locked.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;It&#x27;s been a while, what&#x27;s the guy doing..?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Casually opens the camera app on his phone.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;He sees two people with their faces masked up. They are leaving the house with a few sacks in their hands
to a car parked near the family&#x27;s house. That spikes up dad&#x27;s anxiety.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;...the heck?!&quot;&lt;&#x2F;p&gt;
&lt;p&gt;Dials up 911 (or the equivalent) to send a dispatch to their house.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Wait. This video feed was recorded 3 hours ago?!&quot;&lt;&#x2F;p&gt;
&lt;p&gt;That is interesting. Why did the notification showed up now and not while the burglary was unfolding? Did the
cameras mess up?
Was it the software? Did the internet go down? No, that can&#x27;t be so. The internet hardly ever goes down
this area, let alone such a coincidence with the robbery.&lt;&#x2F;p&gt;
&lt;p&gt;The master power control is present inside the house itself. It would&#x27;ve been very difficult to turn down
the power without first breaking into the house, which doesn&#x27;t make sense as he&#x27;d have gotten the
notification if the burglars tried doing so. Also, the UPS would&#x27;ve lasted them a couple hours, both the
cameras and their home internet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-could-ve-gone-wrong-here&quot;&gt;What could&#x27;ve gone wrong here?&lt;&#x2F;h2&gt;
&lt;p&gt;One plausible possibility seems like the camera software indeed messed up somewhere.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the camera software for some reason failed to send a motion event to the company&#x27;s proprietary cloud.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the company&#x27;s cloud software failed to notify dad and mom&#x27;s mobile app.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the camera failed to detect the humans wearing masks over their face as humans, since we had to
disable object detection due to high rate of false-positives in motion detection due the plants moving
with the wind.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the camera firmware auto-updated and broke itself yesterday.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the mobile app and notifications have been broken since the last update on the playstore&#x2F;appstore
which happened a few days ago.&lt;&#x2F;p&gt;
&lt;p&gt;You can self-host all the above parts of software to get more fine control over the devices you own, which run
the above mentioned software, to reduce the possibility of the above issues. I feel this can easily take a
month to get into and solve the problem to a good extent, given the person is supposed to show up at their
office on weekdays and the person is technical enough to even consider attempting to solve the problem in
the first place.&lt;&#x2F;p&gt;
&lt;p&gt;Dealing with all of the above is something pretty much out of the question for your average neighbour.&lt;&#x2F;p&gt;
&lt;p&gt;The local police can&#x27;t seem to get a grip on what happened. Of course, people change their clothes. and
any physically wearable and social masks.&lt;&#x2F;p&gt;
&lt;p&gt;However, the cameras and the company software were both godsend, so none of the above was an issue. It was
seen in the recorded video feed later on that the burglars looked to be carrying some sort of antenna-based
device?&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Wait. What is this antenna thingy that robbers look to have forgotten in our house??&quot;&lt;&#x2F;p&gt;
&lt;p&gt;Bombsquad made sure it&#x27;s not a bomb.&lt;&#x2F;p&gt;
&lt;p&gt;The family clicked pictures of the thing. The next day, they sent it over to this young distant relative of
theirs.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;We occasionally ask him to fix our printer. A very nice guy.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The relative takes a while to get back.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Hmm. Is it a Raspberry Pi? It looks a Raspberry Pi Zero. Hacked up to a battery backup?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;Oh, that antenna looks like an external WiFi adapter. I can read it saying ...ALFA??&quot;&lt;&#x2F;p&gt;
&lt;p&gt;My guess is the burglars connected an external WiFi adapter to a RPi Zero, constantly broadcasting deauth
packets to the nearby APs, &lt;em&gt;cough cough&lt;&#x2F;em&gt; aircrack-ng is it called? Oh right, the family also used a WPA&#x2F;WPA2
secure network. Isn&#x27;t that what everybody sees when they&#x27;re connecting to their favourite WiFi? Yeah, seems
it&#x27;s suspectible to an attack that forces the access point to drop any connected clients if it receives this
specially crafted network packet. This must&#x27;ve went on until the battery ran out and the RPi forced itself
off from the lack of input power.&lt;&#x2F;p&gt;
&lt;p&gt;This exploit may not have worked with if the access point used was WPA3. But that is not what we&#x27;re all doing,
right?&lt;&#x2F;p&gt;
&lt;p&gt;&quot;So you say our cameras wouldn&#x27;t connect to our WiFi because of this thing nearby?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;But we tried to turn on this antenna thing using our uh.. what they call.. MicroUSB wall adapter and
our WiFi has been working fine for the past hour.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The filesystem present in the MicroSD card in the RPi is LUKS encrypted. Yep right, it asks for a key
to unlock at initrd when it&#x27;s connected it to a monitor. Now to guess what it&#x27;d be.&lt;&#x2F;p&gt;
&lt;p&gt;&quot;password&quot;?&lt;&#x2F;p&gt;
&lt;p&gt;Yeah. Good luck.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Docker freezes machine by spiking up CPU I&#x2F;O to 100</title>
        <published>2024-08-10T00:00:00+00:00</published>
        <updated>2024-08-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2024/08/10/docker-freezes-machine-by-spiking-up-cpu-io-to-100/"/>
        <id>https://ritiek.github.io/2024/08/10/docker-freezes-machine-by-spiking-up-cpu-io-to-100/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2024/08/10/docker-freezes-machine-by-spiking-up-cpu-io-to-100/">&lt;h2 id=&quot;on-an-rpi5&quot;&gt;..on an RPi5&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve since moved from &lt;a href=&quot;&#x2F;2023&#x2F;12&#x2F;26&#x2F;homelabbing-on-a-raspberry-pi-4&#x2F;&quot;&gt;micro-homelabbing on an RPi4&lt;&#x2F;a&gt;
to an RPi5 now. I use the official power adapter as well as the active cooler, and have connected my NVMe drive through RPi5&#x27;s
PCIe slot (over Pimoroni&#x27;s NVMe Base).&lt;&#x2F;p&gt;
&lt;p&gt;During migration from RPi4 to RPi5, I decided to format a new MicroSD card to make sure the new RPi5 kernel&#x27;ll support
all the new hardware present in RPi5. Before the migration, I double-checked to make sure everything homelabby that needed
to be persisted resided on my NVMe disk, and that nothing important resided in &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&lt;&#x2F;code&gt;
(just had nukeable logs and some redis related cache there!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problematic-cpu-i-o&quot;&gt;Problematic CPU I&#x2F;O&lt;&#x2F;h2&gt;
&lt;p&gt;That done, now a couple months later I&#x27;ve noticed my CPU I&#x2F;O would spike up to 100 and stayed on it until my RPi5
came to a grinding halt. This spike would happen whenever I were to mount my LUKS + BTRFS NVMe drive and launch dockerd&#x27;s
systemd service. It has also been interesting to notice that this I&#x2F;O spike wasn&#x27;t caused overnight. I&#x27;ve noticed it
gradually building up every successive time I mounted my drive and launched dockerd. It was only until recently that I
upgraded my kernel from 6.6.y to 6.9.y using &lt;code&gt;rpi-update&lt;&#x2F;code&gt;, rebooted my RPi5, and on mounting my drive + launching dockerd
that it started to freeze up the entire system during dockerd attempting to start my docker-compose swarms. Also the
problem stayed even if I tried out other kernel versions, both newer and the older ones from the one I had originally.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;btop&lt;&#x2F;code&gt;, &lt;code&gt;iotop -ao&lt;&#x2F;code&gt;, and &lt;code&gt;iostat&lt;&#x2F;code&gt; have been very helpful in analyzing these spikes all these months and figuring out that
it was indeed the high CPU I&#x2F;O wait that has been building up all this while.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;now-what&quot;&gt;Now what?&lt;&#x2F;h2&gt;
&lt;p&gt;I upgraded my docker installation from the default bullseye apt repositories (Docker Engine v20) to use docker&#x27;s official
repositories (Docker Engine v27). And then nuking my &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&lt;&#x2F;code&gt; and starting over looks to have fixed it??&lt;&#x2F;p&gt;
&lt;p&gt;So not sure if this could&#x27;ve been a kernel, LUKS, BTRFS, or the buildup in &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&lt;&#x2F;code&gt;, or some permutation of
these that had been contributing to the issue. My CPU I&#x2F;O during dockerd launch while starting the same docker-compose
swarms is almost negligible now. All good.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll do an update here if I start to notice this CPU I&#x2F;O building up again.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Homelabbing on a Raspberry Pi 4</title>
        <published>2023-12-26T00:00:00+00:00</published>
        <updated>2023-12-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2023/12/26/homelabbing-on-a-raspberry-pi-4/"/>
        <id>https://ritiek.github.io/2023/12/26/homelabbing-on-a-raspberry-pi-4/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2023/12/26/homelabbing-on-a-raspberry-pi-4/">&lt;p&gt;I&#x27;ve had to constantly declutter my photos and documents stored on Google Drive as I&#x27;ve been running
low on the 15 GB free-tier storage since a while. Doing so has bought me a few weeks each time, but isn&#x27;t fun.&lt;&#x2F;p&gt;
&lt;p&gt;Despite of already having compression enabled for my stuff on Google Photos, I was still reaching a point
of always having to carefully think about considerations of what and what not to upload.
That said, 15 GB doesn&#x27;t seem much at all in the first place as of writing this; storage requirements have been
inflating and there are growing number of other services that like to store backups on Google Drive, leaving
less for everything else. Getting a premium-tier should help, but it doesn&#x27;t seem like a long term solution to
me (I&#x27;m sure I&#x27;ll exhaust 100 GB tier too after a while, if given the freedom) and all of this also seems to
contribute to vendor lock-in. I&#x27;d also like to avoid a 3rd party service perform face recognition or infer
other things from my photo collections.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-ve-been-looking-for&quot;&gt;What I&#x27;ve been looking for&lt;&#x2F;h2&gt;
&lt;p&gt;So I decided to look out for self-hostable FOSS alternatives to Google Photos and I liked
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;immich-app&#x2F;immich&quot;&gt;Immich&lt;&#x2F;a&gt;. As a side note, the process of migrating from Google Photos is
a bit of a pain because of how Google Takeout structures the export data (metadata is stored in a separate JSON file
whose structure Google seems to change frequently).&lt;&#x2F;p&gt;
&lt;p&gt;With self-hosting things there come a plethora of other things that need to be taken care of. I don&#x27;t
want my server to be accessible only locally and my ISP puts me behind a NAT which makes port forwarding
not work for me. Although, putting personal photos behind a public address doesn&#x27;t seem like a good idea
anyway. There are many ways to get my server accessible from the outside Internet securely.
I used to use remote.it which seems meh to me after I tried out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tailscale&#x2F;tailscale&quot;&gt;tailscale&lt;&#x2F;a&gt; and for me tailscale seems to do all the things I could ever ask for, but there are many alternatives
to tailscale around too weighing up and down worth an explore.&lt;&#x2F;p&gt;
&lt;p&gt;I now self-host a couple more services besides Immich, few of them I&#x27;ll mention later.
As of late, my setup seems to be stable enough for everyday use, has increased my quality of life, and now
feels legal to call it teeny-bit my own &quot;homelab&quot; given how far I think it has come. I&#x27;ve made rough pointers
on technical considerations&#x2F;ramifications I&#x27;ve had to deal with during the process, that I wanted to
archive here in more detail.&lt;&#x2F;p&gt;
&lt;!--It&#x27;ll be a good idea to the read the entire post first. Otherwise one might take away specific parts which
may not be as accurate, as my reasonings don&#x27;t necessarily read in chronological order.--&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h2&gt;
&lt;p&gt;I recently got a Raspberry Pi 4 (4GB model) and reading up seems like Immich worked fine on one. So I decided
to get into this with my RPi4.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;RPi4 is ARM 64-bit. Generally, I&#x27;ve read software support for ARM 64-bit isn&#x27;t quite yet up to the par with
x86 systems. I&#x27;ve low-key faced this problem myself when setting up a few services later on
(say &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tubearchivist&#x2F;tubearchivist&quot;&gt;TubeArchivist&lt;&#x2F;a&gt;), it takes a bit of researching but so
far I&#x27;ve always been lucky enough to be able to get away with things working fine in my case eventually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;os&quot;&gt;OS&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ll be running Raspberry Pi OS lite (64-bit) headlessly on my Pi and doing things later on via SSH.
I&#x27;ve also kept a USB to TTL adapter connected to the GPIO pins, it&#x27;s been immensely useful
in debugging whenever I wasn&#x27;t able to access my Pi through SSH and &lt;a href=&quot;&#x2F;2023&#x2F;12&#x2F;09&#x2F;debugging-wifi-on-a-headless-raspberry-pi&#x2F;&quot;&gt;and network issues&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;storage&quot;&gt;Storage&lt;&#x2F;h3&gt;
&lt;p&gt;Initially, my boot and root filesystems were present on a MicroSD card plugged into my RPi, and I&#x27;d be storing
my Immich photos on a USB 3.0 external SSD plugged into my RPi.&lt;&#x2F;p&gt;
&lt;p&gt;Since, RPi4 supports USB boot, I later on decided to move away completely from MicroSD cards to SSDs for
all storage as MicroSD cards seem a bit fragile to me both physically and circuitry wise, and also due to
the reason that now I&#x27;d have 2 different storage devices (failure points) working in conjunction to achieve
one goal of self-hosting my services.&lt;&#x2F;p&gt;
&lt;p&gt;I also decided to get a newer NVMe SSD with a USB 3.0 enclosure instead of using a USB 3.0 external SSD.
I had my reasons for this:&lt;&#x2F;p&gt;
&lt;p&gt;• USB 3.0 external SSD could get difficult to work with if their USB 3.0 connector gets damaged. This shouldn&#x27;t
be a problem with NVMe SSD with USB enclosure. In the case the USB connector of the enclosure were to get
damaged, I could get a new USB enclosure and get back to normal working immediately.&lt;&#x2F;p&gt;
&lt;p&gt;• It can be re-used as internal storage in machines with PCIe slot.&lt;&#x2F;p&gt;
&lt;p&gt;• NVMe is faster (though in my case, USB 3.0 speeds will probably bottleneck before anything else).&lt;&#x2F;p&gt;
&lt;p&gt;• My old SSD couldn&#x27;t store as much and the combination of getting a reputable NVMe SSD + USB enclosure
was cheaper to get than a USB 3.0 external SSD with the same amount of storage in my place.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;partioning&quot;&gt;Partioning&lt;&#x2F;h4&gt;
&lt;p&gt;With now everything on my SSD, I had to think of how to best partition filesystems on it. I also got to
research about lesser-known filesystems like ZFS, BTRFS during this time. I went ahead with this partitioning:&lt;&#x2F;p&gt;
&lt;p&gt;BootFS and RootFS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;dev&#x2F;sda1               vfat       255M  53.6M 201.4M  21% &#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;sda2               ext4      49.2G  13.1G    34G  27% &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then a logical partition with 2 LUKS encrypted partitions under it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;dev&#x2F;mapper&#x2F;docker-data ext4      97.9G  28.9G    64G  29% &#x2F;var&#x2F;lib&#x2F;docker
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;mapper&#x2F;media       btrfs    765.2G 211.7G 553.3G  28% &#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a 16GB reserved space (also under the previously created logical partition) after the BTRFS partition
since I&#x27;ve read around BTRFS dealing defragmentation can at times leave partition out of space, so this
little reserve might come in handy. I can use this reserve as LUKS encrypted swap space other times if
needed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;dev&#x2F;sda7       1919971328 1953523711   33552384    16G 82 Linux swap &#x2F; Solaris
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I went ahead with using ext4 with my RootFS as I&#x27;ve never tried other filesystems and BTRFS (unlike traditional
filesystems like ext4) has a bit of a learning curve in order to personalize it as per our requirements,
so didn&#x27;t want to put my eggs in the same basket all at once while I&#x27;m still relatively new to it.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the mount options that I&#x27;ve been using with BTRFS as of writing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; defaults,noatime,nodiscard,noautodefrag,ssd,space_cache=v2,compress-force=zstd:3 &#x2F;dev&#x2F;mapper&#x2F;media &#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s also a good idea to make our mount point read-only when nothing&#x27;s mounted to it. To do so, make sure nothing&#x27;s
mounted to our mount point and then set &lt;code&gt;+i&lt;&#x2F;code&gt; attribute on the mount point directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo umount &#x2F;media
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo chattr +i &#x2F;media
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the time of writing mainline kernel for RPi4 points to the &lt;code&gt;6.1.y&lt;&#x2F;code&gt; tree. I read around there were BTRFS
related improvements made in the newer kernels, so I was able to update my kernel with to the &lt;code&gt;6.6.y&lt;&#x2F;code&gt; tree with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo rpi-update rpi-6.6.y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and things have been stable so far with a month or two since the update.&lt;&#x2F;p&gt;
&lt;p&gt;You can see which branch is the newer kernel version &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;linux&quot;&gt;here&lt;&#x2F;a&gt; and pass it
to &lt;code&gt;rpi-update&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I used ext4 with &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;&lt;&#x2F;code&gt; as it looks to be a place with high rate of read and writes, something
BTRFS to me still seems dicey with after researching around.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;low-ram-issues&quot;&gt;Low-RAM Issues&lt;&#x2F;h3&gt;
&lt;p&gt;Immich alone mentions these requirements as of writing this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OS: Preferred unix-based operating system (Ubuntu, Debian, MacOS, etc). Windows works too, with Docker Desktop on Windows&lt;&#x2F;p&gt;
&lt;p&gt;RAM: At least 4GB, preferred 6GB.&lt;&#x2F;p&gt;
&lt;p&gt;CPU: At least 2 cores, preferred 4 cores.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After hosting quite a a few services besides Immich; the 4GB RAM on RPi4 did turn out to be a bottleneck after
a while. Pi would start to freeze up and in the scenario it did let me SSH into it (I didn&#x27;t had the USB to
TTL thing set up yet) and do &lt;code&gt;btop&lt;&#x2F;code&gt;, it indeed seemed to be struggling with RAM while &lt;code&gt;kswapd&lt;&#x2F;code&gt; was seen
to be hogging up all the CPU. And then sometimes the OOM killer kicked in and everything was a mess.&lt;&#x2F;p&gt;
&lt;p&gt;I set aside 16 GB swap space on my SSD and freezes went away, but soon I learned about zram (a Linux kernel
module for compressing data before storing it on RAM) and I decided to set it up to reduce SSD wear as well
as coming across convincing-enough claims about it having better read&#x2F;write speeds when compared to swapping
on SSD (despite the de&#x2F;compression CPU overhead).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zram&quot;&gt;ZRAM&lt;&#x2F;h4&gt;
&lt;p&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foundObjects&#x2F;zram-swap&quot;&gt;zram-swap&lt;&#x2F;a&gt; to set up zram.
Initially, I went ahead with lz4 compression as it seemed a good speed vs compression ratio trade-off on
paper. I set up 2GB (out of the 4GB) of RAM to be utilized as zram with this sysctl config:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;vm.swappiness = 180
&lt;&#x2F;span&gt;&lt;span&gt;vm.watermark_boost_factor = 0
&lt;&#x2F;span&gt;&lt;span&gt;vm.watermark_scale_factor = 125
&lt;&#x2F;span&gt;&lt;span&gt;vm.page-cluster = 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In practise however, lz4 for me seems
to cause lots of CPU cycles on &lt;code&gt;kswapd&lt;&#x2F;code&gt;, keeping CPU usage to around 100% all the time. Researching around,
I came across this &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Fedora&#x2F;comments&#x2F;mzun99&#x2F;comment&#x2F;h1cnvv3&#x2F;&quot;&gt;reddit comment&lt;&#x2F;a&gt;
mentioning lz4 being suspectible to OOM.&lt;&#x2F;p&gt;
&lt;p&gt;Later on, I moved to zstd and used 1&#x2F;3 out of the 4GB RAM (so 1.33 GB RAM as zram) with this sysctl config:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;vm.vfs_cache_pressure = 500
&lt;&#x2F;span&gt;&lt;span&gt;vm.swappiness = 100
&lt;&#x2F;span&gt;&lt;span&gt;vm.dirty_background_ratio = 1
&lt;&#x2F;span&gt;&lt;span&gt;vm.dirty_ratio = 50
&lt;&#x2F;span&gt;&lt;span&gt;vm.page-cluster = 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;zstd has better compression ratio with lower speeds
than lz4 on paper. I&#x27;ve noticed when self-hosting CPU mostly stays on idle workload most of the time and
gets bursts of heavy lifting time to time, so zstd shouldn&#x27;t be so bad (it&#x27;s still much much faster than swap
on disk). Interestingly, CPU hogging problem that I faced with lz4 went away with zstd.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overheating&quot;&gt;Overheating&lt;&#x2F;h3&gt;
&lt;p&gt;Without any way to control heat, my Pi would quickly reach temperatures around 85°C on load which seems
to kick-in thermal throttling. The official RPi4 case made it worse.&lt;&#x2F;p&gt;
&lt;p&gt;I then got an aluminium passive cooling case. The temperatures still get around 80° but now take
couple minutes on constant load to get there, and I haven&#x27;t come across any noticeable throttling so far.
So I&#x27;ve been keeping this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software&quot;&gt;Software&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;&#x2F;h3&gt;
&lt;p&gt;With self-hosting things, it can quickly get overwhelming to keep track of any vulnerabilities, updates,
breaking dependencies, so much more. Docker with portainer keep it good enough to help me deal with this.
This works well as I&#x27;ve noticed almost every self-hostable solution adds in support for Docker and provide
example stack configurations that can be plugged into portainer (or directly into docker). Spend some time
learning to manage volumes in docker to get an idea about how persistent storage works. Losing important
data when a running container goes down is no good.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;security-note&quot;&gt;Security Note&lt;&#x2F;h4&gt;
&lt;p&gt;Give special emphasis to running containers only with non-root users, and only
make very specific host OS&#x27;s volumes accessible from within the container whenever required. Say, if we
want to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syncthing&#x2F;syncthing&quot;&gt;syncthing&lt;&#x2F;a&gt; to sync your music from the directory
&lt;code&gt;&#x2F;media&#x2F;files&#x2F;music&#x2F;&lt;&#x2F;code&gt; between other syncthing hosts, then only provide this very specific path
&lt;code&gt;&#x2F;media&#x2F;files&#x2F;music&#x2F;&lt;&#x2F;code&gt; to syncthing&#x27;s docker container. Do not provide access to blanket volumes such as
&lt;code&gt;&#x2F;media&#x2F;&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;media&#x2F;files&#x2F;&lt;&#x2F;code&gt; when creating the container (either with &lt;code&gt;docker run&lt;&#x2F;code&gt; or with docker compose).&lt;&#x2F;p&gt;
&lt;p&gt;If a bad actor exploits a vulnerability in a service running inside our container, the best (worst) they
could do is gain a reverse shell into our container. At the moment, it seems very difficult to break outside
of a docker container (through the container&#x27;s shell or anything) to gain access to the host OS. So it&#x27;s
important to minimize the level of access the user has from within the container.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I also like having this section for my docker compose configurations whenever necessary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;conf&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-conf &quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;extra_hosts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;host.docker.internal:host-gateway&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It lets this docker compose service access services bound on my host OS&#x27;s network interfaces, from within
the container.&lt;&#x2F;p&gt;
&lt;p&gt;I think it&#x27;s a good idea to make portainer&#x27;s data persistent on filesystem. It helps preserve
docker compose files for all the services which&#x27;ve been set up using portainer. So make sure to set
the volume correctly when installing portainer.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wifi-issues&quot;&gt;WiFi Issues&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve had problems with having my Pi long-term stay connected to my WiFi access point. There&#x27;s a separate
&lt;a href=&quot;&#x2F;2023&#x2F;12&#x2F;09&#x2F;debugging-wifi-on-a-headless-raspberry-pi&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; I wrote on it
recently.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;decrypting-luks&quot;&gt;Decrypting LUKS&lt;&#x2F;h3&gt;
&lt;p&gt;This is a preference on how someone&#x27;d like to decrypt their encrypted partitions when mounting.
I&#x27;ve done a little shell script that I need to manually call that asks me for my LUKS passphrase&#x2F;passfile
and mounts the decrypted partitions with my favourite mount options:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; cryptsetup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --perf-no_read_workqueue --perf-no_write_workqueue --persistent&lt;&#x2F;span&gt;&lt;span&gt; open &#x2F;dev&#x2F;disk&#x2F;by-uuid&#x2F;4v4d4k3d-4vr4-k3d4-v444-f00b4r424242 media
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; defaults,noatime,nodiscard,noautodefrag,ssd,space_cache=v2,compress-force=zstd:3 &#x2F;dev&#x2F;mapper&#x2F;media &#x2F;media
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Setup any private stuff now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;media&#x2F;start.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;backups&quot;&gt;Backups&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borgbackup&#x2F;borg&quot;&gt;Borg&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kopia&#x2F;kopia&quot;&gt;Kopia&lt;&#x2F;a&gt; both work decent
for me with both onsite and offsite backups. I&#x27;ve set them up through portainer as well, both on my Pi and
the secondary machines that keep the backups. I&#x27;ve found that Kopia needs https set up at least on the
offsite repository server to work correctly. &lt;code&gt;tailscale cert&lt;&#x2F;code&gt; worked nice when setting up https for services
running inside my private tailscale network.&lt;&#x2F;p&gt;
&lt;p&gt;I was also interested in &quot;backing up&quot; docker compose files for the services running on my offsite backup
machine. I was able to get this done by setting up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syncthing&#x2F;syncthing&quot;&gt;syncthing&lt;&#x2F;a&gt;
for my backup machine&#x27;s persistent portainer data volume directory, between my main machine and my offsite
backup machine. This keeps my offiste backup machine&#x27;s docker compose files synced up with my main machine.&lt;&#x2F;p&gt;
&lt;p&gt;I like to keep my personal stuff and docker specific persistent data separately. Since, for my usecases,
docker specific data is a place of more frequent write rates when compared to my personal stuff which I
don&#x27;t mess with as frequently.&lt;&#x2F;p&gt;
&lt;p&gt;This is how my directory tree looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;media
&lt;&#x2F;span&gt;&lt;span&gt;├── files
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── my-stuff
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── my-more-stuff
&lt;&#x2F;span&gt;&lt;span&gt;│   └── offsite-docker-compose-yamls
&lt;&#x2F;span&gt;&lt;span&gt;└── services
&lt;&#x2F;span&gt;&lt;span&gt;    ├── immich
&lt;&#x2F;span&gt;&lt;span&gt;    ├── pihole
&lt;&#x2F;span&gt;&lt;span&gt;    ├── portainer
&lt;&#x2F;span&gt;&lt;span&gt;    ├── syncthing
&lt;&#x2F;span&gt;&lt;span&gt;    ├── tubearchivist
&lt;&#x2F;span&gt;&lt;span&gt;    └── uptime-kuma
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes setting up different backup policies for different directories a bit easier, such as I like to
take automated backup snapshots of my docker data directory more often than the my personal stuff directory.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;IMG_20230904_144125_preview.jpeg&quot; width=&quot;700&quot;&gt;
  &lt;i&gt;See? it&#x27;s chilling now&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;h4 id=&quot;random-freezes&quot;&gt;Random Freezes&lt;&#x2F;h4&gt;
&lt;p&gt;There are very good chances that my machine could freeze up tinkering around if I happen to run anything
memory intensive or a running process ends up doing something funny. I&#x27;ve watchdog setup to reboot my machine
automatically after 10 minutes in case it detects an anomly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging WiFi on a headless Raspberry Pi</title>
        <published>2023-12-09T00:00:00+00:00</published>
        <updated>2023-12-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2023/12/09/debugging-wifi-on-a-headless-raspberry-pi/"/>
        <id>https://ritiek.github.io/2023/12/09/debugging-wifi-on-a-headless-raspberry-pi/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2023/12/09/debugging-wifi-on-a-headless-raspberry-pi/">&lt;h3 id=&quot;unsupported-wifi-channels&quot;&gt;Unsupported WiFi channels&lt;&#x2F;h3&gt;
&lt;p&gt;My place gets minor power outages time to time and without having a power backup to rely on, my home router
and machines tend to go off. One peculiar thing I noticed is that about half the times when power did come
back, my Raspberry Pi 4 would fail to connect back to my WiFi router, even when my other machines connected to
WiFi just fine. Also my Pi runs headless with no immediate access to a monitor or an ethernet cable combined
with laziness didn&#x27;t help debugging in what could&#x27;ve been going wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Initial few times I shrugged it off about WiFi being WiFi, as rebooting my router&#x2F;Pi would usually bring my Pi
back online. It was annoying nonetheless, say I was outside and wanted to monitor some sensors in my house, a
lil power trip would end up causing problem with this. I tried disabling WiFi power saving settings on my
Pi. There&#x27;s resources on this issue, such as
&lt;a href=&quot;https:&#x2F;&#x2F;photobyte.org&#x2F;raspberry-pi-unreliable-wifi-power-saving&#x2F;&quot;&gt;this&lt;&#x2F;a&gt;.
The problem still remained but I can&#x27;t say for sure if it may or may have not have helped with a different
but a related problem.&lt;&#x2F;p&gt;
&lt;p&gt;Giving some thought, I realized I have a USB to TTL
adapter and few jumper cables around which&#x27;ll allow me to access Pi&#x27;s serial console through my lappy, all
without having my Pi on network. This seemed like a good enough first step to figure out what could&#x27;ve been
going wrong with my Pi not connecting back to my home WiFi after a power outage.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;l2HYjdi.png&quot; width=&quot;200&quot;&gt;
  &lt;i&gt;USB to TTL adapter&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s lots of resources out there on how to set up UART to access the serial console on Pi using USB to TTL.&lt;&#x2F;p&gt;
&lt;!-- -------------------- --&gt;
&lt;h4 id=&quot;the-culprit&quot;&gt;The Culprit&lt;&#x2F;h4&gt;
&lt;p&gt;Once I got the above all set up. The next time Pi refused to connect to my home WiFi, I logged into my Pi using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; screen &#x2F;dev&#x2F;ttyUSB0 115200
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and tried doing the usual network checkups.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ping google.com&lt;&#x2F;code&gt; fails.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ifconfig&lt;&#x2F;code&gt; says no IP assigned to &lt;code&gt;wlan0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Seems Pi isn&#x27;t connected to WiFi after all.&lt;&#x2F;p&gt;
&lt;p&gt;I tried scanning for WiFi networks around me using:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo nmcli device wifi list --rescan yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think &lt;code&gt;nmcli&lt;&#x2F;code&gt; &lt;code&gt;nmtui&lt;&#x2F;code&gt; commands do not work unless you&#x27;re using &lt;code&gt;NetworkManager&lt;&#x2F;code&gt;. So make sure to switch
to &lt;code&gt;NetworkManager&lt;&#x2F;code&gt; from &lt;code&gt;dhcpcd&lt;&#x2F;code&gt; (which is the default as of writing) using &lt;code&gt;sudo raspi-config&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And my home WiFi doesn&#x27;t show up.&lt;&#x2F;p&gt;
&lt;p&gt;Turned on my phone&#x27;s WiFi access point mode, rescanned WiFi networks, okay this showed up in nmcli, but for
some reason home WiFi still didn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, it almost felt as if my Pi got so tired of always having to connect to my home WiFi that it
evolved in ways to intentionally ignore my home WiFi.&lt;&#x2F;p&gt;
&lt;p&gt;Rebooted my Pi, still seemed mad at WiFi. Again. Still mad.&lt;&#x2F;p&gt;
&lt;p&gt;No nothing. So eventually also brought in my WiFi router into this reboot chaos.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually eventually after a couple power cycles each, yess it connected happy!&lt;&#x2F;p&gt;
&lt;p&gt;I got suspicious of what radio channel was my home&#x27;s WiFi access point listening for clients to connect on,
since this seemed a thing that fit into the signs and also that on what WiFi channel a router listens on
usually defaults to automatic. This could mean the channel my router preferred to listen on could change post
every power cycle.&lt;&#x2F;p&gt;
&lt;p&gt;Researching up a bit, it seems I can check out what WiFi channels my Pi 4 supports using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo iwlist wlan0 freq
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wlan0&lt;&#x2F;span&gt;&lt;span&gt;     32 channels in total; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;available&lt;&#x2F;span&gt;&lt;span&gt; frequencies :
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 01 : 2.412 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 02 : 2.417 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 03 : 2.422 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 04 : 2.427 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 05 : 2.432 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 06 : 2.437 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 07 : 2.442 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 08 : 2.447 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 09 : 2.452 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 10 : 2.457 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 11 : 2.462 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 36 : 5.18 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 40 : 5.2 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 44 : 5.22 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 48 : 5.24 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 52 : 5.26 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 56 : 5.28 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 60 : 5.3 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 64 : 5.32 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 100 : 5.5 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 104 : 5.52 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 108 : 5.54 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 112 : 5.56 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 116 : 5.58 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 120 : 5.6 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 124 : 5.62 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 128 : 5.64 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 132 : 5.66 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 136 : 5.68 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 140 : 5.7 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 144 : 5.72 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Channel&lt;&#x2F;span&gt;&lt;span&gt; 149 : 5.745 GHz
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Current&lt;&#x2F;span&gt;&lt;span&gt; Frequency:5.24 GHz (Channel 48)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and comparing these what my router provides:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;tqz4TMn.png&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;2.4GHz channels&lt;&#x2F;i&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;Gsg2Wty.png&quot; width=&quot;500&quot;&gt;
  &lt;i&gt;5GHz channels&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;It looks there are some channels my router can listen on to but which aren&#x27;t supported by Pi.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to replicate the problem of Pi not &quot;seeing&quot; my home WiFi after I set my router to listen on a
channel unsupported by my Pi.&lt;&#x2F;p&gt;
&lt;p&gt;I also read around that setting your WLAN country in &lt;code&gt;sudo raspi-config&lt;&#x2F;code&gt; should make it so that my Pi
listens only on WiFi channels legalized in my country. This was already set to my country code. I tried
skimming in my router settings to find something similar but no avail here. But it&#x27;s ok, my router allows
me to bind it to listen on a specific WiFi channel, and anything that the Pi is capable of listening on
should be fine for my case. So I did it. And having me closely keep a track of this for about a week or a two,
didn&#x27;t notice the problem of my Pi not connecting my WiFi after a power outage cycle happen again.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conflicting-docker-interfaces&quot;&gt;Conflicting Docker Interfaces&lt;&#x2F;h3&gt;
&lt;p&gt;After I set up some Docker stacks, I noticed a similar problem of my Pi losing WiFi connection would happen
randomly at times. Looking up, it seems Docker is notorious for this problem where it messes with the default
network routes (that provide actual Internet). It seemed the problem went away once I replaced my
&lt;code&gt;NetworkManager.conf&lt;&#x2F;code&gt; to ignore virtual network interfaces created by Docker and Tailscale, using the following
contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;plugins=ifupdown,keyfile
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ifupdown&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;managed=true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;keyfile&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unmanaged-devices=interface-name:docker0;interface-name:veth*;interface-name:br*;interface-name:tailscale0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure you&#x27;re using &lt;code&gt;NetworkManager&lt;&#x2F;code&gt; to manager network interfaces (and not &lt;code&gt;dhcpcd&lt;&#x2F;code&gt; or anything else)
for this to work.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;WiFi is still WiFi, so until next time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sharing Yubikey over the network</title>
        <published>2023-11-14T00:00:00+00:00</published>
        <updated>2023-11-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2023/11/14/sharing-yubikey-over-the-network/"/>
        <id>https://ritiek.github.io/2023/11/14/sharing-yubikey-over-the-network/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2023/11/14/sharing-yubikey-over-the-network/">&lt;p&gt;At any point in this post, whenever I mention the term
&lt;a href=&quot;https:&#x2F;&#x2F;www.yubico.com&#x2F;products&#x2F;how-the-yubikey-works&#x2F;&quot;&gt;Yubikey&lt;&#x2F;a&gt;, what I really mean is any hardware-based
authentication device that supports &lt;a href=&quot;https:&#x2F;&#x2F;fidoalliance.org&#x2F;fido2&#x2F;&quot;&gt;FIDO2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think writings here&#x27;ll mostly interest people who consider Yubikey in their threat model.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;why-isn-t-the-major-point-about-owning-a-yubikey-is-to-make-online-passwords-a-physical-problem&quot;&gt;Why? Isn&#x27;t the major point about owning a Yubikey is to make online passwords a physical problem?&lt;&#x2F;h2&gt;
&lt;p&gt;There seems to be a consensus (for good reasons) to have at least one offsite backup whenever possible for
most things holding digital value, be it storage backups (3-2-1 backup strategy at the least) or Yubikeys.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a problem with this, how to keep the offsite backups up to date with our primary media?
For storage media, having an offsite server running a backup service like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borgbackup&#x2F;borg&quot;&gt;borg&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kopia&#x2F;kopia&quot;&gt;kopia&lt;&#x2F;a&gt; over the network seems
a decent choice.&lt;&#x2F;p&gt;
&lt;p&gt;But what about keeping the Yubikey up to date in an offsite location?&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve read some people use Yubikeys as a passkey or as a 2FA method to their password manager. So if we&#x27;ve
got the offsite Yubikey setup as authentication method to unlock our password manager&#x27;s vault beforehand,
then we should be able to store any other sensitive stuff later on inside of our password manager, as the
offsite Yubikey would only need to unlock our password manager&#x27;s vault to give us back access to everything.
If our password manager supports it, we can also store passkeys digitally for other services inside our
password manager, and have our Yubikey act as the master passkey to unlock our vault.&lt;&#x2F;p&gt;
&lt;p&gt;This is nice and in this case, people for the most part don&#x27;t have to go through the hoops in order to keep
their offsite Yubikey synced up, because they don&#x27;t need to.&lt;&#x2F;p&gt;
&lt;p&gt;Having an offsite Yubikey makes sense to me. But how prepared would we be to retrieve the offsite Yubikey
when a calamity (a Tsunami?) ensues and:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Destroys our primary site and we lose access to not only our primary Yubikeys but also our home,
mobile phones, paper money, and even access to the city&#x27;s vehicular transport system; each of which seems
to significantly multiply the difficulty in order for us to physically retrieve the offsite Yubikey.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In an extreme scenario, we happen to be unfortunate enough to hit our fleshy human heads on concrete
(memory loss) during the disaster unfolding, or fail to make it out at all.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For the 2nd point, life support should preceed everything else. I think it&#x27;s nice to have an offsite
&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Bitwarden&#x2F;comments&#x2F;q0m19n&#x2F;on_dying_and_your_password_vault&#x2F;&quot;&gt;executor&lt;&#x2F;a&gt;,
a trusty someone who could take their time to help us with our digital stuff as we start to gain back sense
of self-awareness, or otherwise give the digital us a closure if we&#x27;re no longer around.&lt;&#x2F;p&gt;
&lt;p&gt;In scenarios similar to 1st point, where we lose our possessions but happen to be physically okay enough,
and want to gain back access to our digital vaults; physically retrieving the offsite Yubikey may not always
sound like a plan.&lt;&#x2F;p&gt;
&lt;p&gt;What I think might work in such scenarios would be to have a trusty person under the same roof where the
offsite Yubikey lives. We can share this offsite Yubikey over to us through the Internet in our SOS situation,
and have our trustypie person finger tap authenticate the Yubikey for us. This way, the offsite Yubikey should
still partially get to keep its job to make online passwords a physical problem, while also being useful to us
remotely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;doin-it&quot;&gt;Doin&#x27; it!&lt;&#x2F;h2&gt;
&lt;p&gt;I tried plugging in a Yubikey into my Raspberry Pi located in an (imaginary) offsite location and setting up USB
sharing to my primary machine using &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;USB&#x2F;IP&quot;&gt;USB&#x2F;IP&lt;&#x2F;a&gt;; seems a good enough way
to me. The linked arch wiki page should be a good starting point.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what I had to do on my Raspberry Pi (server):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y&lt;&#x2F;span&gt;&lt;span&gt; usbip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo modprobe usbip_host
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo usbip list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; busid 1-1.3 (1050:0402)
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Yubico.com&lt;&#x2F;span&gt;&lt;span&gt; : Yubikey 4&#x2F;5 U2F (1050:0402)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ^Note Yubikey&amp;#39;s busid: 1-1.3.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Pass Yubikey&amp;#39;s busid below in `ExecStartPost` and `ExecStop`.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Description=USB-IP Binding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;After=network-online.target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Wants=network-online.target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Type=simple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExecStart=&#x2F;usr&#x2F;sbin&#x2F;usbipd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExecStartPost=&#x2F;usr&#x2F;sbin&#x2F;usbip bind -b 1-1.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ExecStop=&#x2F;usr&#x2F;sbin&#x2F;usbip unbind -b 1-1.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[Install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WantedBy=multi-user.target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;usbip-yubikey.service
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo systemctl start usbip-yubikey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Optional: Auto start usbip server on boot.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo usbip_host | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;modules-load.d&#x2F;usbip.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo systemctl enable usbip-yubikey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And on my primary arch machine (client):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; usbip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo modprobe vhci-hcd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo usbip attach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;pi-ip-address&amp;gt; -b 1-1.3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Optional: Auto load vhci-hcd kernel module on boot (won&amp;#39;t have to `modprobe vhci-hcd` on every boot).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; echo vhci-hcd | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; tee &#x2F;etc&#x2F;modules-load.d&#x2F;usbip.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once setup, my primary machine works as if the remote Yubikey is physically connected to it.
You can try it out by doing something that&#x27;ll invoke the Yubikey for authentication. As of writing, it looks
like USB&#x2F;IP sends unencrypted data over TCP which could be a security concern. So you&#x27;d probably want to
setup a VPN and make USB&#x2F;IP connections over it securely (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tailscale&#x2F;tailscale&quot;&gt;tailscale&lt;&#x2F;a&gt;
is fun).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;There could be more implications behind the entire idea, as well as setting up something like this.
It&#x27;ll be wise to research more before pushing something like this into production.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;blub-netevent&quot;&gt;Blub&#x2F;netevent&lt;&#x2F;h2&gt;
&lt;p&gt;I wrote about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Blub&#x2F;netevent&quot;&gt;Blub&#x2F;netevent&lt;&#x2F;a&gt; in
&lt;a href=&quot;&#x2F;2019&#x2F;02&#x2F;18&#x2F;sharing-linux-event-devices-with-other-linux-machines&#x2F;&quot;&gt;one of my earlier posts&lt;&#x2F;a&gt;
which works well with sharing &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; devices, something which doesn&#x27;t seem possible with
USB&#x2F;IP (I probably won&#x27;t be able to share input from my mobile phone&#x27;s power button to my laptop with USB&#x2F;IP,
but I got it working back then using netevent as mentioned in the linked post).&lt;&#x2F;p&gt;
&lt;p&gt;On the contrary, sharing USB devices (Yubikey [shows up in &lt;code&gt;&#x2F;dev&#x2F;hidraw*&lt;&#x2F;code&gt;], USB storage devices, etc.)
isn&#x27;t possible with netevent.&lt;&#x2F;p&gt;
&lt;p&gt;That said, both netevent and USB&#x2F;IP still seem to have a bit of overlapping functionality (I should be able
share my USB Mouse and USB keyboard using either of USB&#x2F;IP or netevent, as this&#x27;ll be detected as a USB device
[works with USB&#x2F;IP], as well as show up in &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; [works with netevent]).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Capturing and piping audio output from a process in Linux</title>
        <published>2023-06-12T00:00:00+00:00</published>
        <updated>2023-06-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2023/06/12/capturing-and-piping-audio-output-from-a-process-in-linux/"/>
        <id>https://ritiek.github.io/2023/06/12/capturing-and-piping-audio-output-from-a-process-in-linux/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2023/06/12/capturing-and-piping-audio-output-from-a-process-in-linux/">&lt;p&gt;I&#x27;ve been looking to intercept audio data from specific processes so I can tinker with this audio
data in real time. Vaguely &lt;code&gt;capture&lt;&#x2F;code&gt; audio output from a process, tinker with it, and &lt;code&gt;play&lt;&#x2F;code&gt;
this tinkered audio through my hardware, something similar to this pseudocode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Resample music from my Spotify desktop app to a higher sample rate (nightcore) in near real-time.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; capture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --sample-rate&lt;&#x2F;span&gt;&lt;span&gt; 48000 spotify | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;play --buffer-time-in-secs&lt;&#x2F;span&gt;&lt;span&gt; 5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --sample-rate&lt;&#x2F;span&gt;&lt;span&gt; 52000 -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think I got something pretty close to this figured here.&lt;&#x2F;p&gt;
&lt;p&gt;A little while ago, I moved to &lt;a href=&quot;https:&#x2F;&#x2F;pipewire.org&#x2F;&quot;&gt;PipeWire&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;www.freedesktop.org&#x2F;wiki&#x2F;Software&#x2F;PulseAudio&#x2F;&quot;&gt;PulseAudio&lt;&#x2F;a&gt;.
The stuff below will only work if you&#x27;re using PipeWire yourself. It might also be possible to
adjust this to work with PulseAudio but it isn&#x27;t something I&#x27;m looking to explore at the moment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The plan is to create a new virtual audio output device. We&#x27;ll be redirecting the audio
output from our target process to this virtual audio output device, so that we&#x27;re able to isolate
this process&#x27;s audio output from all other processes. We&#x27;ll then capture all audio data being
sent to this virtual output device. Once captured, we can tinker with the audio data and then
redirect this tinkered audio output to our actual audio output device(s).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll begin by inserting a kernel module to create a virtual audio loopback device:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo modprobe snd-aloop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should now see two new virtual audio devices: &lt;code&gt;Analog Output&lt;&#x2F;code&gt; and &lt;code&gt;Analog Input&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;ByNqPIR.png&quot;&gt;
  &lt;i&gt;Audio Devices&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Launch some application, say Spotify desktop, put some music on, and have Spotify send the audio data
to this new virtual audio output &lt;code&gt;Analog Output&lt;&#x2F;code&gt;.
In Manjaro, I got it working as in the screenshot below, but it should be similar
on other distros (try looking for it under Settings -&amp;gt; Audio), or install and use &lt;code&gt;pavucontrol&lt;&#x2F;code&gt; gui.&lt;&#x2F;p&gt;
&lt;p&gt;Haven&#x27;t looked around for a CLI alternative for this purpose yet.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;jbgu6C2.png&quot;&gt;
  &lt;i&gt;Switching playback device to virtual output device&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Once you switch the audio output device for Spotify to the dummy output device, you&#x27;ll no longer
hear your music from your actual speakers.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s see the node names given by PipeWire to our currently existing audio devices.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-cli list-objects | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; node.name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dummy-Driver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Freewheel-Driver&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Midi-Bridge&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v4l2_input.pci-0000_00_14.0-usb-0_5_1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v4l2_input.pci-0000_00_14.0-usb-0_5_1.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__source&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_6__source&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;plasmashell&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_playback.aplay&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_input.platform-snd_aloop.0.analog-stereo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alsa_output.platform-snd_aloop.0.analog-stereo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node.name&lt;&#x2F;span&gt;&lt;span&gt; = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;spotify&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(&lt;code&gt;pw-*&lt;&#x2F;code&gt; commands are only available with PipeWire)&lt;&#x2F;p&gt;
&lt;p&gt;After some speculation, I figured out my dummy audio output device is called &lt;code&gt;alsa_output.platform-snd_aloop.0.analog-stereo&lt;&#x2F;code&gt;
and my actual audio output device is called &lt;code&gt;alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Confirm yours by running any of the following commands (added all that I figured out in the moment
here for documenting purpose) to redirect audio from your dummy audio output device to your actual
audio output device. Make sure to replace the &lt;code&gt;--target&lt;&#x2F;code&gt; param with the node names that seemingly
fit for your case.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-record&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.platform-snd_aloop.0.analog-stereo - | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pw-play --target&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(You may have to also pass in &lt;code&gt;-P stream.capture.sink=true&lt;&#x2F;code&gt; to &lt;code&gt;pw-record&lt;&#x2F;code&gt;, thanks @pkgmvd as reported on 23rd November, 2024!)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-loopback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -C&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.platform-snd_aloop.0.analog-stereo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -P&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-link alsa_output.platform-snd_aloop.0.analog-stereo alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --disconnect&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.platform-snd_aloop.0.analog-stereo alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should be able to hear your Spotify music if both the dummy audio output device and the
actual audio output device you selected are the right ones.&lt;&#x2F;p&gt;
&lt;p&gt;Wohoo! We can now mess with this audio. As an example, we&#x27;ll attempt to increase sample rate for
whatever&#x27;s playing in Spotify to make it sound nightcorish:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; pw-record&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; alsa_output.platform-snd_aloop.0.analog-stereo - | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;aplay -B&lt;&#x2F;span&gt;&lt;span&gt; 5000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; 52000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; S16_LE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; 2 -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the time of writing, &lt;code&gt;pw-record&lt;&#x2F;code&gt; captures audio at a sample rate of 44.8KHz. In the above example
we resampled it to 52KHz (&lt;code&gt;-r 52000&lt;&#x2F;code&gt;). Since we&#x27;ll be playing audio at a higher sample rate than what we&#x27;ll be
receiving from &lt;code&gt;pw-record&lt;&#x2F;code&gt;, our dummy audio output will have to play catch up with our actual audio
output. This means our actual audio output will stutter every now and then.&lt;&#x2F;p&gt;
&lt;p&gt;As a little workaround, we passed &lt;code&gt;-B 5000000&lt;&#x2F;code&gt; to let Spotify fill up the audio buffer for 5s everytime
it starts to play catch up after which &lt;code&gt;aplay&lt;&#x2F;code&gt; would attempt to begin resampling.&lt;&#x2F;p&gt;
&lt;p&gt;We can also do multiple pipes for a bit more complexy stuff:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ pw-record --target alsa_output.platform-snd_aloop.0.analog-stereo - | ffmpeg -ar 48000 -f s16le -ac 2 -i - -filter:a &amp;quot;asetrate=48000*1.1&amp;quot; -f wav - | mpv --audio-buffer=5 -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;synchronizing-audio-output-from-a-process-to-multiple-machines&quot;&gt;Synchronizing audio output from a process to multiple machines&lt;&#x2F;h2&gt;
&lt;p&gt;A few years ago, I wrote a &lt;a href=&quot;&#x2F;2019&#x2F;04&#x2F;01&#x2F;synchronizing-multimedia-playback-on-different-machines&#x2F;&quot;&gt;post on synchronizing multimedia plaback (and Syncplay)&lt;&#x2F;a&gt;.
Quite a while after writing it, I discovered &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;badaix&#x2F;snapcast&quot;&gt;Snapcast&lt;&#x2F;a&gt; which is
more tailored to audio syncing and seems to work better than &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Syncplay&#x2F;syncplay&quot;&gt;Syncplay&lt;&#x2F;a&gt; in that regard.
(although, I&#x27;ll still stick to Syncplay for video syncing stuff)&lt;&#x2F;p&gt;
&lt;p&gt;Install Snapcast and edit &lt;code&gt;&#x2F;etc&#x2F;snapserver.conf&lt;&#x2F;code&gt; to have your &lt;code&gt;source&lt;&#x2F;code&gt; line as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;source = pipe:&#x2F;&#x2F;&#x2F;tmp&#x2F;snapfifo?name=default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Launch the Snapcast server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; snapserver
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In another terminal, we&#x27;ll write the audio output from the dummy audio output device to this named pipe
which&#x27;ll be used by snapcast server to broadcast audio to connected clients:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ pw-record --target alsa_output.platform-snd_aloop.0.analog-stereo - &amp;gt; &#x2F;tmp&#x2F;snapfifo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Have some application writing audio output to this dummy audio output device (Spotify as we talked about
in the previous section, anything else works fine too).&lt;&#x2F;p&gt;
&lt;p&gt;Snapcast server by default also provides a little built-in client running on &lt;a href=&quot;http:&#x2F;&#x2F;0.0.0.0:1780&quot;&gt;http:&#x2F;&#x2F;0.0.0.0:1780&lt;&#x2F;a&gt;, you
can open this in a browser (which&#x27;ll be writing audio output to our actual audio output device) and tap
the play button. If you&#x27;re able to hear music now, then we&#x27;re good to go!&lt;&#x2F;p&gt;
&lt;p&gt;Snapcast client app is also available for Android and iOS. We can have our phones be a part of this syncy
mesh too.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>About</title>
        <published>2023-01-01T00:00:00+00:00</published>
        <updated>2023-01-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/about/"/>
        <id>https://ritiek.github.io/about/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/about/">&lt;p&gt;Hwello, wild hooman! My name is Ritiek Malhotra. I&#x27;m mostly into software and electronics. I completed my Bachelor&#x27;s degree in Computer Science in 2021. I also play video games and a little bit of piano. Aaaaand cats are fun!&lt;&#x2F;p&gt;
&lt;p&gt;Happy expluwuring!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;pgp-public-key&quot;&gt;PGP Public Key&lt;&#x2F;h3&gt;
&lt;p&gt;You can import my PGP public key using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --recv-keys&lt;&#x2F;span&gt;&lt;span&gt; 66FF60997B04845FF4C0CB4FEB6FC9F9FC964257
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or by importing the following PGP public key block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --import&lt;&#x2F;span&gt;&lt;span&gt; ritiek-pub.asc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;span&gt;Comment: 66FF 6099 7B04 845F F4C0  CB4F EB6F C9F9 FC96 4257
&lt;&#x2F;span&gt;&lt;span&gt;Comment: Ritiek Malhotra &amp;lt;ritiekmalhotra123@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mDMEZv055hYJKwYBBAHaRw8BAQdAu6te8f3xume1DqaNmbj6XuxNOuFDPft181ob
&lt;&#x2F;span&gt;&lt;span&gt;eC8LUZC0LVJpdGllayBNYWxob3RyYSA8cml0aWVrbWFsaG90cmExMjNAZ21haWwu
&lt;&#x2F;span&gt;&lt;span&gt;Y29tPoiZBBMWCgBBAhsBBQsJCAcCAiICBhUKCQgLAgQWAgMBAh4HAheAFiEEZv9g
&lt;&#x2F;span&gt;&lt;span&gt;mXsEhF&#x2F;0wMtP62&#x2F;J+fyWQlcFAmcDWqsFCQQc58UACgkQ62&#x2F;J+fyWQld85QD&#x2F;RfEs
&lt;&#x2F;span&gt;&lt;span&gt;0xk3Me6uA9dAvwHuUo4KOS7gord+bSBd9hqMmnEA&#x2F;jIyhUItNA+nEQ1eukX5ffPe
&lt;&#x2F;span&gt;&lt;span&gt;GX93GAKFh6j15uYxqPwCuDMEZv06JxYJKwYBBAHaRw8BAQdAzBcnjkVDw6M&#x2F;6eU0
&lt;&#x2F;span&gt;&lt;span&gt;CYRP80fVLdJQdYsa1RSkd99iSAiI9QQYFgoAJgIbAhYhBGb&#x2F;YJl7BIRf9MDLT+tv
&lt;&#x2F;span&gt;&lt;span&gt;yfn8lkJXBQJnA1q1BQkEHOeOAIF2IAQZFgoAHRYhBMezLgQ0foDRiF9rheyqM8Fq
&lt;&#x2F;span&gt;&lt;span&gt;41Y6BQJm&#x2F;TonAAoJEOyqM8Fq41Y66vwBAIBZ1hdxatpXe77F0aqObXdn3VctAQtk
&lt;&#x2F;span&gt;&lt;span&gt;fR5hA1CkdaL3AQDGBrUcq5dR2HrTEoIJwO7ndilvbtNDBBc&#x2F;IfWxrDNLBgkQ62&#x2F;J
&lt;&#x2F;span&gt;&lt;span&gt;+fyWQldgMAEAx7lDSWnPGsXDkCTTiQCbT2z2x8ukmaLPvJxWeHww3oAA&#x2F;0aYl5mT
&lt;&#x2F;span&gt;&lt;span&gt;xRpkywh7FDlo4BQ5zCdjdvxmn6EmsbaZW4IHuDMEZv07DBYJKwYBBAHaRw8BAQdA
&lt;&#x2F;span&gt;&lt;span&gt;bynFImHNNBq&#x2F;lkeFqoMzLfMxw4FHJd280ATaBczzLqGIfgQYFgoAJgIbIBYhBGb&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;YJl7BIRf9MDLT+tvyfn8lkJXBQJnA1q1BQkEHOapAAoJEOtvyfn8lkJX1e4A&#x2F;R&#x2F;O
&lt;&#x2F;span&gt;&lt;span&gt;vnLPXU774r2sSxKBZuGwm0SJStVVjrxUVLtf2pJhAQC8f8A2xWvWjuQ+Q1QIA8sm
&lt;&#x2F;span&gt;&lt;span&gt;CWhTnQD+gbNkHMCbHNKiB7g4BGb9O1ISCisGAQQBl1UBBQEBB0B66LfeACwy5W1N
&lt;&#x2F;span&gt;&lt;span&gt;ZULdZFCesA8O6BwrwHnWlkilcY9nYgMBCAeIfgQYFgoAJgIbDBYhBGb&#x2F;YJl7BIRf
&lt;&#x2F;span&gt;&lt;span&gt;9MDLT+tvyfn8lkJXBQJnA1q1BQkEHOZjAAoJEOtvyfn8lkJXzmABAIBxMiOGo2j&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;o8nfpYKwoncSXSO6B4Bopj3uCKH6OogdAQCEWclybv5KuaLWgLLobhblOlK4UwFB
&lt;&#x2F;span&gt;&lt;span&gt;QFVVH9DNeML8AQ==
&lt;&#x2F;span&gt;&lt;span&gt;=1KqJ
&lt;&#x2F;span&gt;&lt;span&gt;-----END PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Flashing Tasmota on LC Tech 5V 4CH Relay</title>
        <published>2022-11-05T00:00:00+00:00</published>
        <updated>2022-11-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2022/11/05/flashing-tasmota-on-lctech-4ch-relay/"/>
        <id>https://ritiek.github.io/2022/11/05/flashing-tasmota-on-lctech-4ch-relay/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2022/11/05/flashing-tasmota-on-lctech-4ch-relay/">&lt;p&gt;It seems we mostly require three components to put up non-smart home lights and other home electronics on a network:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Relay&lt;&#x2F;li&gt;
&lt;li&gt;A microcontroller with Wi-Fi capabilities&lt;&#x2F;li&gt;
&lt;li&gt;AC to DC converter (to supply power to the microcontroller and relay)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;TinmvJg.png&quot; width=&quot;300&quot;&gt;
  &lt;i&gt;LC Tech 5V 4CH Relay&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This relay has all other components except for a built-in AC to DC converter. It uses ESP8266 ESP-01S as a
microcontroller and came pre-flashed with some firmware whose dump is &lt;a href=&quot;https:&#x2F;&#x2F;drive.google.com&#x2F;file&#x2F;d&#x2F;1HtVP_Ys4VVpu8Qo8VJgHN0PDdGJIQ7Qf&#x2F;view?usp=sharing&quot;&gt;available here&lt;&#x2F;a&gt;.
The ESP-01S on this board receives commands through the network and simply passes them (making use of RX&#x2F;TX
pins through a serial connection) to another chip present on this board which in turn actually controls the
relays.&lt;&#x2F;p&gt;
&lt;p&gt;The pre-flashed firmware had a couple of issues which are summarized nicely in alternate firmware called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nagius&#x2F;RemoteRelay#why-another-firmware-&quot;&gt;RemoteRelay&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;why-another-firmware&quot;&gt;Why another firmware ?&lt;&#x2F;h2&gt;
&lt;p&gt;This board is not using the ESP8266 to manage the relays but instead another onboard MCU. The ESP8266 module is just used as a WiFi interface with its default AT firmware. The two chips are using serial (115200-8-1) to communicate.&lt;&#x2F;p&gt;
&lt;p&gt;The original user experience is pretty clunky and no really usable. On power up, the board start an access point you need to connect your phone to in order to send commands. This is only usefull for testing as it&#x27;s isolated from your main network.&lt;&#x2F;p&gt;
&lt;p&gt;To switch to station mode, you need to push a button on the board (S1), install an app on your phone and then use this app to feed your SSID and password to the board. The app will then display its IP.
Once connected, you need to send a binary payload over a plain TCP socket. No HTTP, no protocol of any kind, just plain binary.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you can run this command from Linux to switch on the first relay :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo -ne &amp;quot;\xA0\x01\x01\xA2&amp;quot; | nc 192.168.0.9 8080
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is no way to get a feedback of the current state of the relay (beside looking at the leds on the board).&lt;&#x2F;p&gt;
&lt;p&gt;On power loss, the board switch back to access point and you have to push the S1 button again to reconnect.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;wiring-up&quot;&gt;Wiring up&lt;&#x2F;h2&gt;
&lt;p&gt;There are some most commonly used scenarios when wiring up the ESP-01S using a USB to TTL adapter:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;l2HYjdi.png&quot; width=&quot;200&quot;&gt;
  &lt;i&gt;USB to TTL adapter&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;h4 id=&quot;runs-the-program-present-in-flash&quot;&gt;Runs the program present in flash:&lt;&#x2F;h4&gt;
&lt;p&gt;| ESP-01S 	| USB to TTL 	|
|---------	|------------	|
| 3V3     	| 3V3        	|
| GND     	| GND        	|&lt;&#x2F;p&gt;
&lt;h4 id=&quot;runs-the-program-present-in-flash-and-gain-access-to-the-serial-console&quot;&gt;Runs the program present in flash and gain access to the serial console:&lt;&#x2F;h4&gt;
&lt;p&gt;| ESP-01S 	| USB to TTL 	|
|---------	|------------	|
| 3V3     	| 3V3        	|
| GND     	| GND        	|
| RX     	| TX        	|
| TX     	| RX        	|&lt;&#x2F;p&gt;
&lt;p&gt;Serial console can now be accessed using &lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;8&#x2F;picocom&quot;&gt;&lt;code&gt;picocom&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; picocom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; 76800 &#x2F;dev&#x2F;ttyUSB0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ESP-01S uses the default baud rate of 76800 to display boot messages. This may later be overridden by the program
present in flash, if any.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure you specify the correct baud rate otherwise you&#x27;ll be sending and receiving garbled data. Experiment with
these common baud rates used with ESP-01S if you&#x27;re not sure of the expected baud rate:&lt;&#x2F;p&gt;
&lt;p&gt;9600
14400
19200
115200&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re still getting garbled data, you&#x27;ll have to do some research on the baud rate used by the firmware
currently flashed on the microcontroller.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;booting-into-flash-mode&quot;&gt;Booting into Flash Mode:&lt;&#x2F;h4&gt;
&lt;p&gt;| ESP-01S 	| USB to TTL 	|
|---------	|------------	|
| 3V3     	| 3V3        	|
| GND     	| GND        	|
| EN     	| 3V3        	|
| IO0     	| GND        	|&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll have to make a few connections in parallel to boot into this mode. A breadboard might help.&lt;&#x2F;p&gt;
&lt;p&gt;Also there&#x27;s no point booting into flash mode when you can&#x27;t read and write to the flash. So, this mode is usually
paired up with RX&#x2F;TX connections.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;booting-into-flash-mode-with-access-to-serial-console&quot;&gt;Booting into Flash Mode with access to Serial Console:&lt;&#x2F;h4&gt;
&lt;p&gt;| ESP-01S 	| USB to TTL 	|
|---------	|------------	|
| 3V3     	| 3V3        	|
| GND     	| GND        	|
| EN     	| 3V3        	|
| IO0     	| GND        	|
| RX     	| TX        	|
| TX     	| RX        	|&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;lBijlVB.png&quot; width=&quot;800&quot;&gt;
  &lt;a href=&quot;https:&#x2F;&#x2F;www.diyhobi.com&#x2F;flash-program-esp-01-using-usb-serial-adapter&#x2F;&quot;&gt;
  &lt;i&gt;Wiring up to boot into Flash Mode with access to Serial Console&lt;&#x2F;i&gt;
  &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;If you like, you can also make the following connection:&lt;&#x2F;p&gt;
&lt;p&gt;| ESP-01S 	| USB to TTL 	|
|---------	|------------	|
| RST     	| GND        	|&lt;&#x2F;p&gt;
&lt;p&gt;Plug in and out the RST jumper cable whenever you want to hard reset&#x2F;reboot your chip (this won&#x27;t erase the
flash memory). If you don&#x27;t setup this RST connection, I think re-plugging the 3V3 pin should have the same effect
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;ritiek.github.io&quot;&gt;happy to accept PR if you have an ESP-01S around at the moment to confirm&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;0prNvYl.jpeg&quot; width=&quot;650&quot;&gt;
  &lt;i&gt;Connecting to pins on the relay board&lt;&#x2F;i&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;Q0YK7i8.jpeg&quot; width=&quot;650&quot;&gt;
  &lt;i&gt;Connecting to pins directly on the ESP8266 ESP-01S&lt;&#x2F;i&gt;
  &lt;br&gt;
  &lt;i&gt;(Ignore the Pi Pico in above pics)&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Now you should be able to read and write programs to flash memory. Let&#x27;s start by taking a dump of what&#x27;s already
present on the flash memory using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esptool&quot;&gt;&lt;code&gt;esptool.py&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; esptool.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --port&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyUSB0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --baud&lt;&#x2F;span&gt;&lt;span&gt; 115200 read_flash 0x00000 0x100000 &#x2F;path&#x2F;to&#x2F;backup.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will backup the first 1 MB from the flash memory. If you&#x27;re using any other chip besides ESP-01S that has
a different flash size, adjust &lt;code&gt;0x100000&lt;&#x2F;code&gt; accordingly (e.g. set it to &lt;code&gt;0x400000&lt;&#x2F;code&gt; if chip has a flash size of 4 MB).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flashing-a-custom-firmware&quot;&gt;Flashing a custom firmware&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;remoterelay&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nagius&#x2F;RemoteRelay&quot;&gt;RemoteRelay&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I first flashed the chip with RemoteRelay as it it&#x27;s made specifically
for LC Tech Relays. You can compile and flash it using &lt;a href=&quot;https:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;software&quot;&gt;Arudino IDE&lt;&#x2F;a&gt;. However,
this firmware had an issue where it won&#x27;t save the last relay state if the chip were to be rebooted. All relays
would be set to OFF state after a reboot. This causes a problem that peripherals connected in relay under NO
would always start as OFF and peripherals connected in relay under NC would always start as ON whenever the
power goes off and comes back on, irrespective of the last relay state. Also, if you want to integrate RemoteRelay
with HomeAssistant, you&#x27;ll have to manually add API endpoints.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tasmota&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arendst&#x2F;Tasmota&quot;&gt;Tasmota&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Next I went with Tasmota mostly in an attempt to load relay&#x27;s last state in case of power reset that didn&#x27;t seem
possible with RemoteRelay. Digging a bit, one way that worked for me is to compile Tasmota (using
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tasmota&#x2F;docker-tasmota&quot;&gt;tasmota-docker&lt;&#x2F;a&gt;) with support for &lt;code&gt;if&lt;&#x2F;code&gt; logic conditions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; user_config_override.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;USE_EXPRESSION         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add support for expression evaluation in rules (+3k2 code, +64 bytes mem)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;SUPPORT_IF_STATEMENT   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add support for IF statement in rules (+4k2 code, -332 bytes mem)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -ti --rm -v &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;Tasmota:&#x2F;tasmota&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UID&lt;&#x2F;span&gt;&lt;span&gt;:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GID&lt;&#x2F;span&gt;&lt;span&gt; blakadder&#x2F;docker-tasmota&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -e&lt;&#x2F;span&gt;&lt;span&gt; tasmota-PT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will output a .bin we can use to flash on the chip.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s erase the flash on the chip:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; esptool.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --port&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyUSB0 erase_flash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and now write the generated .bin onto the chip:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; esptool.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --port&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyUSB0 write_flash 0x00000 &#x2F;path&#x2F;to&#x2F;tasmota.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Connect the ESP-01S back to the relay and power it on.&lt;&#x2F;p&gt;
&lt;p&gt;Now to make the ESP8266 communicate with the seconday chip which controls the actual realys, we&#x27;ll
add some serial commands in Tasmota GUI. Applying the configuration and setting up rules from the 12V variant
seems to also work for my 5V variant:&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;templates.blakadder.com&#x2F;LC-ESP01-4R-12V.html&quot;&gt;https:&#x2F;&#x2F;templates.blakadder.com&#x2F;LC-ESP01-4R-12V.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now to save and load relay&#x27;s last state, create another rule:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=0 do mem1 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=0 do mem2 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=0 do mem3 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=0 do mem4 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=1 do mem1 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=1 do mem2 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=1 do mem3 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=1 do mem4 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem1==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00101A2 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem2==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00201A3 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem3==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00301A4 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem4==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00401A5 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem4==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00401A5 endif endon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And enable it with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule2&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The rules in the linked template and loading&#x2F;saving statesmake sense if you connect all your peripherals to NO
on the relays.
If you&#x27;ll be connecting all of them to NC, swap &lt;code&gt;State=0&lt;&#x2F;code&gt; with &lt;code&gt;State=1&lt;&#x2F;code&gt; and vice-versa in both rules like below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do Baudrate 115200 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; SerialReceived#Data=41542B5253540D0A do SerialSend5 5749464920434f4e4e45435445440a5749464920474f542049500a41542b4349504d55583d310a41542b4349505345525645523d312c383038300a41542b43495053544f3d333630 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=0 do SerialSend5 A00101A2 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=1 do SerialSend5 A00100A1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=0 do SerialSend5 A00201A3 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=1 do SerialSend5 A00200A2 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=0 do SerialSend5 A00301A4 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=1 do SerialSend5 A00300A3 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=0 do SerialSend5 A00401A5 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=1 do SerialSend5 A00400A4 endon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=0 do mem1 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=0 do mem2 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=0 do mem3 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=0 do mem4 1 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power1#State=1 do mem1 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power2#State=1 do mem2 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power3#State=1 do mem3 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; Power4#State=1 do mem4 0 endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem1==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00101A2 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem2==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00201A3 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem3==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00301A4 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem4==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00401A5 endif endon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem4==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00401A5 endif endon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure to enable both these rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule1&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule2&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you noticed above in &lt;code&gt;rule2&lt;&#x2F;code&gt;, for some reason I had to repeat the last line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt; System#Boot do if (mem4==1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SerialSend5&lt;&#x2F;span&gt;&lt;span&gt; A00401A5 endif endon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;otherwise Tasmota 12.2.0.2 didn&#x27;t seem to pick it up.&lt;&#x2F;p&gt;
&lt;p&gt;Still need to verify if it&#x27;s me messing something up or if this seems a bug in Tasmota.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Flashing Tasmota on a Tuya based Bulb</title>
        <published>2022-10-04T00:00:00+00:00</published>
        <updated>2022-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2022/10/04/flashing-tasmota-on-a-tuya-based-bulb/"/>
        <id>https://ritiek.github.io/2022/10/04/flashing-tasmota-on-a-tuya-based-bulb/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2022/10/04/flashing-tasmota-on-a-tuya-based-bulb/">&lt;p&gt;I&#x27;ve lately wanting to try out fancy bulbs controllable through my android phone so I don&#x27;t have to get up
to switch them off while I&#x27;m sleepy.&lt;&#x2F;p&gt;
&lt;p&gt;A big push back to me from trying out such bulbs is the lack of control. I didn&#x27;t want to get too fancy
and most bulbs that just do the job have a cloud server acting as middle-man between the bulb and its
corresponding mobile app, which sounds really uncomfortable.&lt;&#x2F;p&gt;
&lt;p&gt;I came to know about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arendst&#x2F;Tasmota&quot;&gt;Tasmota&lt;&#x2F;a&gt; while looking for bulbs that work over
local network and don&#x27;t have to depend on a 3rd party&#x27;s cloud server. Looking around for such bulbs, it seems
bulbs with pre-installed Tasmota aren&#x27;t as common, especially with local vendors. One of the few I stumbled
upon was &lt;a href=&quot;https:&#x2F;&#x2F;www.athom.tech&#x2F;wled&quot;&gt;Athom Bulbs&lt;&#x2F;a&gt; but these would come out to be pretty expensive considering
import duties and all. Nope, won&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;Researching a bit more, I came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ct-Open-Source&#x2F;tuya-convert&quot;&gt;tuya-convert&lt;&#x2F;a&gt; for ESP
micro-controllers. So, it seems like most bulbs which connect over the 3rd party cloud are based on Tuya but
re-branded, and most Tuya based bulbs if not all use some kinda ESP micro-controller to communicate to the
GPIOs and connect to WiFi. These Tuya based devices seemed to have a vulnerability in the past where you
could install a custom firmware over-the-air and take it off the 3rd party cloud. This vulnerability seems
to have been fixed by Tuya as of 2020 and the newer devices need to ripped apart and have to be connected
via serial port through the RX&#x2F;TX GPIO pins present on the micro-controller to install a custom firmware.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are still re-branded Tuya devices around as 2022 that have this vulnerability.
I started to look for never-heard-of-before brands on local retailer websites, since it felt like those would
be based on Tuya, as well as pre-loaded with a vulnerable firmware. And it seems I did get lucky
with &lt;a href=&quot;https:&#x2F;&#x2F;www.flipkart.com&#x2F;ontube-9-watt-b22-wi-fi-smart-led-bulb-16-million-colors-voice-control&#x2F;p&#x2F;itm3c874c05e4a74&quot;&gt;this $5 RGB Bulb&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;On receiving the bulb, the box in which the bulb came in was branded by JBT, while the one on the retailer&#x27;s
website mentioned ONTUBE. It wasn&#x27;t problem to me since specifications seemed to match on paper. A few things
I found interesting was that the mobile app&#x27;s UI that the manual mentioned to install
(&lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.lumary.smart&amp;amp;hl=en&amp;amp;gl=US&quot;&gt;Lumary&lt;&#x2F;a&gt;) seemed awfully similar
to &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.tuya.smartlife&amp;amp;hl=en&amp;amp;gl=US&quot;&gt;Smart Life&lt;&#x2F;a&gt; which is pretty
popluar with Tuya based devices! This and along with how the bulb entered into pairing mode (ON-OFF-ON-OFF-ON)
seems to be in-sync with Tuya. At this point, I was almost certain the bulb&#x27;s based on Tuya.&lt;&#x2F;p&gt;
&lt;p&gt;I was careful to not feed in my WiFi&#x27;s SSID anywhere on the mobile app as I&#x27;ve read around that Tuya devices
tend to auto-update their firmware on the smell of Internet, which would be a problem if the bulb updated to
a not-vulnerable firmware.&lt;&#x2F;p&gt;
&lt;p&gt;Looking more into how I can experiment with tuya-convert, it seemed like installing it on my native machine
isn&#x27;t a good idea as it tends to mess up with network settings to get up working. I have a Raspberry Pi
Zero W around which I loaded up with fresh Raspberry Pi OS off the Internet as a means to not having to mess
with my native machine.&lt;&#x2F;p&gt;
&lt;p&gt;This method had a slight problem as I use my Pi in headless mode and I won&#x27;t be able
to stay connected via SSH if tuya-convert messes up with Pi&#x27;s network settings. I worked around this by
setting up my Pi to be usable as an Ethernet gadget which can be done by adding &lt;code&gt;dtoverlay=dwc2&lt;&#x2F;code&gt; to Pi&#x27;s
&lt;code&gt;&#x2F;boot&#x2F;config.txt&lt;&#x2F;code&gt; (make sure to comment out any previous lines with &lt;code&gt;dtoverlay&lt;&#x2F;code&gt;) and appending &lt;code&gt;modules-load=dwc2,g_ether&lt;&#x2F;code&gt;
to Pi&#x27;s &lt;code&gt;&#x2F;boot&#x2F;cmdline.txt&lt;&#x2F;code&gt;. Now connecting through the micro-USB data port on the Pi to my native machine with USB A,
and changing Ethernet network settings on my native machine to &quot;Shared to other computers&quot; should show a new
Ethernet interface on your native machine when the Pi boots up. If you also entered a WiFi SSID, then you can SSH
into the Pi and get the IP address our Pi got assigned on the USB gadget interface from running &lt;code&gt;hostname -I&lt;&#x2F;code&gt;.
Then you can reconnect SSH using this USB gadget interface&#x27;s IP address.&lt;&#x2F;p&gt;
&lt;p&gt;Tuya-convert can now have the built-in WiFi all for itself. Following the steps to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ct-Open-Source&#x2F;tuya-convert#installation&quot;&gt;use tuya-convert&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pi@raspberrypi:~&#x2F;tuya-convert $ sudo .&#x2F;start_flash.sh
&lt;&#x2F;span&gt;&lt;span&gt;tuya-convert v2.4.5
&lt;&#x2F;span&gt;&lt;span&gt;Checking for network interface wlan0... Found.
&lt;&#x2F;span&gt;&lt;span&gt;Checking UDP port 53... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking UDP port 67... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking TCP port 80... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking TCP port 443... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking UDP port 6666... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking UDP port 6667... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking TCP port 1883... Available.
&lt;&#x2F;span&gt;&lt;span&gt;Checking TCP port 8886... Available.
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;  Starting AP in a screen
&lt;&#x2F;span&gt;&lt;span&gt;  Starting web server in a screen
&lt;&#x2F;span&gt;&lt;span&gt;  Starting Mosquitto in a screen
&lt;&#x2F;span&gt;&lt;span&gt;  Starting PSK frontend in a screen
&lt;&#x2F;span&gt;&lt;span&gt;  Starting Tuya Discovery in a screen
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;IMPORTANT
&lt;&#x2F;span&gt;&lt;span&gt;1. Connect any other device (a smartphone or something) to the WIFI vtrust-flash
&lt;&#x2F;span&gt;&lt;span&gt;   This step is IMPORTANT otherwise the smartconfig may not work!
&lt;&#x2F;span&gt;&lt;span&gt;2. Put your IoT device in autoconfig&#x2F;smartconfig&#x2F;pairing mode (LED will blink fast). This is usually done by pressing and holding the primary button of the device
&lt;&#x2F;span&gt;&lt;span&gt;   Make sure nothing else is plugged into your IoT device while attempting to flash.
&lt;&#x2F;span&gt;&lt;span&gt;3. Press ENTER to continue
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;Starting smart config pairing procedure
&lt;&#x2F;span&gt;&lt;span&gt;Waiting for the device to install the intermediate firmware
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;IoT-device is online with ip 10.42.42.42
&lt;&#x2F;span&gt;&lt;span&gt;Stopping smart config
&lt;&#x2F;span&gt;&lt;span&gt;Fetching firmware backup
&lt;&#x2F;span&gt;&lt;span&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
&lt;&#x2F;span&gt;&lt;span&gt;                                 Dload  Upload   Total   Spent    Left  Speed
&lt;&#x2F;span&gt;&lt;span&gt;100 1024k  100 1024k    0     0  46886      0  0:00:22  0:00:22 --:--:-- 17747
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;Getting Info from IoT-device
&lt;&#x2F;span&gt;&lt;span&gt;VTRUST-FLASH 1.5
&lt;&#x2F;span&gt;&lt;span&gt;(c) VTRUST GMBH https:&#x2F;&#x2F;www.vtrust.de&#x2F;35c3&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;READ FLASH: http:&#x2F;&#x2F;10.42.42.42&#x2F;backup
&lt;&#x2F;span&gt;&lt;span&gt;ChipID: c29fce
&lt;&#x2F;span&gt;&lt;span&gt;MAC: D8:F1:5B:C2:9F:CE
&lt;&#x2F;span&gt;&lt;span&gt;BootVersion: 7
&lt;&#x2F;span&gt;&lt;span&gt;BootMode: normal
&lt;&#x2F;span&gt;&lt;span&gt;FlashMode: 1M DOUT @ 40MHz
&lt;&#x2F;span&gt;&lt;span&gt;FlashChipId: 144051
&lt;&#x2F;span&gt;&lt;span&gt;FlashChipRealSize: 1024K
&lt;&#x2F;span&gt;&lt;span&gt;Active Userspace: user2 0x81000
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;Ready to flash third party firmware!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;For your convenience, the following firmware images are already included in this repository:
&lt;&#x2F;span&gt;&lt;span&gt;  Tasmota v8.1.0.2 (wifiman)
&lt;&#x2F;span&gt;&lt;span&gt;  ESPurna 1.13.5 (base)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;You can also provide your own image by placing it in the &#x2F;files directory
&lt;&#x2F;span&gt;&lt;span&gt;Please ensure the firmware fits the device and includes the bootloader
&lt;&#x2F;span&gt;&lt;span&gt;MAXIMUM SIZE IS 512KB
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Available options:
&lt;&#x2F;span&gt;&lt;span&gt;  0) return to stock
&lt;&#x2F;span&gt;&lt;span&gt;  1) flash espurna.bin
&lt;&#x2F;span&gt;&lt;span&gt;  2) flash tasmota.bin
&lt;&#x2F;span&gt;&lt;span&gt;  q) quit; do nothing
&lt;&#x2F;span&gt;&lt;span&gt;Please select 0-2: 2
&lt;&#x2F;span&gt;&lt;span&gt;Are you sure you want to flash tasmota.bin? This is the point of no return [y&#x2F;N] y
&lt;&#x2F;span&gt;&lt;span&gt;Attempting to flash tasmota.bin, this may take a few seconds...
&lt;&#x2F;span&gt;&lt;span&gt;Flashed http:&#x2F;&#x2F;10.42.42.1&#x2F;files&#x2F;tasmota.bin successfully in 21124ms, rebooting...
&lt;&#x2F;span&gt;&lt;span&gt;Look for a tasmota-xxxx SSID to which you can connect and configure
&lt;&#x2F;span&gt;&lt;span&gt;Be sure to configure your device for proper function!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HAVE FUN!
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;Do you want to flash another device? [y&#x2F;N] n
&lt;&#x2F;span&gt;&lt;span&gt;======================================================
&lt;&#x2F;span&gt;&lt;span&gt;Cleaning up...
&lt;&#x2F;span&gt;&lt;span&gt;No screen session found.
&lt;&#x2F;span&gt;&lt;span&gt;Closing AP
&lt;&#x2F;span&gt;&lt;span&gt;Exiting..
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It worked out fine and now I have Tasmota on my bulb!
This means the bulb I received was pre-loaded with a vulnerable firmware.
Checking out the &lt;code&gt;backups&lt;&#x2F;code&gt; directory created by tuya-convert, the bulb seems to be using ESP8266 chip.
Save the .bin file for your firmware somewhere in case you decide to revert back to stock firmware.
However, reverting back to stock firmware only seems possible by ripping the bulb apart and connecting
to a serial console.&lt;&#x2F;p&gt;
&lt;p&gt;I found out my bulb&#x27;s IP and experimented with Tasmota&#x27;s web interface a bit. I also updated Tasmota to
the current latest version (v12.1.1) while I was at it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;module-and-template-configuration&quot;&gt;Module and Template Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Tasmota is a generic firmware and it doesn&#x27;t know what GPIO pins on the ESP microcontroller should do what.
Heck it doesn&#x27;t even know whether the device is a switch, fan, bulb or something else.
It needs to be explicitly stated what GPIO pins need to do what. If you&#x27;re luckier you can find a pre-existing
template compatible with your device from &lt;a href=&quot;https:&#x2F;&#x2F;templates.blakadder.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;templates.blakadder.com&#x2F;&lt;&#x2F;a&gt;
or get some leads checking around the Internet.&lt;&#x2F;p&gt;
&lt;p&gt;In my case, I couldn&#x27;t find a fully compatible template as is. However, I stumbled upon
&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;en4rab&#x2F;2424500bc998ecb8687a8848bbbfaa15&quot;&gt;this gist&lt;&#x2F;a&gt;
which gave me a headstart on figuring out the pins. I copied the template code and pasted it in my Tasmota UI
in &quot;Configuration -&amp;gt; Configure Other&quot; and restarted my bulb. Turns out it required a few changes such as the
color bar on the Tasmota UI was giving me different colors than what it should have, but at least now I knew
that some of the pins from the template serve some function (albeit different) on the same pins on my bulb.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;YMka25p.png&quot; width=&quot;350&quot;&gt;
  &lt;i&gt;Color Changer on Tasmota&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This template showed up for manual configuration in &quot;Configuration -&amp;gt; Configure Module&quot;.
On checking &lt;a href=&quot;https:&#x2F;&#x2F;tasmota.github.io&#x2F;docs&#x2F;Lights&#x2F;#pwm-lights&quot;&gt;Tasmota&#x27;s docs on different lights&lt;&#x2F;a&gt;, it seems
if only one of the pin is set to PWM while all others are set to None, this only pin will allow for brightness
control.&lt;&#x2F;p&gt;
&lt;p&gt;Experimenting with this; I figured if I set some pin to PWM1 while setting all the other pins to None. If
restarting the bulb and moving the brightness slider on the UI emits and changes brightness only for the
Red color, then this pin corresponds to the R channel in the RGB combination. If the pin only emits and allows
control for white color, then move on to the next pin since it&#x27;s not a part of the RGB combination.
I made a note of what pin emits the Red color. Proceeding further, I set this Red pin back to None and continued
the process to find pins responsible for emitting Green and then for Blue colors. Once I had the RGB pins
figured out individually, I set all of them together to their corresponding PWM number as stated in the above
linked docs, which is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Red   - GPIO5  - PWM1
&lt;&#x2F;span&gt;&lt;span&gt;Green - GPIO4  - PWM2
&lt;&#x2F;span&gt;&lt;span&gt;Blue  - GPIO13 - PWM3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and voila now Tasmota&#x27;s UI had the RGB color bar show up and work as expected!&lt;&#x2F;p&gt;
&lt;p&gt;Experimenting further with the unused GPIO pins, it seems like the bulb also supports Cold White and Warm White
(check the docs what they mean!) which is really a nice bonus to have!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not sure of the purpose of Template Configuration and if it would have been helpful for my case. Nonetheless,
I copied my Module Configuration over to my Template Configuration as well.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;rT6EEPQ.png&quot; width=&quot;700&quot;&gt;
  &lt;i&gt;Final Configuration&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Last thing I noticed was the bulb wouldn&#x27;t retain its last colors and would stay off when powered off and powered on
back. This was resolved after executing following commands under Tasmota:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;SetOption0 1
&lt;&#x2F;span&gt;&lt;span&gt;PowerRetain 1
&lt;&#x2F;span&gt;&lt;span&gt;PowerOnState 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;ClapLights&quot;&gt;ClapLights&lt;&#x2F;a&gt; that goes well along with it!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Installing Manjaro on ASUS Zenbook 14 (with ScreenPad 2.0)</title>
        <published>2022-01-03T00:00:00+00:00</published>
        <updated>2022-01-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2022/01/03/manjaro-on-asus-zenbook-14-screenpad-v2/"/>
        <id>https://ritiek.github.io/2022/01/03/manjaro-on-asus-zenbook-14-screenpad-v2/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2022/01/03/manjaro-on-asus-zenbook-14-screenpad-v2/">&lt;p&gt;Notes on ASUS Zenbook 14 having the ScreenPad 2.0&lt;&#x2F;p&gt;
&lt;p&gt;I started off with installing Manjaro v21.2.0 with kernel v5.15.7 on this little machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sound&quot;&gt;Sound&lt;&#x2F;h2&gt;
&lt;p&gt;Sound didn&#x27;t work for me. I found two ways on the Internet I could get it to work.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; lshw
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*-multimedia
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description:&lt;&#x2F;span&gt;&lt;span&gt; Multimedia audio controller
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;product:&lt;&#x2F;span&gt;&lt;span&gt; Tiger Lake-LP Smart Sound Technology Audio Controller
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vendor:&lt;&#x2F;span&gt;&lt;span&gt; Intel Corporation
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;physical&lt;&#x2F;span&gt;&lt;span&gt; id: 1f.3
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bus&lt;&#x2F;span&gt;&lt;span&gt; info: pci@0000:00:1f.3
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version:&lt;&#x2F;span&gt;&lt;span&gt; 20
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width:&lt;&#x2F;span&gt;&lt;span&gt; 64 bits
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clock:&lt;&#x2F;span&gt;&lt;span&gt; 33MHz
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capabilities:&lt;&#x2F;span&gt;&lt;span&gt; bus_master cap_list
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration:&lt;&#x2F;span&gt;&lt;span&gt; driver=sof-audio-pci latency=32
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The configuration driver was set to &lt;code&gt;sof-audio-pci&lt;&#x2F;code&gt; by default. Seems like Manjaro didn&#x27;t
come with these drivers pre-installed with the distro. All I had to do was run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; sof-firmware
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other method that worked for me was to fallback on Intel drivers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &#x2F;etc&#x2F;default&#x2F;grub
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;... snd_hda_intel.dmic_detect=0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reboot in either case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;suspend&quot;&gt;Suspend&lt;&#x2F;h2&gt;
&lt;p&gt;Waking up from suspend froze the machine. This got fixed when I moved (downgraded?) to LTS
kernel v5.10.84.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;screenpad-2-0&quot;&gt;ScreenPad 2.0&lt;&#x2F;h2&gt;
&lt;p&gt;ScreenPad 2.0 gets detected as a second display. I had to install a kernel module to be able to
adjust the brightness on this display:&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;asus-wmi-screenpad-dkms-git&#x2F;&quot;&gt;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;asus-wmi-screenpad-dkms-git&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also wrote a very simple shell script to turn off the display or adjust the brightness:&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;spad.sh&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;spad.sh&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Final GSoC update on musicbrainz_rs</title>
        <published>2021-08-20T00:00:00+00:00</published>
        <updated>2021-08-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2021/08/20/final-gsoc-update-on-musicbrainz-rs/"/>
        <id>https://ritiek.github.io/2021/08/20/final-gsoc-update-on-musicbrainz-rs/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2021/08/20/final-gsoc-update-on-musicbrainz-rs/">&lt;p&gt;This post is a follow-up of what I&#x27;ve been working on since my &lt;a href=&quot;&#x2F;2021&#x2F;07&#x2F;15&#x2F;gsoc-with-metabrainz-in-rust&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt;,
for my involvement as a GSoC student with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&quot;&gt;musicbrainz_rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-we-ve-achieved-since-then&quot;&gt;What we&#x27;ve achieved since then&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;relationship-level-includes&quot;&gt;Relationship Level Includes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;We now support requesting for relationship level includes from the web-api.
These can requested similar to the way how other includes are requested for.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; polly = Recording::fetch()
&lt;&#x2F;span&gt;&lt;span&gt;        .id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;af40d6b8-58e8-4ca5-9db8-d4fca0b899e2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .with_work_relations()
&lt;&#x2F;span&gt;&lt;span&gt;        .with_work_level_relations()
&lt;&#x2F;span&gt;&lt;span&gt;        .execute()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; relations = polly.relations.unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(relations.iter().any(|rel| rel.target_type == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;work&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;search&quot;&gt;Search&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;We now also have search implemented on most of the entities supported by musicbrainz.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    use musicbrainz_rs::entity::area::AreaType::*;
&lt;&#x2F;span&gt;&lt;span&gt;    use musicbrainz_rs::entity::area::*;
&lt;&#x2F;span&gt;&lt;span&gt;    use musicbrainz_rs::Search;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; query = AreaSearchQuery::query_builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .area(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;London&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .and()
&lt;&#x2F;span&gt;&lt;span&gt;        .tag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;place&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .build();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = Area::search(query).execute().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(result
&lt;&#x2F;span&gt;&lt;span&gt;        .entities
&lt;&#x2F;span&gt;&lt;span&gt;        .iter()
&lt;&#x2F;span&gt;&lt;span&gt;        .any(|area| area.area_type.as_ref().unwrap() == &amp;amp;City));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The ones still missing the search implementation are the &lt;code&gt;Place&lt;&#x2F;code&gt; and &lt;code&gt;Tag&lt;&#x2F;code&gt; entity.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s some inconsistency in the API response for the &lt;code&gt;Place&lt;&#x2F;code&gt; entity which I reported
&lt;a href=&quot;https:&#x2F;&#x2F;tickets.metabrainz.org&#x2F;browse&#x2F;SEARCH-664&quot;&gt;here&lt;&#x2F;a&gt;. We should probably wait before implementing
search on the &lt;code&gt;Place&lt;&#x2F;code&gt; entity and see maybe see if this can be resolved from the musicbrainz side
itself otherwise we&#x27;ll have to workaround this in our library as
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&#x2F;blob&#x2F;ae0fd81fecb8897514d9c211ba52650cd1512ab1&#x2F;src&#x2F;entity&#x2F;place.rs#L45-L49&quot;&gt;we currently parse the coordinates as &lt;code&gt;f64&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
which fails when attempting to use the same coordinate struct to also parse the search response.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand &lt;code&gt;Tag&lt;&#x2F;code&gt; entity &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API#Misc_inc.3D_arguments&quot;&gt;requires http digest authentication&lt;&#x2F;a&gt;
which isn&#x27;t implemented in musicbrainz_rs at the moment. &lt;code&gt;Tag&lt;&#x2F;code&gt; search will need to be implemented once
we have authentication up.&lt;&#x2F;p&gt;
&lt;p&gt;These are the main things we worked upon last month. I also fixed some mis-matches with the web-api in
our library, improved docs, and a little bit of refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;All of my PRs made during the GSoC period can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&#x2F;pulls?q=is%3Apr+author%3Aritiek+created%3A%3C%3D2021-08-23&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;There are still quite a few things that could be done in musicbrainz_rs as detailed in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&#x2F;issues&quot;&gt;issues section&lt;&#x2F;a&gt;. Overall, I had a great time working on
musicbrainz_rs these few months and would like to thank &lt;a href=&quot;https:&#x2F;&#x2F;metabrainz.org&#x2F;&quot;&gt;MetaBrainz Foundation&lt;&#x2F;a&gt;
and my mentor, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;&quot;&gt;Paul&lt;&#x2F;a&gt; for providing me with this opportunity, letting me
take the wheel for a while, and dealing with my cute questions all along the way! I&#x27;m starting to feel
a tiny bit more confident in Rust now.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d love to contribute to musicbrainz_rs if I get the chance in future, but for now I&#x27;ve got to focus
on other things. My college is over and I&#x27;m yet to find out what awaits for the future next!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;You can also read a more detailed version of this post and about my final work submission at:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.metabrainz.org&#x2F;2021&#x2F;08&#x2F;23&#x2F;gsoc-2021-complete-rust-binding-for-the-musicbrainz-api&#x2F;&quot;&gt;https:&#x2F;&#x2F;blog.metabrainz.org&#x2F;2021&#x2F;08&#x2F;23&#x2F;gsoc-2021-complete-rust-binding-for-the-musicbrainz-api&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GSoC with MetaBrainz (in Rust!)</title>
        <published>2021-07-15T00:00:00+00:00</published>
        <updated>2021-07-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2021/07/15/gsoc-with-metabrainz-in-rust/"/>
        <id>https://ritiek.github.io/2021/07/15/gsoc-with-metabrainz-in-rust/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2021/07/15/gsoc-with-metabrainz-in-rust/">&lt;p&gt;So, my GSoC project proposal got selected this year! I&#x27;ve been working with the
&lt;a href=&quot;https:&#x2F;&#x2F;metabrainz.org&#x2F;&quot;&gt;MetaBrainz Foundation&lt;&#x2F;a&gt; on extending the Rust wrapper around
the MusicBrainz Web-API, named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&quot;&gt;musicbrainz_rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For all the folks who have no idea what &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;&quot;&gt;MusicBrainz&lt;&#x2F;a&gt; is -
MusicBrainz is an openly accessible database maintained by the community, which contains
records on music metadata. If you&#x27;ve ever worked with the Spotify Web-API, you&#x27;ll know
you can make API calls to access information on some of the metadata on artists, albums
and songs that Spotify exposes. MusicBrainz has been built on the same idea with a laser
focus only on music metadata (unlike Spotify, where you can also control music playback
through their API) and offers a lot more detail on this metadata compared to other
services like Spotify.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accessing-the-metadata&quot;&gt;Accessing the metadata&lt;&#x2F;h2&gt;
&lt;p&gt;You can go right now and explore this metadata through &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;search&quot;&gt;their web search&lt;&#x2F;a&gt;!
For the context, let&#x27;s say we look up on the music artist Green Day, we&#x27;ll get to the &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;artist&#x2F;084308bd-1654-436f-ba03-df6697104e19&quot;&gt;artist&#x27;s page&lt;&#x2F;a&gt;,
neatly showcasing the albums that the artist has released. If you look at this page&#x27;s URL,
you&#x27;ll notice this long alphanumeric string - &lt;code&gt;084308bd-1654-436f-ba03-df6697104e19&lt;&#x2F;code&gt;. This is
the artist&#x27;s MBID (short for MusicBrainz ID). MusicBrainz supports &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_Entity&quot;&gt;many entities&lt;&#x2F;a&gt;
and every entity is associated with a unique MBID. So, every artist, track, or any other
entity in MusicBrainz is associated with a unique MBID.&lt;&#x2F;p&gt;
&lt;p&gt;You can even download the complete database onto your local disk from
&lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_Database&quot;&gt;here&lt;&#x2F;a&gt;, anytime!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-web-api&quot;&gt;The Web-API&lt;&#x2F;h3&gt;
&lt;p&gt;MusicBrainz also offers a &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API&quot;&gt;Web-API&lt;&#x2F;a&gt; to
programatically access this metadata. Let&#x27;s say to access metadata for the artist Green Day
through the API, you&#x27;ll need to know the artist&#x27;s MBID (which we already have from the
last section) and then make a GET request to the endpoint:&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;ws&#x2F;2&#x2F;artist&#x2F;084308bd-1654-436f-ba03-df6697104e19&quot;&gt;https:&#x2F;&#x2F;musicbrainz.org&#x2F;ws&#x2F;2&#x2F;artist&#x2F;084308bd-1654-436f-ba03-df6697104e19&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll notice that we&#x27;re missing a lot of information here compared to what we saw in the web
interface in the last section. This is because the API returns minimal information by default.
You need to pass additional parameters to access any further information.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say to also access the artist&#x27;s albums (which is termed as &lt;code&gt;release-groups&lt;&#x2F;code&gt; in MusicBrainz) -
we pass &lt;code&gt;?inc=release-groups&lt;&#x2F;code&gt; when making the request:&lt;br&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;ws&#x2F;2&#x2F;artist&#x2F;084308bd-1654-436f-ba03-df6697104e19?inc=release-groups&quot;&gt;https:&#x2F;&#x2F;musicbrainz.org&#x2F;ws&#x2F;2&#x2F;artist&#x2F;084308bd-1654-436f-ba03-df6697104e19?inc=release-groups&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API#Subqueries&quot;&gt;Subqueries&lt;&#x2F;a&gt; for the complete list
of supported parameters. There are many more things that you can do through the Web-API (see the &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API&quot;&gt;API documentation&lt;&#x2F;a&gt;).
I won&#x27;t be covering them here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;language-libraries&quot;&gt;Language libraries&lt;&#x2F;h3&gt;
&lt;p&gt;People have created library wrappers around the Web-API for many programming languages. The list
of recognized of libraries can be found &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API#Libraries&quot;&gt;here&lt;&#x2F;a&gt;,
and this is where I come in. This summer, I&#x27;ve been working on one such library for the Rust
programming language, named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&quot;&gt;musicbrainz_rs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you can make queries using musicbrainz_rs this way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;extern crate musicbrainz_rs;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;use musicbrainz_rs::entity::artist::Artist;
&lt;&#x2F;span&gt;&lt;span&gt;use musicbrainz_rs::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; green_day = Artist::fetch()
&lt;&#x2F;span&gt;&lt;span&gt;        .id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;084308bd-1654-436f-ba03-df6697104e19&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .with_release_groups()
&lt;&#x2F;span&gt;&lt;span&gt;        .execute()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; release_groups = green_day.release_groups.unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(release_groups
&lt;&#x2F;span&gt;&lt;span&gt;        .iter()
&lt;&#x2F;span&gt;&lt;span&gt;        .any(|release_group| release_group.title == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Dookie&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;musicbrainz_rs isn&#x27;t listed as a recognized library by MusicBrainz, since the library does
not completely wrap around the Web-API at the moment. Off the top of my head, we&#x27;re mainly missing
on Non-MBID Lookups, Search and Submitting Data.
There are also parts of the library that need to be addressed before it being suitable for use in
production. Anyway, I&#x27;ve been working with Paul (creator of musicbrainz_rs) to build new features in the library.
We&#x27;ve had some cool things going on since the last month, which I&#x27;ll talk about in the next sections!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;coverart&quot;&gt;Coverart&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The library can now fetch for coverart for the release and release-group entities. An
example covering all of these methods can be found in - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oknozor&#x2F;musicbrainz_rs&#x2F;blob&#x2F;648215ad5e7661ac48016c9627507818c8345928&#x2F;examples&#x2F;fetch_release_coverart.rs&quot;&gt;fetch_release_coverart.rs&lt;&#x2F;a&gt;.
&lt;br&gt;&lt;br&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;auto-retries&quot;&gt;Auto-retries&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;The library will now auto-retry on queries failed due to rate-limiting by the MusicBrainz
servers. In case of a failed query due to rate-limiting, we&#x27;re returned with the time duration in the
response header until the next query would be accepted the MusicBrainz servers. The library
now automatically sleeps the current thread for this received duration and retries the
query by default. The default is set to 2 retries per failed query and this can be changed with:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;musicbrainz_rs::config::set_default_retries(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;ve also previously had trouble running our test-suite due to this. Our test-suite is
constantly making queries to MusicBrainz servers and the queries would start to fail after
a while. So we had ugly hacks in-place to get our test-suite to pass. We had introduced
a one second sleep in our test-suite after every call to the MusicBrainz servers to not trigger
their rate-limitations, and this had been greatly increasing our test-suite run times. I&#x27;m glad
this is no longer the case after introducing auto-retries!
&lt;br&gt;&lt;br&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;relationship-includes&quot;&gt;Relationship Includes&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I mentioned earlier about how we can request for additional information when making queries
by passing the &lt;code&gt;?inc=&lt;&#x2F;code&gt; subquery parameter. Relationship includes can be considered as one such
category of parameters that can be passed to &lt;code&gt;?inc=&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;ve been involved with refactoring the already implemented subquery include parameters
and further implemented the relationship include parameters. This involved some manual
work on my part to figure out what include parameters are accepted by what entities
(since this doesn&#x27;t seem to have been documented &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;doc&#x2F;MusicBrainz_API#Relationships&quot;&gt;in the docs&lt;&#x2F;a&gt;
and I couldn&#x27;t find it anywhere else either). Anyway, requests to relationship
includes can now be made simliar to how subquery includes are requested for:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;(This hasn&#x27;t been merged into the main codebase yet, we&#x27;ll get there soon!)&lt;&#x2F;del&gt; We&#x27;re there now!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ninja_tune = Label::fetch()
&lt;&#x2F;span&gt;&lt;span&gt;        .id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;dc940013-b8a8-4362-a465-291026c04b42&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .with_recording_relations()
&lt;&#x2F;span&gt;&lt;span&gt;        .execute()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; relations = ninja_tune.relations.unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(relations
&lt;&#x2F;span&gt;&lt;span&gt;        .iter()
&lt;&#x2F;span&gt;&lt;span&gt;        .any(|rel| rel.relation_type == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;phonographic copyright&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;this-is-fun&quot;&gt;This is fun!&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been enjoying so far. This GSoC has given me a chance to extend the reaches of MusicBrainz
to Rust and also get better at writing Rust code, something that I&#x27;ve always been excited about
ever since I first tried it out. :P&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m happy I got this opportunity. Thank you, Paul, and the MetaBrainz Foundation!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Poor man&#x27;s USB sound card</title>
        <published>2020-06-30T00:00:00+00:00</published>
        <updated>2020-06-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2020/06/30/poor-mans-usb-sound-card/"/>
        <id>https://ritiek.github.io/2020/06/30/poor-mans-usb-sound-card/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2020/06/30/poor-mans-usb-sound-card/">&lt;p&gt;Consider a situation where a Linux desktop is missing or has a broken 3.5mm audio jack. Yet you need to somehow
connect an external audio output device to the 3.5mm jack. If you have an Android phone with 3.5mm jack intact,
there is a way to stream audio from your Linux desktop to the 3.5mm audio jack on the Android phone. If you don&#x27;t
mind the 0.2s audio delay, follow the steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setup pulseaudio on Linux desktop to &lt;a href=&quot;https:&#x2F;&#x2F;superuser.com&#x2F;a&#x2F;750324&#x2F;693992&quot;&gt;stream audio to a TCP port&lt;&#x2F;a&gt; on
0.0.0.0. Just in case this linked answer goes down, you basically need to load the pulseaudio tcp module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ pactl load-module module-simple-protocol-tcp rate=48000 format=s16le channels=2 source=&amp;lt;source_name_here&amp;gt; record=true port=8000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.kaytat.simpleprotocolplayer&quot;&gt;Simple Protocol Player&lt;&#x2F;a&gt;
on to your Android phone.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Connect your Android phone to your Linux desktop with a USB cable and turn on USB tethering, so the phone
and Linux desktop are on the same network and therefore can communicate via TCP (being on the same WiFi network
works too but audio lag was too much for my case).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Note your IP address for this newly available USB ethernet adapter on your Linux desktop with &lt;code&gt;ifconfig&lt;&#x2F;code&gt;, and
enter it in the Simple Protocol Player app on your Android with the port &lt;code&gt;8000&lt;&#x2F;code&gt; which was mentioned
when we loaded the pulseaudio tcp module.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That should be it. You should now be able to stream audio from the Linux desktop to your Android phone in
near-real-time.&lt;&#x2F;p&gt;
&lt;p&gt;If you noticed, this method didn&#x27;t require authentication. So when you&#x27;re done, unload the pulseaudio tcp module
on the Linux machine so strangers won&#x27;t connect:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ pactl unload-module `pactl list | grep tcp -B1 | grep M | sed &amp;#39;s&#x2F;[^0-9]&#x2F;&#x2F;g&amp;#39;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Installing Pop!_OS on an unsupported 32-bit UEFI hardware</title>
        <published>2020-04-18T00:00:00+00:00</published>
        <updated>2020-04-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2020/04/18/installing-popos-on-an-unsupported-32-bit-uefi-hardware/"/>
        <id>https://ritiek.github.io/2020/04/18/installing-popos-on-an-unsupported-32-bit-uefi-hardware/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2020/04/18/installing-popos-on-an-unsupported-32-bit-uefi-hardware/">&lt;p&gt;I&#x27;ve been using Linux Mint for quite a while (like past 4 years) and wanted some change.
Pop!_OS seemed another good Ubuntu-based distro so I decided to try it out. However,
there is a problem. Since the hardware I use is 32-bit only UEFI without legacy BIOS.
Pop!_OS on the otherhand ships ISOs for use only with 64-bit UEFIs and legacy BIOS (but
disregards support for 32-bit UEFI and that&#x27;s bad since my hardware is 32-bit UEFI only).
My laptop is CanvasLapbookL1160, one in baytrail series (Intel(R) Atom(TM) CPU  Z3735F @ 1.33GHz).
It initially came with Windows 10 without any apparent issues at all, but it ran slow and
was, well, Windows. Micromax probably had modified Windows in a way such that it detected
all hardware peripherals correctly. Since, I had same issues (as I mention later) even if
I manually re-installed Windows 10, as I did with Linux distros.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;aiIVZGN.png&quot; width=&quot;350&quot;&gt;
  &lt;br&gt;&lt;i&gt;Here&#x27;s how the machine looks like&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t really blame the developers for not supporting 32-bit UEFI. This is not just the
case with Pop!_OS but with pretty much almost all major distributions out there. I read
somewhere that Fedora did support such machines back in 2018, although I&#x27;m not sure of what
the current status is. 32-bit UEFI machines are pretty rare in 2020 and I understand that
supporting such a minority of users is not worth the developer time spent, atleast as of
now. The situation was probably different a few years back. The more we wait to support these
devices, the lesser sense it makes to support these devices.&lt;&#x2F;p&gt;
&lt;p&gt;With what I write here, I expect to document how to get stuff working on such machines in
the hope that this would atleast be useful to my future-self and people who are a bit familiar
with how Linux works. Move on by assuming that there will sometimes be hardware peripherals
that will fail to be recognized properly (such as WiFi, sound output) and random irrecoverable
freezes.  I suffer from both these without a solution as of yet. I also happen to be hit by
some other unexplained stuff as I&#x27;ll mention later. Anyway, since I&#x27;m writing all of this
from memory, expect some very specific details to lack in precision.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linux-mint-2-years-ago&quot;&gt;Linux Mint (2 years ago)&lt;&#x2F;h2&gt;
&lt;p&gt;Two years back when I installed Linux Mint 19 on this same hardware, the situation wasn&#x27;t
as bad as it is now. You&#x27;d use &lt;code&gt;dd&lt;&#x2F;code&gt; or &lt;code&gt;cat&lt;&#x2F;code&gt; from coreutils or specialized tools such as
Rufus or UNetbootin to write the ISO image on to a USB device. When trying to boot this USB
device on a 32-bit UEFI machine you&#x27;d notice that it won&#x27;t even show up as a boot device.
At this point, the first response would be to put a &lt;code&gt;bootia32.efi&lt;&#x2F;code&gt; in &lt;code&gt;&#x2F;efi&#x2F;boot&#x2F;&lt;&#x2F;code&gt; on your
EFI partition on your USB stick. However, if you wrote the ISO image on the USB in dd-mode
(as termed in Rufus) (that is using &lt;code&gt;dd&lt;&#x2F;code&gt; or &lt;code&gt;cat&lt;&#x2F;code&gt; or dd-mode in Rufus) you now won&#x27;t be
able to add or remove files from your USB stick since the USB stick would be stuck in
read-only mode. I haven&#x27;t come across a way to make it writable again except completely
formatting it in such a case.&lt;&#x2F;p&gt;
&lt;p&gt;UEFI firmware looks for all &lt;code&gt;FAT&lt;&#x2F;code&gt; formatted partitions and attempts to look for boot files
stored in &lt;code&gt;&#x2F;EFI&#x2F;boot&lt;&#x2F;code&gt; under these partitions. Now what &lt;code&gt;cat&lt;&#x2F;code&gt;, &lt;code&gt;dd&lt;&#x2F;code&gt; and Rufus do is to create
one &lt;code&gt;FAT32&lt;&#x2F;code&gt; partition for UEFI boot and another one as &lt;code&gt;ext4&lt;&#x2F;code&gt; for core image files. This is
because of the way how it is actually defined in most distro ISOs. I&#x27;ve found an easier way to
keep the disk writable and avoid such utilities is to create a single &lt;code&gt;FAT32&lt;&#x2F;code&gt; partition
consisting of both the boot and core image files.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s only maintain a single partition making things a little easier. I&#x27;d first locally mount
the ISO image and then simply copy-paste the mounted files on to a USB stick which has been
first formatted as &lt;code&gt;FAT32&lt;&#x2F;code&gt;.
The USB stick will still be writable at this point and you can now copy &lt;code&gt;bootia32.efi&lt;&#x2F;code&gt; to
&lt;code&gt;&#x2F;EFI&#x2F;boot&#x2F;&lt;&#x2F;code&gt; as previously mentioned. With this I was successfully be able to boot into live
Linux Mint from my USB stick. At this point, one should notice all the hardware stuff that
fails to be recognized. Some things to think of: whether battery percentage reduces when not
plugged-in?  If charger plugged-in display indicator shows correctly? WiFi works? Brightness
controls?  Sound output from speakers and 3.5mm jack? Is trackpad being detected as an external
mouse (that means no two-finger scrolling and &quot;disable mouse when typing&quot; does not work)? Does
deep-sleep work? If you&#x27;re hitting some of these issues, I&#x27;ve mostly had more luck with
learning to live with them than looking for solutions on the Internet.&lt;&#x2F;p&gt;
&lt;p&gt;It might be possible to write a custom driver or a kernel module to fix an issue but that&#x27;s
beyond me.  In any case, you&#x27;d normally select the partition where you want to install Linux
Mint and make sure that you create and EFI partition with ~200MB if it doesn&#x27;t already exist,
and next, next. Everything would go fine until at the end of the installation it mentions
that it failed to install a boot loader. You could now reboot and see that our newly installed
Linux Mint isn&#x27;t available in the boot menu! I know of two ways to fix this from here:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;method-1&quot;&gt;Method 1&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;d reboot your machine when the failure message pops up. Now you&#x27;d again select your
bootable USB drive, but this time go to advanced options and it should mention something
about accessing the GRUB command-line by pressing &lt;code&gt;c&lt;&#x2F;code&gt; key on the keyboard. Do that and it
will drop us to a shell. Here we&#x27;ll attempt to manually load the kernel image and the initial
RAM disk. The first step is to recognize the drive and partition where you installed Linux
Mint to. This can be done by using &lt;code&gt;ls&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;&#x2F;assets&#x2F;rxACrpQ.jpeg&quot; width=&quot;350&quot;&gt;
  &lt;br&gt;&lt;i&gt;The GRUB command-line&lt;&#x2F;i&gt;
&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls (hd0)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Is this what I need? Nope.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls (hd0,gpt1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Is this what I need? Yup!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once you&#x27;ve recognized your drive and partition, note its UUID by running &lt;code&gt;ls -l&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; (hd0,gpt1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;lt;stuff&amp;gt; UUID 46868037-2224-4887-adfe-d1db9fe93366 &amp;lt;stuff&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The UUID is the the alphanumeric characters such as in the above case, the UUID is:
&lt;code&gt;46868037-2224-4887-adfe-d1db9fe93366&lt;&#x2F;code&gt;. Sometimes &lt;code&gt;ls&lt;&#x2F;code&gt; might not accept the &lt;code&gt;-l&lt;&#x2F;code&gt; parameter.
In such a case, omit &lt;code&gt;root=UUID=6868037-2224-4887-adfe-d1db9fe93366&lt;&#x2F;code&gt; from the below command.
Now, we load the kernel image with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; linux (hd0,gpt1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;vmlinuz.efi&lt;&#x2F;span&gt;&lt;span&gt; root=UUID=6868037-2224-4887-adfe-d1db9fe93366
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;replace the above alphanumerics with your obtained UUID.&lt;&#x2F;p&gt;
&lt;p&gt;Now load the initial RAM disk:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; initrd &#x2F;(hd0,gpt1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;initrd.gz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The filenames may not exactly be &lt;code&gt;vmlinuz.efi&lt;&#x2F;code&gt; or &lt;code&gt;initrd.gz&lt;&#x2F;code&gt; but should closely resemble
them. So, try loading whatever seems the closest filename to you.&lt;&#x2F;p&gt;
&lt;p&gt;Now do&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If your &lt;code&gt;ls&lt;&#x2F;code&gt; didn&#x27;t support &lt;code&gt;-l&lt;&#x2F;code&gt; option and you omitted the UUID, the kernel will fail
to load and will drop you into a busybox shell which can now be used to read the all the
connected devices UUIDs by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;disk&#x2F;by-uuid&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If still not sure here what device and partition you installed Linux Mint, try &lt;code&gt;mkdir&lt;&#x2F;code&gt;
and mount the device files from &lt;code&gt;&#x2F;dev&#x2F;sdXY&lt;&#x2F;code&gt; on to this directory and then &lt;code&gt;ls&lt;&#x2F;code&gt;. Either
way you should now have the correct UUID. Click a picture of it or note it down and
repeat the above mentioned steps but now by entering the UUID when loading the kernel
image.&lt;&#x2F;p&gt;
&lt;p&gt;It would now successfully boot into the installed Linux Mint and now we fix the boot menu
so it shows up in the boot menu.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install grub-efi-ia32-bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check which partition on your hard drive is your EFI partition. I&#x27;d assume &lt;code&gt;&#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt;
here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir &#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;sda2 &#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo grub-install &#x2F;dev&#x2F;sda2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --efi-directory&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the menus:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo update-grub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you get the command-not-found error on &lt;code&gt;update-grub&lt;&#x2F;code&gt;, run this instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grub-mkconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;boot&#x2F;grub&#x2F;grub.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything should be fixed now. Reboot and check your boot menu.&lt;&#x2F;p&gt;
&lt;p&gt;This is a &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@realzedgoat&#x2F;a-sorta-beginners-guide-to-installing-ubuntu-linux-on-32-bit-uefi-machines-d39b1d1961ec&quot;&gt;guide&lt;&#x2F;a&gt;
that was immensly helpful to me back when I was new to this stuff and installing
Linux Mint, so you should notice some similarities above and in the mentioned guide.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;method-2&quot;&gt;Method 2&lt;&#x2F;h3&gt;
&lt;p&gt;That was the first way, but in such a case today I&#x27;ll probably use this method.
The second way of fixing this boot menu is via chroot.
When Linux Mint errors on saying that the bootloader failed to install. Do not reboot.
Or if you did reboot, boot back into the live USB again.  Now open a terminal and
check where the new Linux Mint got installed. I&#x27;d assume in &lt;code&gt;&#x2F;dev&#x2F;sda3&lt;&#x2F;code&gt;. Do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;sda3 &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F; &#x2F;mnt&#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys &#x2F;mnt&#x2F;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc &#x2F;mnt&#x2F;proc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo chroot &#x2F;mnt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you run the commands mentioned in the 1st method starting from the &lt;code&gt;apt install grub-efi-ia32-bin&lt;&#x2F;code&gt;
part in the chroot jail. Ok, should be fixed after that&#x27;s done. Reboot and check.&lt;&#x2F;p&gt;
&lt;p&gt;At this point, I&#x27;d be able to normally boot into my installed Linux Mint. However, you&#x27;d see
those hardware peripherals that didn&#x27;t work in the live boot don&#x27;t work here either. That&#x27;s
expected. However, my hardware has yet another problem. If I upgrade my kernel version to 4.17
or anything later (I&#x27;ve randomly tried versions upto 5.6), my input devices such as keyboard
and mouse won&#x27;t be detected, and the USB ports aren&#x27;t supplied power. The last kernel version
that atleast allows me to keep the machine usable is 4.16.18. However, I still face other
issues with 4.16.18 and lower versions of kernel. These issues include - trackpad offers no
2-finger scroll or middle click capability. It simply works as a 2-button mouse. Battery
is always stuck at 50% and shows no plugged-in indicator. There were other things as I&#x27;ve
mentioned in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;dotfiles&#x2F;tree&#x2F;master&#x2F;CanvasLapbookL1160&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, that&#x27;s for the Linux Mint part from 2 years ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pop-os&quot;&gt;Pop!_OS&lt;&#x2F;h2&gt;
&lt;p&gt;I was able to successfully get Pop!_OS 19.10 working. Although, the kernel still suffers from the
same issues I mentioned in the last paragraph. Getting Pop!_OS to work was harder in comparision
to Linux Mint. I&#x27;d normally download the ISO and copy the files on my USB stick on a &lt;code&gt;FAT32&lt;&#x2F;code&gt;
formatted partition. I&#x27;ve noticed that Pop!_OS contains some core image files that symlink to
other directories in the image and &lt;code&gt;FAT&lt;&#x2F;code&gt; systems doesn&#x27;t support symlinks. So, in such a case
I&#x27;d create a complete copy of the file&#x2F;directory and replace that by its corresponding symlink.
Done that. Now it doesn&#x27;t show up in the boot menu? Ok, put in a &lt;code&gt;bootia32.efi&lt;&#x2F;code&gt;. However,
simply doing this didn&#x27;t succeed this time, it kept getting stuck somewhere along doing &lt;code&gt;casper-prefetch&lt;&#x2F;code&gt;
while loading the kernel and would then drop me into a busybox shell, as I could see on my screen.
This USB did boot up on other my other machine with a 64-bit UEFI. So on such a machine, I checked
the default kernel version that Pop!_OS comes with using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;when live booting the USB on a 64-bit UEFI. It was 5.3.
This was higher than the maximum kernel version my 32-bit UEFI hardware is known to work with
(4.16.18).&lt;&#x2F;p&gt;
&lt;p&gt;I guessed that the reason it failed to boot on my 32-bit UEFI hardware was simply the
unsupported kernel version having a hard time determining stuff on my machine. I tried to get an
older version of kernel up with Pop!_OS. So going with that, I attempted to replace &lt;code&gt;vmlinuz&lt;&#x2F;code&gt; (the kernel image) and
&lt;code&gt;initrd&lt;&#x2F;code&gt; (initial RAM disk) files that come by default in Pop!_OS&#x27;s ISO, with their older versions respectively
from the installed Linux Mint (&lt;code&gt;&#x2F;boot&#x2F;vmlinuz&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;boot&#x2F;initrd&lt;&#x2F;code&gt;) which is currently living in my hard disk
(the one I talked about in the previous section).  Although I don&#x27;t remember what error it came up
with after the replacement when the kernel was being initialized, only that it didn&#x27;t work. I thought
perhaps there is a difference between these files in a live USB and the ones from a fully-installed
Linux. So, I attempted to replace the kernel image and initial RAM disk image again, but this
time from a Linux Mint 19 ISO image which by default comes with a kernel version &amp;lt; 4.17, that means the
kernel from such an ISO image would work with my hardware. A good friend of mine had a Linux Mint 19 ISO image
laying around. so I asked him to send me the needed &lt;code&gt;vmlinuz&lt;&#x2F;code&gt; and &lt;code&gt;initrd&lt;&#x2F;code&gt; files from his ISO. I
replaced them with what came with Pop!_OS and attempted to boot again. It still didn&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;I had another idea. I had an extra USB stick and I live booted Pop!_OS on a 64-bit UEFI and
installed it on to this extra USB stick. Make sure the partition size you create for the full-usb
installation is smaller than the space you wish to allocate when in future you install it onto
your actual hard drive parition (this will be useful later in the post). The installation was a
success on this 64-bit UEFI machine. I wanted to be convinced whether it was the kernel version
issue that caused failure to boot on my 32-bit UEFI. I plugged the USB with fully-installed
Pop!_OS which I just made (not the one with live!) into my 32-bit UEFI machine. I already had
Linux Mint installed on the machine, so I went into the GRUB command-line by pressing &lt;code&gt;c&lt;&#x2F;code&gt; key
while on the advanced boot options.  I determined the UUID of the USB stick which contained the
full-install of Pop!_OS using &lt;code&gt;ls -l&lt;&#x2F;code&gt; on the available disks. Next, I loaded the kernel and initial
RAM disk from my Linux Mint and set the root partition pointing towards my fully-installed Pop!_OS
USB. If everything went fine I&#x27;d be using the kernel version from my Linux Mint but the root partition
would be set to Pop!_OS meaning that I would essentially be running Pop!_OS with my
hardware-supported kernel. I did this in GRUB command-line: (Assume &lt;code&gt;(hd0,gpt3)&lt;&#x2F;code&gt; to be my Linux Mint
installation partition. Also replace the UUID below with what you got from &lt;code&gt;ls -l&lt;&#x2F;code&gt; above)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; linux (hd0,gpt3)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;vmlinuz&lt;&#x2F;span&gt;&lt;span&gt; root=UUID=5839037-2264-4487-adfe-d1cb9fe93366
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; initrd (hd0,gpt3)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;initrd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And it worked! I was now in my USB with full-install of Pop!_OS running an older kernel version!
WiFi and sound didn&#x27;t work here since I believe the kernel was attempting to load modules from
Pop!_OS&#x27;s partition and there were none present for this kernel version in there. So, I booted
back into my Linux Mint and chrooted into Pop!_OS&#x27;s full-installed USB stick. The kernel version
I wanted wasn&#x27;t available in default apt repositories so I downloaded the
&lt;a href=&quot;https:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.16.18&#x2F;&quot;&gt;necessary packages&lt;&#x2F;a&gt; myself which were:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;linux-headers-4.16.18-041618_4.16.18-041618.201806252030_all.deb
&lt;&#x2F;span&gt;&lt;span&gt;linux-headers-4.16.18-041618-generic_4.16.18-041618.201806252030_amd64.deb
&lt;&#x2F;span&gt;&lt;span&gt;linux-image-unsigned-4.16.18-041618-generic_4.16.18-041618.201806252030_amd64.deb
&lt;&#x2F;span&gt;&lt;span&gt;linux-modules-4.16.18-041618-generic_4.16.18-041618.201806252030_amd64.deb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and installed all these packages with &lt;code&gt;dpkg -i&lt;&#x2F;code&gt; onto my chrooted Pop!_OS.&lt;&#x2F;p&gt;
&lt;p&gt;Next to see if this older kernel did install as expected I rebooted and went into GRUB
command-line: (&lt;code&gt;(hd1,gpt2)&lt;&#x2F;code&gt; is my fully-installed Pop!_OS USB stick and the one I chrooted into
in previous step)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; linux (hd1,gpt2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;vmlinuz-4.16.18&lt;&#x2F;span&gt;&lt;span&gt; root=UUID=5839037-2264-4487-adfe-d1cb9fe93366
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; initrd (hd1,gpt2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;boot&#x2F;initrd.4.16.18
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; boot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, boot was successful. WiFi and sound is working too! With all this, I think I was right in
guessing that it was the newer kernel version that came by default with Pop!_OS that my hardware
couldn&#x27;t handle it. Either way, I still had to get Pop!_OS installed onto my main hard disk.
The problem was still that I couldn&#x27;t get the live USB to boot on my 32-bit UEFI machine
even if I replaced the kernel image and initial RAM disk image.&lt;&#x2F;p&gt;
&lt;p&gt;However, we don&#x27;t need to do that now! I believed that now I could simply &lt;code&gt;dd&lt;&#x2F;code&gt; or &lt;code&gt;cat&lt;&#x2F;code&gt; the
fully-installed Pop!_OS partition from my USB stick onto my hard disk&#x27;s partition, and then fix
up my boot menus.  This should act similar to the way as if I installed Pop!_OS onto my hard
disk from a live USB.  So, I booted into Mint backed up anything I needed. Backups done, I then
took another USB stick (the third one) and wrote an image from the full-usb installed to this
third USB stick:
(&lt;code&gt;&#x2F;dev&#x2F;sdb2&lt;&#x2F;code&gt; is your fully-installed USB)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;dev&#x2F;sdb2 &amp;gt; &#x2F;media&#x2F;ritiek&#x2F;3rd_usb_stick&#x2F;full_install.img
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now then I booted into my fully-installed Pop!_OS USB and wrote this image onto my Linux Mint
partition. I wanted to replace Linux Mint with Pop!_OS so I chose the same partition, you choose
a different one if you wish to keep Mint:
(&lt;code&gt;&#x2F;dev&#x2F;sda3&lt;&#x2F;code&gt; is my hard disk partition I want to write Pop!_OS over to)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cat &#x2F;media&#x2F;ritiek&#x2F;3rd_usb_stick&#x2F;full_install.img &amp;gt; &#x2F;dev&#x2F;sda3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should kill my Mint installation and replace it with Pop!_OS. Now we need to fix up the
boot menu so this Pop!_OS shows up in the boot menu. Do not reboot and instead first chroot
into hard disk partition where you wrote the image:
(&lt;code&gt;&#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt; here is my hard disk&#x27;s EFI partition)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;sda3 &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F; &#x2F;mnt&#x2F;dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;sys &#x2F;mnt&#x2F;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bind&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;proc &#x2F;mnt&#x2F;proc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo chroot &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir &#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount &#x2F;dev&#x2F;sda2 &#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo grub-install &#x2F;dev&#x2F;sda2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --efi-directory&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;boot&#x2F;EFI
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Update the menus:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo update-grub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you get the command-not-found error on &lt;code&gt;update-grub&lt;&#x2F;code&gt;, run this instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; grub-mkconfig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;boot&#x2F;grub&#x2F;grub.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is all! You should now be able to reboot, disconnect all attached USB sticks and Pop!_OS
should show up in your hard disk&#x27;s boot menu! Try booting it! Although I still face the same
aftermath issues as I did in Linux Mint.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;&#x2F;strong&gt; I was able to atleast fix my freezing issue from here &lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;a&#x2F;796484&#x2F;694881&quot;&gt;https:&#x2F;&#x2F;askubuntu.com&#x2F;a&#x2F;796484&#x2F;694881&lt;&#x2F;a&gt;.
This seems to be an issue in lower kernel versions. Like the linked answer mentions, I had to
append &lt;code&gt;intel_idle.max_cstate=1&lt;&#x2F;code&gt; to &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;&#x2F;code&gt; section in &lt;code&gt;&#x2F;etc&#x2F;default&#x2F;grub&lt;&#x2F;code&gt;.
And then update my boot configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo grub-update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whoa. This freezing issue seems to be specific to baytrail machines. There has been a kernel bug
report filed on &lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.kernel.org&#x2F;show_bug.cgi?id=109051&quot;&gt;https:&#x2F;&#x2F;bugzilla.kernel.org&#x2F;show_bug.cgi?id=109051&lt;&#x2F;a&gt;
with a very good number of people affected! Reading the responses, it looks like Intel has been
messing things up. I&#x27;m at this also pretty sure the other issues I face are specific to baytrail too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;end&quot;&gt;End&lt;&#x2F;h2&gt;
&lt;p&gt;This is how it had to be done on my laptop. It is very unlikely that the same exact procedure
would work as it is on a different machine and for a different OS. So, it is important to understand
what&#x27;s going on above. I&#x27;ll probably forget this stuff soon too so I just wanted to throw this in
somewhere as soon as possible.&lt;&#x2F;p&gt;
&lt;p&gt;I know that 4.16.18 is a pretty old kernel but I&#x27;d still be willing for the compromise with using
it than having stayed put with the Windows that came pre-installed with this machine.&lt;&#x2F;p&gt;
&lt;p&gt;TL;DR Do not a get yourself a baytrail machine if you can avoid it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Modifying memory of a running process in Linux</title>
        <published>2019-06-26T00:00:00+00:00</published>
        <updated>2019-06-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2019/06/26/modifying-memory-of-a-running-process-in-linux/"/>
        <id>https://ritiek.github.io/2019/06/26/modifying-memory-of-a-running-process-in-linux/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2019/06/26/modifying-memory-of-a-running-process-in-linux/">&lt;p&gt;Everything said in this post is based on my half-understanding of how memory works,
especially in Linux. There are certainly going to be parts in this post that are misunderstood
by me. Don&#x27;t rely on this post for your homework and take everything in this post with a
grain of salt. However, I hope to continue to refine the content in this post as I understand
more about how a computer works. Consider this as a disclaimer. That said, let&#x27;s begin!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been trying out 6502 and x86 Assembly to learn some basic reverse engineering and also
to learn think in these low-level programming languages, hopefully to understand more of how
everything works under-the-hood. So I thought what better than to pun some other process&#x27;s
memory. I figured I&#x27;ll try to modify some stuff assigned to memory by one process from some second
process. I know Windows has tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cheat-engine&#x2F;cheat-engine&quot;&gt;Cheat Engine&lt;&#x2F;a&gt;
while Linux has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scanmem&#x2F;scanmem&quot;&gt;scanmem&lt;&#x2F;a&gt;.
I still wanted to create my own tiny little program which would be enough to demonstrate how
these big tools worked at their heart.&lt;&#x2F;p&gt;
&lt;p&gt;Most modern Operating Systems have &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Address_space_layout_randomization&quot;&gt;ASLR (Address Space Layout Randomization)&lt;&#x2F;a&gt;
turned on
by default which can help prevent many &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Buffer_overflow&quot;&gt;buffer overflow&lt;&#x2F;a&gt;
and code injection attacks. These
attacks if successful could possibly allow the user to gain access to sensitive information
not intended for access to the end user. Although, I&#x27;ve tried Cheat Engine and to my knowledge
popular debuggers still allow for a way to access and modify the disassembled code of a binary
when loaded into memory. They also have a way to watch for code whenever a specified memory
location is accessed by the concerned process, so I&#x27;m not completely sure whether these
debuggers somehow workaround ASLR or if this completely unrelated. Irrespective of this, to
make things not more complicated, we&#x27;ll already know the address of the memory location we wish
to modify, as you&#x27;ll see later.&lt;&#x2F;p&gt;
&lt;p&gt;From now on, let&#x27;s refer to a primary innocent process as Process A and the secondary process
which attempts to hack into the memory of Process A as Process B. In Linux, we have a system call
&lt;a href=&quot;http:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;ptrace.2.html&quot;&gt;&lt;code&gt;ptrace&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which acts as a middle man between
Process B and the memory of Process A. One cannot
directly read or write to the memory of another independent process without ptrace for some
reason I don&#x27;t understand. My current guess is that it&#x27;s there so that a process doesn&#x27;t
unintentionally messes up with the memory of some other process. So, if you see someone with ptrace
it&#x27;s probably because they ought to either save the world from extinction or be the very cause
itself. Similar in Windows you have &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-readprocessmemory&quot;&gt;&lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-writeprocessmemory&quot;&gt;&lt;code&gt;WriteProcessMemory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
functions available in Windows API acting as the middle man.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say we have this simple C code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; process_a.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, n);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;n);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, n);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;n);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All it does is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assign a variable a value&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Display the variable&#x27;s value and its location in memory&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sleep the main thread for a while&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Display the variable&#x27;s value and its location in memory again&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let&#x27;s run it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; gcc process_a.c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; process_a &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;process_a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x7fffcfd52924
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x7fffcfd52924
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is our Process A. Our goal is to have a Process B change the value of the assigned variable to
something like &lt;code&gt;20&lt;&#x2F;code&gt; while the main thread is sleeping. If we succeed, it should show us the value &lt;code&gt;20&lt;&#x2F;code&gt;
after waking up from sleep while the memory location should remain the same.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve only tried this on Linux so that&#x27;s what I&#x27;ll be talking about. As I mentioned earlier,
you need to fire the ptrace system call and you can do that natively via C. So, what we&#x27;ll
do is write another program which will act as Process B. To overwrite the memory of another process
in Linux, you need to know three things - the PID of the Process A, the memory location to be
modified, and obviously the data you need to overwrite with. It&#x27;s easy to know the PID of a process
in Linux, and we can know the memory location of the variable since our Process A prints the variable&#x27;s
memory location itself. The data can be anything, I&#x27;ll use &lt;code&gt;20&lt;&#x2F;code&gt; for the purpose of this post.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how we&#x27;ll use &lt;code&gt;ptrace&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; process_b.c
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;ptrace.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5831&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*address = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x7fffcfd52924&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptrace&lt;&#x2F;span&gt;&lt;span&gt;(PTRACE_ATTACH, pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptrace&lt;&#x2F;span&gt;&lt;span&gt;(PTRACE_POKEDATA, pid, address, data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pokedata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ptrace&lt;&#x2F;span&gt;&lt;span&gt;(PTRACE_DETACH, pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code is pretty self-explanatory - you attach to the process, write data to a memory address and
detach.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to take care is that the PID and the memory of any process A are allotted at execution.
As far as I know, one cannot predict the PID and where in memory a process will go live, before execution
of the concerned program. There are probably ways to automate this after the concerned process is
executed but let&#x27;s avoid complicating the code. So here&#x27;s our plan, we&#x27;ll execute the Process A and
then we&#x27;re going to grab its PID manually and update our Process B&#x27;s source accordingly. Finally,
we&#x27;re going to compile and execute our Process B. If we are fast enough and make it through all
of this while Process A is in the middle of its sleep, we would have successfully overwritten Process
A&#x27;s memory and it should be visible when it wakes up from sleep to display the value!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do it step wise:&lt;&#x2F;p&gt;
&lt;p&gt;In a terminal, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;process_a &amp;amp;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should get something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 32555
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt;  + 32555 running    .&#x2F;process_a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x7fffcfd52924
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main thread will now go in sleep mode for another 25 seconds. By executing the program in
background mode, we also get its PID, which in my case is &lt;code&gt;32555&lt;&#x2F;code&gt;. We could then just call it
in the foreground with &lt;code&gt;fg&lt;&#x2F;code&gt;. Also, the memory address is &lt;code&gt;0x7fffcfd52924&lt;&#x2F;code&gt;. Now, we have
everything we need to call &lt;code&gt;ptrace&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In a new terminal, edit &lt;code&gt;process_b.c&lt;&#x2F;code&gt;&#x27;s variables with what you got from above. For me, I&#x27;ll replace
the variables with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32555&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*address = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x7fffcfd52924&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now compile and execute the code with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ gcc process_b.c -o process_b &amp;amp;&amp;amp; sudo .&#x2F;process_b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Only root can modify another process&#x27;s memory, so you&#x27;ll need &lt;code&gt;sudo&lt;&#x2F;code&gt; to run the executable
generated.&lt;&#x2F;p&gt;
&lt;p&gt;If everything goes fine and you were able to make it this far while Process A was asleep, you
should get output similar to this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attach:&lt;&#x2F;span&gt;&lt;span&gt; Success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pokedata:&lt;&#x2F;span&gt;&lt;span&gt; Success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;detach:&lt;&#x2F;span&gt;&lt;span&gt; Success
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it! Now when Process A completes its sleep: it should look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt; 32555
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt;  + 32555 running    .&#x2F;process_a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x7fffcfd52924
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0x7fffcfd52924
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***&lt;&#x2F;span&gt;&lt;span&gt; stack smashing detected ***: &amp;lt;unknown&amp;gt; terminated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt;  + 32555 abort      .&#x2F;process_a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yay, The value just got to 20. Awesome!!&lt;&#x2F;p&gt;
&lt;p&gt;Now if you see the last few lines, you&#x27;ll notice this weird error I dunno much about:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;***&lt;&#x2F;span&gt;&lt;span&gt; stack smashing detected ***: &amp;lt;unknown&amp;gt; terminated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[1]&lt;&#x2F;span&gt;&lt;span&gt;  + 32555 abort      .&#x2F;process_a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turns out I got rid of it by simply assigning a pointer to our variable in Process A.
What I mean is replace:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;*ptr = &amp;amp;n;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some reason, this works and I no longer smash the stack while hacking into Process A&#x27;s
memory.&lt;&#x2F;p&gt;
&lt;p&gt;Well, this is the heart of how a memory editor works underneath. One could now imagine
how this can scale into bigger beasts like Cheat Engine and scanmem as I talked in the
first paragraph.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I installed Linux on my USB flash drive!</title>
        <published>2019-05-31T00:00:00+00:00</published>
        <updated>2019-05-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2019/05/31/i-installed-linux-on-my-usb-flash-drive/"/>
        <id>https://ritiek.github.io/2019/05/31/i-installed-linux-on-my-usb-flash-drive/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2019/05/31/i-installed-linux-on-my-usb-flash-drive/">&lt;p&gt;In my university, we mostly have only-Windows computers. What I mean by &quot;only-windows computers&quot; that the computers
have Windows as the only operating system installed on them. Now, I always like to be accompanied by a terminal
with everything I do (even writing this post in a TUI on Linux) and avoid proprietary software whenever possible.
By the way, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cmderdev&#x2F;cmder&quot;&gt;cmder&lt;&#x2F;a&gt; is a pretty good project that adds the missing flakes (like
wget, curl, etc.) to the command-prompt but it doesn&#x27;t change the fact that Windows itself is still closed-source
(atleast as of writing this). Me, being an avid supporter of open-source cannot back down here.&lt;&#x2F;p&gt;
&lt;p&gt;I plotted an evil-plan. I created a live Linux Mint bootable USB (that&#x27;s what I use as my home OS) and told myself
that I would install a copy alongside Windows on each machine I sit in every computer lab. Installing Linux Mint
takes about 15 minutes on these computers in my lab but it got annoying that I would have to later on also
install the compilers, dependencies and other configuration stuff I make home with. And, also sometimes I would
find that someone (other students or staff?) would delete the partition I installed Linux Mint on and thus bring all of
my progress back to zero again. I dunno why or who did that but it sucks. It wasn&#x27;t as if I made Windows unusable on
those machines or ate a lot of hard-drive space (30GB isn&#x27;t really much, ok?) but that was it.&lt;&#x2F;p&gt;
&lt;p&gt;This is beyond to what I would have guessed but looking up I found that I could also make a full install Linux Mint
on the flash drive itself. I&#x27;ve never seen a USB with full installed Linux Mint so this was quite interesting and
I was genuinely surprised when I did this and it worked. I&#x27;ve also tried making a persistent Live Mint bootable
USB but it created too many partitions on the USB that it looked ugly and also it didn&#x27;t offer any login password
protection essential for protecting against non-techie people. Also, the internet and my tests say that
a full install on flash drive is faster to boot than a persistent live flash drive. I haven&#x27;t tested this one
but I guess the read&#x2F;write speed would also probably be a bit faster.&lt;&#x2F;p&gt;
&lt;p&gt;Later, I realized that a USB with fully installed Linux formatted as Ext4 wouldn&#x27;t be recognized by Windows
(unlike persistent live USB, which gets recognized by Windows and allows you to both read &amp;amp; write to the USB). This is a
problem because sometimes I have to copy some general documents and maybe print them. Most students are happy
with Windows and the printing shops in our campus also are Windows. It would be stupid if my USB wouldn&#x27;t be
recognized on such machines. I could carry around another USB formatted as FAT32 or NTFS but there has to be a
better solution. I thought about creating a multipartioned USB with Linux installed on Ext4 formatted parition
and another empty partition formatted as FAT32 for Windows to recognize it. However, it turns out that and earlier
versions of Windows (before Windows 10) would only go through the 1st partition of the USB and mount it if is able
to properly read that partition. Other partitions are completely ignored irrespective of whether the 1st partition
is readable by Windows or not. Windows 10 on the other hand has a small improvement that it will iterate on all
the available partitions, mount the first one it is able to read correctly and ignore the remaining partitions.&lt;&#x2F;p&gt;
&lt;p&gt;Nevertheless, I formatted the 1st partition as FAT32 with enough space to suffice everyday copy-pasting documents
and installed on Linux Mint on the 2nd partition with the remaining space. Everything worked fine, I was able to boot
into Linux Mint and see the FAT32 partition on Windows. I also like this since unexperienced people who get hold
of my flash drive would only see the FAT32 partition on Windows and assume that&#x27;s all the storage the flash drive
has to offer while the partition with Linux on it would essentially stay hidden in Windows! Thanks Windows!&lt;&#x2F;p&gt;
&lt;p&gt;Also, I have a cheap laptop, the ones that come with a 64-bit processor but a 32-bit UEFI (and no legacy BIOS support).
I intially created my bootable USB with legacy BIOS since I have yet to find a use for all the fancy features that
UEFI gives and most machines with 64-bit UEFI also support legacy BIOS boot. Now, if I could get the flash drive to
boot on my cheap laptop I could be done with this. You see 64-bit processor with 32-bit UEFI can be a pain! Linux
Mint does not officially support for 32-bit UEFI. So far only raw Debian and Fedora does AFAIK. I&#x27;ve heard this is a
limitation in the Linux kernel itself, so these OS probably modify the kernel to add support for 32-bit UEFI. Anyway,
I was able to manually create a UEFI bootable partition on my flash drive USB with the help of this beautifully written guide:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@realzedgoat&#x2F;a-sorta-beginners-guide-to-installing-ubuntu-linux-on-32-bit-uefi-machines-d39b1d1961ec&quot;&gt;https:&#x2F;&#x2F;medium.com&#x2F;@realzedgoat&#x2F;a-sorta-beginners-guide-to-installing-ubuntu-linux-on-32-bit-uefi-machines-d39b1d1961ec&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;BUT, turns out that most stuff does not work properly. Sound does not work. Battery percentage won&#x27;t show up.
Touchpad gets recognized as a USB mouse, that means no two-finger scrolling or gestures. And sometimes the operating
system just freezes for eternity. Anyway, I&#x27;m happy that I made it this far and atleast that my flash drive works perfectly
fine with legacy BIOS boot and machines with 64-bit architecture and UEFI.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Synchronizing multimedia playback on different machines</title>
        <published>2019-04-01T00:00:00+00:00</published>
        <updated>2019-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2019/04/01/synchronizing-multimedia-playback-on-different-machines/"/>
        <id>https://ritiek.github.io/2019/04/01/synchronizing-multimedia-playback-on-different-machines/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2019/04/01/synchronizing-multimedia-playback-on-different-machines/">&lt;p&gt;I wanted to synchronize audio playback between different machines so I could
hear the same sound from speakers connected to all my machines in the house.
But before trying out external utilites, I decided to give it a try myself. I
primarily use &lt;a href=&quot;https:&#x2F;&#x2F;mpv.io&#x2F;&quot;&gt;mpv-player&lt;&#x2F;a&gt; for everything multimedia. So, naturally I went on to tinker
if I could somehow synchronize playback on different devices with mpv.&lt;&#x2F;p&gt;
&lt;p&gt;I went ahead with my Laptop and Raspberry Pi and saw they have a pretty noticeable difference in startup times of mpv.
I thought if I could synchronize the startup times of mpv between machines, every other piece of the puzzle would
automatically fall into place, since there is probably no computation lag on my machines when decoding an audio
encoding to be played by the speaker in real-time. I synchronized my
device clocks from an external NTP server and launched mpv with the following params:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mpv https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ixUWy9qdi08 --input-ipc-server=&#x2F;tmp&#x2F;mpvsocket --no-video --pause
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I imagined this would workaround mpv&#x27;s startup time, and once both are ready - I would instruct the
&lt;a href=&quot;https:&#x2F;&#x2F;mpv.io&#x2F;manual&#x2F;stable&#x2F;#json-ipc&quot;&gt;IPC server&lt;&#x2F;a&gt; to unpause the mpv on both my Laptop and Raspberry Pi at the
same time. Boom! We would now have same audio being given off by both the devices. I installed
&lt;a href=&quot;https:&#x2F;&#x2F;www.linuxjournal.com&#x2F;content&#x2F;schedule-one-time-commands-unix-tool&quot;&gt;&lt;code&gt;at&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; tool which allows you to run a
command at a specific time. I added an entry to unpause mpv at a specific time on both devices. Something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ at 20:28
&lt;&#x2F;span&gt;&lt;span&gt;at&amp;gt; echo &amp;#39;{ &amp;quot;command&amp;quot;: [&amp;quot;set_property&amp;quot;, &amp;quot;pause&amp;quot;, &amp;quot;no&amp;quot;] }&amp;#39; | socat - &#x2F;tmp&#x2F;mpvsocket
&lt;&#x2F;span&gt;&lt;span&gt;at&amp;gt; &amp;lt;EOT&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;job 1 at Mon Apr  1 20:28:00 2019
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I tested this but for some reason I would usually end up with reasonable gap between the audio like 1 second or so -
enough for any human ear to detect the out-of-sync audio. I suspect this gap might occur from several reasons, &lt;code&gt;at&lt;&#x2F;code&gt;
command only checks at a gap of every second to see if there is any job. Let&#x27;s say &lt;code&gt;at&lt;&#x2F;code&gt; previously checked at 20:27:59
and 900 milliseconds. The next time it checks for a pending job might be on 20:28:00 and 900 milliseconds. We&#x27;re
already late by 900 milliseconds. I&#x27;m not sure whether this is the case but it could take some investigation.
Second reason might probably be because of the small delays that occur on the Raspberry Pi when executing &lt;code&gt;at&lt;&#x2F;code&gt; and
writing the data with &lt;code&gt;socat&lt;&#x2F;code&gt; to mpv&#x27;s IPC server. The last one would be as simple as the clocks of the two machines
are not really synchronized in the order of milliseconds. Or a combination of these. Anyway, I couldn&#x27;t get it to
work reliably with this approach.&lt;&#x2F;p&gt;
&lt;p&gt;So I gave up, and a bit of looking up on the Internet for external utilities. I tried out one such software mentioned -
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Syncplay&#x2F;syncplay&#x2F;&quot;&gt;Syncplay&lt;&#x2F;a&gt; which supports multiple players and mpv being one of them. &lt;code&gt;make&lt;&#x2F;code&gt;
went without problems. Although, I initially had trouble to get audio-only (since Syncplay is more tailored to video syncing)
output working on my headless Raspberry Pi,
but I found out you could pass additional parameters to the player and disabled the video output (I also created an issue
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Syncplay&#x2F;syncplay&#x2F;issues&#x2F;229&quot;&gt;#229&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ syncplay --no-gui -a syncplay.pl -r randomroom --player-path mpv https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ixUWy9qdi08 -- --no-video --vo=null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On my laptop, I launched the same command without any additional parameters to the player:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ syncplay --no-gui -a syncplay.pl -r randomroom --player-path mpv https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ixUWy9qdi08
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This resulted in mpv running in pseudo GUI mode on my laptop and I could control the player with it (seek, un&#x2F;pause).
Adjusting the playback so would also cause similar changes to the syncplay client instance running on my Pi. It seems
to work pretty well but can sometimes the audio may get out-of-sync. I found that seeking backwards&#x2F;forwards a bit can
help eliminate out-of-sync issues. Syncplay, however, does not seem whether it is intended for such a purpose (of syncing
audio between machines). Its main purpose (as on their GitHub page) seems to mainly focus on video playing so that viewers
can watch the same thing at the same time, as it states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Solution to synchronize video playback across multiple instances of mpv, VLC, MPC-HC, MPC-BE and mplayer2 over the
Internet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Like with most command-line software I find cool, I tried to get Syncplay running on my Android with Termux. However, mpv isn&#x27;t
compiled with Lua support when installed with &lt;code&gt;pkg&lt;&#x2F;code&gt; on Termux and I didn&#x27;t want to go through the trouble of
setting up the toolchain to compile it for Android. Turns out, I just needed to disable loading the Lua script
as in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;syncplay&#x2F;tree&#x2F;mpv-without-lua-support&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;syncplay&#x2F;tree&#x2F;mpv-without-lua-support&lt;&#x2F;a&gt;
and somehow everything turned out to be fine!&lt;&#x2F;p&gt;
&lt;p&gt;Either way, I&#x27;ll keep Syncplay.&lt;&#x2F;p&gt;
&lt;p&gt;I still haven&#x27;t dug in the Syncplay codebase deep enough to understand how everything works yet. It might be
a fun thing to do so in my spare time.&lt;&#x2F;p&gt;
&lt;p&gt;I also found out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;badaix&#x2F;snapcast&quot;&gt;Snapcast&lt;&#x2F;a&gt; (especially tailored to sync audio) to work pretty well
might like it even more than Syncplay for audio syncing purposes! Although, I&#x27;ll still stick to Syncplay for anything video
syncing.
I&#x27;ve done a revised section on syncing audio playback in &lt;a href=&quot;&#x2F;2023&#x2F;06&#x2F;11&#x2F;capturing-and-piping-audio-output-from-a-process-in-linux&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sharing MIDI controllers between Linux machines</title>
        <published>2019-02-25T00:00:00+00:00</published>
        <updated>2019-02-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2019/02/25/sharing-midi-controllers-between-linux-machines/"/>
        <id>https://ritiek.github.io/2019/02/25/sharing-midi-controllers-between-linux-machines/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2019/02/25/sharing-midi-controllers-between-linux-machines/">&lt;p&gt;In the &lt;a href=&quot;&#x2F;2019&#x2F;02&#x2F;18&#x2F;sharing-linux-event-devices-with-other-linux-machines&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt; - I talked about how one can
share input event devices available as &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt;. Lately, I&#x27;ve been also wanting to share my
MIDI keyboard (Yamaha P-45 Digital Piano) so that I can receive and send MIDI events to my Linux machine
without using a cable.&lt;&#x2F;p&gt;
&lt;p&gt;A problem with MIDI keyboards is that they do not show up as an event device in &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;&lt;&#x2F;code&gt;. Instead
on my machine, it is picked up by ALSA and is available via the event file &lt;code&gt;&#x2F;dev&#x2F;snd&#x2F;midiC1D0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is the kind of output I get when I hit some keys on my MIDI keyboard:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat &#x2F;dev&#x2F;snd&#x2F;midiC1D0
&lt;&#x2F;span&gt;&lt;span&gt;2%2242G0H.Q.HGO&amp;#39;M#QOJLMH#JLQ%HQOOTTX*Y&#x2F;V&amp;#39;YVXS,Q0SQJ0H+G,HJGF7D3DFB=D1DB&amp;lt;5&amp;gt;&#x2F;?,@+=+?@=&amp;gt;&amp;lt;&amp;lt;3;&amp;lt;9&amp;lt;9;&amp;lt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some reason, the netevent tool also fails to read this file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ netevent show &#x2F;dev&#x2F;snd&#x2F;midiC1D0
&lt;&#x2F;span&gt;&lt;span&gt;error: failed to query device name: Inappropriate ioctl for device
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I tried some stuff and there&#x27;s this one thing that worked - Piping the output of &lt;code&gt;&#x2F;dev&#x2F;snd&#x2F;midiC1D0&lt;&#x2F;code&gt; from
the host machine to a virtual MIDI device on the client machine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-machine-run-the-commands-on-the-machine-with-whom-you-want-to-share-midi-controller-with&quot;&gt;Client Machine (Run the commands on the machine with whom you want to share MIDI controller with)&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ll need to install timidity on client machine which allows us to create virtual MIDI devices.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo apt install timidity
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The documentation on &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;timidity&quot;&gt;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;timidity&lt;&#x2F;a&gt; is pretty good. I&#x27;ll repeating the
parts useful to us here:&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s try playing some MIDI file to make sure timidity is installed correctly. Download this sample
www.angelfire.com&#x2F;fl&#x2F;herky&#x2F;images&#x2F;because.mid and call timidity to play it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ timidity because.mid
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should hear the sound from your computer speakers.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a timidity server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ timidity -iA
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output of the above command should contain the port it is listening on, something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Opening sequencer port: 128:0 128:1 128:2 128:3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should now also able to see timidity&#x27;s software MIDI ports with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aconnect -o
&lt;&#x2F;span&gt;&lt;span&gt;client 14: &amp;#39;Midi Through&amp;#39; [type=kernel]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;Midi Through Port-0&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 128: &amp;#39;TiMidity&amp;#39; [type=user,pid=3373]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;TiMidity port 0 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    1 &amp;#39;TiMidity port 1 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    2 &amp;#39;TiMidity port 2 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    3 &amp;#39;TiMidity port 3 &amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s again play the MIDI file to make sure the MIDI ports are listening properly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aplaymidi -p 128:0 because.mid
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should hear the MIDI play via your computer speakers.&lt;&#x2F;p&gt;
&lt;p&gt;So far, so good.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll now create a virtual MIDI device which will allow us to pipe MIDI data from the host machine.&lt;&#x2F;p&gt;
&lt;p&gt;Insert the &lt;code&gt;snd-virmidi&lt;&#x2F;code&gt; kernel module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo modprobe snd-virmidi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use aconnect to verify the virtual MIDI device:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aconnect -o
&lt;&#x2F;span&gt;&lt;span&gt;client 14: &amp;#39;Midi Through&amp;#39; [type=kernel]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;Midi Through Port-0&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 20: &amp;#39;Virtual Raw MIDI 1-0&amp;#39; [type=kernel,card=1]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;VirMIDI 1-0     &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 21: &amp;#39;Virtual Raw MIDI 1-1&amp;#39; [type=kernel,card=1]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;VirMIDI 1-1     &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 22: &amp;#39;Virtual Raw MIDI 1-2&amp;#39; [type=kernel,card=1]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;VirMIDI 1-2     &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 23: &amp;#39;Virtual Raw MIDI 1-3&amp;#39; [type=kernel,card=1]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;VirMIDI 1-3     &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;client 128: &amp;#39;TiMidity&amp;#39; [type=user,pid=3373]
&lt;&#x2F;span&gt;&lt;span&gt;    0 &amp;#39;TiMidity port 0 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    1 &amp;#39;TiMidity port 1 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    2 &amp;#39;TiMidity port 2 &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    3 &amp;#39;TiMidity port 3 &amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see some Virtual Raw MIDI devices indicating things are working properly.&lt;&#x2F;p&gt;
&lt;p&gt;Now, connect timidity&#x27;s software port with this virtual MIDI device:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ aconnect 20:0 128:0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should now have this virtual device file as &lt;code&gt;&#x2F;dev&#x2F;snd&#x2F;midiC1D0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try piping the MIDI data from the host machine to this client machine.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure you have a MIDI controller attached to the host machine. We&#x27;ll try to share that MIDI
controller with our client machine.&lt;&#x2F;p&gt;
&lt;p&gt;Run these two commands in separate terminals:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Output data being written to local device file to the host machine
&lt;&#x2F;span&gt;&lt;span&gt;cat &#x2F;dev&#x2F;snd&#x2F;midiC1D0 | ssh user@hostmachine &amp;quot;cat &amp;gt; &#x2F;dev&#x2F;snd&#x2F;midiC1D0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# Output data being written to host device file to local machine
&lt;&#x2F;span&gt;&lt;span&gt;ssh user@hostmachine &amp;quot;cat &#x2F;dev&#x2F;snd&#x2F;midiC1D0&amp;quot; &amp;gt; &#x2F;dev&#x2F;snd&#x2F;midiC1D0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way you can both send and receive MIDI events.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s test whether this setup works.&lt;&#x2F;p&gt;
&lt;p&gt;Install &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linthesia&#x2F;linthesia&quot;&gt;linthesia&lt;&#x2F;a&gt; (A synthesia-like software for Linux):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo apt install linthesia
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it isn&#x27;t available in your apt repositories, you might have to build it from source.
Their GitHub repo page has instructions on compiling.&lt;&#x2F;p&gt;
&lt;p&gt;Add&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;deb http:&#x2F;&#x2F;cz.archive.ubuntu.com&#x2F;ubuntu xenial main universe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to &lt;code&gt;&#x2F;etc&#x2F;apt&#x2F;sources.list&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sudo apt install libgtkglextmm-x11-1.2-dev
&lt;&#x2F;span&gt;&lt;span&gt;$ sudo apt install libgconfmm-2.6-dev
&lt;&#x2F;span&gt;&lt;span&gt;$ sudo apt install libasound2-dev
&lt;&#x2F;span&gt;&lt;span&gt;$ sudo apt install libsqlite3-dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and play the sample MIDI file with linthesia:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ linthesia because.mid
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will open the Linthesia GUI. Select &lt;code&gt;VirMIDI 1-0&lt;&#x2F;code&gt; as both Output Device and Input Device and play
the song.&lt;&#x2F;p&gt;
&lt;p&gt;The sound should now be output from your MIDI controller. Also, try hitting some keys on your MIDI
controller and you should see them being represented in gray color on Linthesia. The delay is very
little even when I tested only on WiFi.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sharing Linux event devices with other Linux machines</title>
        <published>2019-02-18T00:00:00+00:00</published>
        <updated>2019-02-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2019/02/18/sharing-linux-event-devices-with-other-linux-machines/"/>
        <id>https://ritiek.github.io/2019/02/18/sharing-linux-event-devices-with-other-linux-machines/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2019/02/18/sharing-linux-event-devices-with-other-linux-machines/">&lt;p&gt;In Linux machines, &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; are special files known as devices files. These files act
as a middle man between an application software and the kernel to interact with the hardware input
devices connected to the system. To know what devices are connected to your system, run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat &#x2F;proc&#x2F;bus&#x2F;input&#x2F;devices
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;I: Bus=0011 Vendor=0002 Product=0007 Version=01b1
&lt;&#x2F;span&gt;&lt;span&gt;N: Name=&amp;quot;SynPS&#x2F;2 Synaptics TouchPad&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;P: Phys=isa0060&#x2F;serio1&#x2F;input0
&lt;&#x2F;span&gt;&lt;span&gt;S: Sysfs=&#x2F;devices&#x2F;platform&#x2F;i8042&#x2F;serio1&#x2F;input&#x2F;input5
&lt;&#x2F;span&gt;&lt;span&gt;U: Uniq=
&lt;&#x2F;span&gt;&lt;span&gt;H: Handlers=mouse0 event5
&lt;&#x2F;span&gt;&lt;span&gt;B: PROP=1
&lt;&#x2F;span&gt;&lt;span&gt;B: EV=b
&lt;&#x2F;span&gt;&lt;span&gt;B: KEY=e520 xxxxx 0 0 0 0
&lt;&#x2F;span&gt;&lt;span&gt;B: ABS=66080001100xxxx
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should give you list of input devices attached to your machine at the moment. For example,
the output above contains information about my laptop&#x27;s touchpad. The corresponding event file of my
mouse is &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event5&lt;&#x2F;code&gt;. Let&#x27;s try to &lt;code&gt;cat&lt;&#x2F;code&gt; it (you may need root):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cat &#x2F;dev&#x2F;input&#x2F;event5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It wouldn&#x27;t normally output anything, but you should get lots of &lt;em&gt;weird&lt;&#x2F;em&gt; output on placing a finger
on your touchpad, here is what it looks on my laptop:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Zj\(
&lt;&#x2F;span&gt;&lt;span&gt;    5Zj\(
&lt;&#x2F;span&gt;&lt;span&gt;         :AZj\(
&lt;&#x2F;span&gt;&lt;span&gt;               Zj\(
&lt;&#x2F;span&gt;&lt;span&gt;                   AZj\(
&lt;&#x2F;span&gt;&lt;span&gt;                        Zj\4
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This output is actually a serialized &lt;code&gt;struct&lt;&#x2F;code&gt; corresponding to following data of an input device:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;struct input_event {
&lt;&#x2F;span&gt;&lt;span&gt;    struct timeval time;
&lt;&#x2F;span&gt;&lt;span&gt;    unsigned short type;
&lt;&#x2F;span&gt;&lt;span&gt;    unsigned short code;
&lt;&#x2F;span&gt;&lt;span&gt;    unsigned int value;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The docs here contain some detailed information on input devices in Linux:
&lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;input&#x2F;input.txt&quot;&gt;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;input&#x2F;input.txt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Someone on stackoverflow has written some Python code on how this output can be decoded into
readable form, here &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;16682549&#x2F;6554943&quot;&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;16682549&#x2F;6554943&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is also a Python package named &lt;a href=&quot;https:&#x2F;&#x2F;python-evdev.readthedocs.io&#x2F;en&#x2F;latest&#x2F;install.html&quot;&gt;evdev&lt;&#x2F;a&gt;
which allows us to both read events and write custom events to these device files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Let&#x27;s get to the nasty stuff now.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is also possible to read the event device files of another machine via SSH, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ssh user@hostname cat &#x2F;dev&#x2F;input&#x2F;event1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure the user has been granted read access to the event device file, otherwise you&#x27;ll get
a permission denied error. This can be done by running &lt;code&gt;$ sudo gpasswd -a USER input&lt;&#x2F;code&gt;. Replace
&lt;code&gt;USER&lt;&#x2F;code&gt; with the host&#x27;s username. If it still doesn&#x27;t work, a hacky workaround would be to use
&lt;code&gt;chmod&lt;&#x2F;code&gt; with appropriate permissions on the event device file to allow read access to the
unprivileged user. Either way, you should now be able to read the event device file of the other
machine.&lt;&#x2F;p&gt;
&lt;p&gt;If the client machine&#x27;s and the host machine&#x27;s architecture are the same (say both are x64). You
could also pipe events from the host machine to your machine! I tried this and it seemed to work
with keyboards but didn&#x27;t work with mouse.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ ssh user@hostname &amp;quot;cat &#x2F;dev&#x2F;input&#x2F;event1&amp;quot; &amp;gt; &#x2F;dev&#x2F;input&#x2F;event4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On running this, you would be able to pipe device data from the host machine to your client machine.
Both event devices should correspond to the same input device for it to work, that is, say &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event1&lt;&#x2F;code&gt;
is the keyboard device on the host machine whereas &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event4&lt;&#x2F;code&gt; is the keyboard device on the client
machine. Anything entered on the host machine via the keyboard will now also mimic on the client machine.&lt;&#x2F;p&gt;
&lt;p&gt;However, this does not &quot;grab&quot; the input received on host machine. That is, pressing a keyboard key
would perform an operation on the client operation but the same operation will also be performed on the
host machine. I&#x27;d rather pass all event data to my client machine and block the event data from reaching
the event device file on the host machine. In this way, one could work wirelessly without worrying
about the input device causing the same effects on the host machine when one is focused on the client
machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-if-the-host-machine-s-architecture-and-the-client-machine-s-architecture-are-not-the-same&quot;&gt;What if the host machine&#x27;s architecture and the client machine&#x27;s architecture are not the same?&lt;&#x2F;h2&gt;
&lt;p&gt;I tried the same procedure above to share the keyboard attached to my Raspberry Pi Zero W with my x64
machine. Meaning everything entered on the Pi Zero will also be mimiced on my x64 machine.
However, it didn&#x27;t work. If you remember the &lt;code&gt;struct&lt;&#x2F;code&gt; above, all of the items in that &lt;code&gt;struct&lt;&#x2F;code&gt; were
same for the same set of keys pressed, except for &lt;code&gt;value&lt;&#x2F;code&gt;. The value of &lt;code&gt;value&lt;&#x2F;code&gt; parameter seems
to be architecture dependent.&lt;&#x2F;p&gt;
&lt;p&gt;I imagined a possible a way to get around this would be to read the event device file of a remote
machine having a different architecture and modify the &lt;code&gt;value&lt;&#x2F;code&gt; parameter such that it is correctly read
by the kernel and then write this new data to my local event device file. So, I went on a quest but
not much later I came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Blub&#x2F;netevent&#x2F;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Blub&#x2F;netevent&#x2F;&lt;&#x2F;a&gt; which
probably does the same thing (&quot;probably&quot;, because I am not a C++ guy). The example given in their README
&quot;sharing keyboard &amp;amp; mouse with a machine via ssh&quot; does exacty what we need - sharing event device files
between architectures. It also offers the ability to share devices that are not present in the client
machine. For example, I could share an X-Box controller which is connected to my host machine, with my client
machine which does not have any event device file for parsing X-Box controller events (I think it might
be possible to achieve this via &lt;code&gt;$ mknod&lt;&#x2F;code&gt; command but I haven&#x27;t tried yet). One would need to add the event
devices he&#x2F;she wishes to share via SSH in the &lt;code&gt;netevent-setup.ne2&lt;&#x2F;code&gt; file and add a hotkey on the host machine
which would then pipe the output of the written &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; device files to the client machine.
Another good thing is that it &quot;grabs&quot; the input events on the host machine. So, the events are only
received by the client machine while all the input on the host machine is blocked from reaching the event
device file present on the host machine itself.&lt;&#x2F;p&gt;
&lt;p&gt;Also, since Android is based on the Linux kernel - it is very much possible to run netevent on it. In
fact, I was able to compile the codebase for Termux on my rooted Android Phone with a few modifications
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;netevent&#x2F;tree&#x2F;termux&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;netevent&#x2F;tree&#x2F;termux&lt;&#x2F;a&gt;.
You must need root to access &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; files on
Android. After completing the intial setup, it allowed me to virtually connect my Linux machine&#x27;s keyboard,
mouse, gamepad, powerlid switch, power button (, you name it!) to my Android Phone. Moving the touch pad of
my Laptop moved a mouse pointer on the Phone (I never knew my Phone could display a mouse pointer!), the
power button on my laptop turns off&#x2F;on the phone screen! If you&#x27;re going to try this out, make sure you export
the LD_LIBRARY_PATH for root user before executing the netevent binary via SSH. To do so, replace your output
command in &lt;code&gt;netevent-setup.ne2&lt;&#x2F;code&gt; with something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;output add myremote exec:ssh user@hostname -p 8022 su -c &amp;quot;LD_LIBRARY_PATH=&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;lib &#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;bin&#x2F;applets&#x2F;netevent create&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I was also able to make my Android Phone act the host machine and share my Phone&#x27;s power and volume buttons
with my laptop to perform actions which is equivalent to pressing the power button &#x2F; changing the system
volume on my laptop. However, the touch on my Android didn&#x27;t seem to perform anything on the laptop, not
even control the mouse as one would expect. I saw that there were additional &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;event*&lt;&#x2F;code&gt; files
created on my laptop and the Android touch on was being registered on my when I &lt;code&gt;cat&lt;&#x2F;code&gt; the appropriate device
event file on my laptop but it seems like my laptop has no idea what the event data it received is supposed to do. There might
be some more things possible like sharing the fingerprint scanner with the Linux machine (I tried it but
couldn&#x27;t get it to work, but someone more experienced might have a better chance).&lt;&#x2F;p&gt;
&lt;p&gt;I also have a jailbroken Kindle Paperwhite 3, so I decided to give it a try as well. Turns out I was able
to cross-compile netevent for Kindle using &lt;code&gt;arm-linux-gnueabi-cpp-4.9&lt;&#x2F;code&gt; cross-compiler (seems like the apt
package &lt;code&gt;g++-4.9-arm-linux-gnueabi&lt;&#x2F;code&gt; is only available on older distro versions like Ubuntu Xenial, so I
created a Travis CI build which runs Xenial and used it to cross-compile for Kindle and allowed it to put
up the generated binary on the internet for me to download). For some reason, it looks like g++-5 and later
do not work with the Kindle. It would complain about some missing libraries I have no idea to workaround
them. Anyway, transferred the binary generated g++-4.9 to my Kindle and worked without a hitch. My Kindle
Paperwhite 3 doesn&#x27;t offer many input devices, only the power button device file and touch screen device
file were located inside &lt;code&gt;&#x2F;dev&#x2F;input&#x2F;&lt;&#x2F;code&gt;. Set the Kindle power button as the hotkey for netevent. And even
then, I was at best only able to control my Laptop&#x27;s and Android&#x27;s mouse pointer with the Kindle touch screen.
I couldn&#x27;t get it to work the other way round (that is, controlling Kindle by sharing my laptop&#x27;s event
devices).&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, this is such a cool tool! I wonder why not more people know about it?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;CAUTION!&lt;&#x2F;strong&gt; If any of you wish to try the stuff above, be very careful! You are root and mistakenly moving
or deleting any system file could put you in real trouble as you can&#x27;t live boot or use other recovery
utilities on Android and Kindles (especially the Paperwhite 3 which doesn&#x27;t even offer a fastboot mode!).
A small mistake and you could end up in a void.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>H.264 (AVC) and H.265 (HEVC) performance on Kodi</title>
        <published>2018-12-19T00:00:00+00:00</published>
        <updated>2018-12-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/12/19/h.264-vs-h.265-performance-on-kodi/"/>
        <id>https://ritiek.github.io/2018/12/19/h.264-vs-h.265-performance-on-kodi/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/12/19/h.264-vs-h.265-performance-on-kodi/">&lt;p&gt;My christmas holidays have just begun and I&#x27;ve been trying to play some media files on Kodi.
This blog post is mainly a result of frustruation where some media files just won&#x27;t play on two of my
low-cost computing devices (Raspberry Pi 2 Model B and Amazon Fire TV Stick) and in hope that this blog post will be
a good partner to me if someday I in the future decide to tinker further.&lt;&#x2F;p&gt;
&lt;p&gt;I first hooked my Pi 2 containing some media files on its SD card storage to an HDMI display.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fixing the annoying static noise from my Raspberry Pi&#x27;s 3.5mm jack</title>
        <published>2018-12-17T00:00:00+00:00</published>
        <updated>2018-12-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/12/17/fixing-the-annoying-static-noise-from-my-raspberry-pis-3.5mm-jack/"/>
        <id>https://ritiek.github.io/2018/12/17/fixing-the-annoying-static-noise-from-my-raspberry-pis-3.5mm-jack/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/12/17/fixing-the-annoying-static-noise-from-my-raspberry-pis-3.5mm-jack/">&lt;p&gt;With my now four-year old Pi 2, I&#x27;ve noticed a static spark-like noise coming out from the 3.5mm audio
jack for as far as I can remember. This noise wasn&#x27;t the kind of usual constant white noise buzzing from
the speakers. Instead, my connected speakers would make a crackle noise at regular intervals and then
remain perfectly noise-less for the remaining period. This periodic noise only appeared when the speakers
were connected to the Pi and didn&#x27;t happen with any other device.&lt;&#x2F;p&gt;
&lt;p&gt;I read lots of stuff on the internet. Most of which is mentioned in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;superjamie&#x2F;lazyweb&#x2F;wiki&#x2F;Raspberry-Pi-3.5mm-Audio-Hiss&quot;&gt;here&lt;&#x2F;a&gt;.
Most people as I&#x27;ve read around were mainly either lucky by setting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;audio_pwm_mode=2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;disable_audio_dither=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to &lt;code&gt;&#x2F;boot&#x2F;config.txt&lt;&#x2F;code&gt;. However, I tried these settings in every possible combination but still
didn&#x27;t seem to fix for me.&lt;&#x2F;p&gt;
&lt;p&gt;Next thing I wondered about my power supply being crappy but nah. Same results with different adapaters,
different cables and different power sources. Failing to discover any possible fix, I gave up and settled
with a USB sound card lying around in my house assuming I might have accidently messed up with the hardware
on the board itself and also many people on the web mentioned that the 3.5mm audio jack is kinda sub-par.&lt;&#x2F;p&gt;
&lt;p&gt;Coming back; Recently, my laptop&#x27;s audio jack also got ripped off and I decided to rather use the USB sound
card as a workaround which was connected to my Pi than buy a new one as I am usually not listening to music
24&#x2F;7 in my house with the Pi.&lt;&#x2F;p&gt;
&lt;p&gt;This worked quite well but was a pain to pull off and plugin the sound card every time and I wanted music to
surround me. I started tinkering with my Pi again, going mostly (I don&#x27;t know why) through the same stuff I
tried in the past (config files, power sources, different speakers, etc.) but to no avail.&lt;&#x2F;p&gt;
&lt;p&gt;I almost gave up yet again. My &lt;code&gt;&#x2F;boot&#x2F;config.txt&lt;&#x2F;code&gt; became messy and thought about replacing it with the
default settings. So, I backed up my old &lt;code&gt;&#x2F;boot&#x2F;config.txt&#x2F;&lt;&#x2F;code&gt; and reverted back to a fresh
configuration and boom; no more static! I hadn&#x27;t expected this at all. So, adding my old configuration line-by-line
with a consecutive reboot, I was able to pin-point the problem to this line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;initial_turbo=30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I remember reading it at the time somewhere (&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;forums&#x2F;viewtopic.php?t=112480&quot;&gt;see relevant post&lt;&#x2F;a&gt;)
that it increases the CPU frequency during the boot period so that the Pi can complete loading the kernel faster
and then reverts back to the usual frequency depending on the configuration. I probably might&#x27;ve done this when
I was using my Pi for a different purpose in the past and it prolonged there since I didn&#x27;t saw any obvious drawbacks
of it.&lt;&#x2F;p&gt;
&lt;p&gt;But gotta kick this line off my &lt;code&gt;config.txt&lt;&#x2F;code&gt; now! No more static via 3.5mm jack!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Summer past and GSoC ends</title>
        <published>2018-08-10T00:00:00+00:00</published>
        <updated>2018-08-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/08/10/summer-past-and-gsoc-with-plasmapy-ends/"/>
        <id>https://ritiek.github.io/2018/08/10/summer-past-and-gsoc-with-plasmapy-ends/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/08/10/summer-past-and-gsoc-with-plasmapy-ends/">&lt;p&gt;It&#x27;s that time of the year when students are supposed to submit their final
evaluations. As Google expects students to put up their final reports somewhere
in a stable location and as there is always a chance that I might mess up something
on my blog, so I also made a
&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;ritiek&#x2F;505b696436182a4b3da027787c831edc&quot;&gt;Gist wrap up of this blog post&lt;&#x2F;a&gt;
of how we progressed in
these few months and all the great stuff that happened in our community.&lt;&#x2F;p&gt;
&lt;p&gt;My original project - to create a factory based implementation for unifying handling of different types of Plasmas, was completed sooner than expected. Here are the link to related pull requests I made during the summer.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;501&quot;&gt;#501&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Raise more fitting &lt;code&gt;NotImplementedError&lt;&#x2F;code&gt; for functions that are yet to be implemented in our Plasma metaclass&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;489&quot;&gt;#489&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Independent tests for our Plasma subclasses&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;459&quot;&gt;#459&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Implement a Plasma factory interface to unify handling different Plasma types&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Hail &lt;code&gt;plasmapy.classes.Plasma&lt;&#x2F;code&gt;! A glimpse of how it looks like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;astropy.units &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;u
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;plasmapy.classes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; T_e = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15e3 &lt;&#x2F;span&gt;&lt;span&gt;* u.K
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; n_e = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e26 &lt;&#x2F;span&gt;&lt;span&gt;* u.cm ** -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; Z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; particle = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; blob = plasmapy.classes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Plasma&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T_e&lt;&#x2F;span&gt;&lt;span&gt;=T_e,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n_e&lt;&#x2F;span&gt;&lt;span&gt;=n_e,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Z&lt;&#x2F;span&gt;&lt;span&gt;=Z,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;particle&lt;&#x2F;span&gt;&lt;span&gt;=particle)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(blob)
&lt;&#x2F;span&gt;&lt;span&gt;plasmapy.classes.sources.plasmablob.PlasmaBlob
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; three_dims = plasmapy.classes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Plasma&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;domain_x&lt;&#x2F;span&gt;&lt;span&gt;=np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linspace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) * u.m,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;domain_y&lt;&#x2F;span&gt;&lt;span&gt;=np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linspace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) * u.m,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;domain_z&lt;&#x2F;span&gt;&lt;span&gt;=np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linspace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) * u.m)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(three_dims)
&lt;&#x2F;span&gt;&lt;span&gt;plasmapy.classes.sources.plasma3d.Plasma3D
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As my original project was completed sooner than expected. I further implemented a new Plasma subclass for reading HDF5 datasets respecting OpenPMD standards.&lt;&#x2F;p&gt;
&lt;p&gt;We had to choose between &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;h5py&#x2F;h5py&quot;&gt;h5py&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api&quot;&gt;OpenPMD-api&lt;&#x2F;a&gt; packages for reading HDF5 dataset files.
At that time, the OpenPMD-api had a few &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api&#x2F;issues&#x2F;279&quot;&gt;installation issues&lt;&#x2F;a&gt; and it was hard to distribute with PlasmaPy as it isn&#x27;t available on PyPi yet, not many people use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api#spack&quot;&gt;spack&lt;&#x2F;a&gt; and certainly not many people would give it a go &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api#from-source&quot;&gt;building from source&lt;&#x2F;a&gt;.
It is however, available on &lt;a href=&quot;https:&#x2F;&#x2F;anaconda.org&#x2F;conda-forge&#x2F;openpmd-api&quot;&gt;conda-forge&lt;&#x2F;a&gt; but PlasmaPy isn&#x27;t (yet). :(&lt;&#x2F;p&gt;
&lt;p&gt;So, h5py it was then.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;500&quot;&gt;#500&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Implement a prototype to read attributes from HDF5 datasets based on OpenPMD standards&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;However, It still isn’t very efficient to work with larger datasets and should rather be considered a prototype at the moment.
It currently only supports reading mesh data from an HDF5 dataset.
It also reads the complete record into memory, which is certain to cause problems with big datasets.
In the real world, heavy datasets can go into dozens of GBs, so we’re going to have to provide a way to read a part of dataset at a time from disk or provide some other way in the future instead writing all of it to memory at once.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;During the summer, I also worked on implementing other functionality, bug fixes and improving test coverage in PlasmaPy.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We ended up making our &lt;code&gt;atomic.Particle&lt;&#x2F;code&gt; class and &lt;code&gt;@atomic.particle_input&lt;&#x2F;code&gt; decorator more pleasant to use and now works better than ever!&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;528&quot;&gt;#528&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Functions decorated with &lt;code&gt;@particle_input&lt;&#x2F;code&gt; now accept default Particle value&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;527&quot;&gt;#527&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Typo fixes in &lt;code&gt;@particle_input&lt;&#x2F;code&gt; error messages&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;510&quot;&gt;#510&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Add an &lt;code&gt;isotope_name&lt;&#x2F;code&gt; property on &lt;code&gt;Particle&lt;&#x2F;code&gt; class&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;504&quot;&gt;#504&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Add a &lt;code&gt;roman_symbol&lt;&#x2F;code&gt; property which returns integer Particle charge in Roman notation&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;493&quot;&gt;#493&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Decorate functions in &lt;code&gt;collisions.py&lt;&#x2F;code&gt; with &lt;code&gt;@particle_input&lt;&#x2F;code&gt; decorator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;483&quot;&gt;#483&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Accept a tuple or list of Particles for a parameter in a function decorated by &lt;code&gt;@particle_input&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;290&quot;&gt;#290&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Pre-GSoC] Optionally accept integer charges in Roman notations&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;265&quot;&gt;#265&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Pre-GSoC] Move &lt;code&gt;Particle.reduced_mass&lt;&#x2F;code&gt; to a module level function&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;And we fought against code coverage problems to make CodeCov happy!&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;506&quot;&gt;#506&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Write tests to improve coverage in various packages&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;502&quot;&gt;#502&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Move &lt;code&gt;coveragerc&lt;&#x2F;code&gt; file to expected default location so that it can be read correctly&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;498&quot;&gt;#498&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Add tests to improve coverage in our langmuir package&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;494&quot;&gt;#494&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Include &lt;code&gt;__init__.py&lt;&#x2F;code&gt; in our diagnostics package, so that any tests placed aren&#x27;t skipped&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;320&quot;&gt;#320&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Write tests for &lt;code&gt;PlasmaBlob.regimes()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;We have an astonishing code coverage - 98%! It&#x27;s great that we were able to keep with our code coverage even after so much going in and out of PlasmaPy.&lt;&#x2F;p&gt;
&lt;p&gt;Then comes the list of all the other stuff I tinkered with during the season!&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;513&quot;&gt;#513&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Fix conda recipe by including LICENSE.md in MANIFEST.in&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;511&quot;&gt;#511&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Load correct URLs when using &lt;code&gt;online_help()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;509&quot;&gt;#509&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;Mjp2nr7.jpeg&quot; alt=&quot;Open&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Some refactoring of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tulasinandan&quot;&gt;@tulasinandan&#x27;s&lt;&#x2F;a&gt; work on two fluid dispersion relations&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;360&quot;&gt;#360&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Mention &lt;code&gt;RelativityError&lt;&#x2F;code&gt; in docstrings when input velocity is same or greater than the speed of light&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;358&quot;&gt;#358&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Merged&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Return &lt;code&gt;Quantity&lt;&#x2F;code&gt; objects correctly formatted when passed to &lt;code&gt;call_string()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;During these months, I also got the chance to contribute to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;&quot;&gt;astropy&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;poliastro&#x2F;poliastro&quot;&gt;poliastro&lt;&#x2F;a&gt; which are also sub-organizations under the the OpenAstronomy umbrella organization.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;astropy&quot;&gt;astropy&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7673&quot;&gt;#7673&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Open&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Upstream] Fix string Python code to test coverage on Windows which would otherwise result in &lt;code&gt;SyntaxError&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7672&quot;&gt;#7672&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Open&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;Accept non-unit type annotations in functions decorated with&lt;code&gt;@quantity_input&lt;&#x2F;code&gt; decorator&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7284&quot;&gt;#7284&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;ksGNF55.jpeg&quot; alt=&quot;Closed&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Pre-GSoC] Override &lt;code&gt;HDUList.__add__()&lt;&#x2F;code&gt; to return a sum of two &lt;code&gt;HDUList&lt;&#x2F;code&gt; instances&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7218&quot;&gt;#7218&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Open&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Pre-GSoC] Implement shallow copy and deep copy on an &lt;code&gt;HDUList&lt;&#x2F;code&gt; instance&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;poliastro&quot;&gt;poliastro&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;PR&lt;&#x2F;th&gt;&lt;th&gt;Status&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;poliastro&#x2F;poliastro&#x2F;pull&#x2F;312&quot;&gt;#312&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;img src=&quot;&#x2F;assets&#x2F;YnDnRzm.jpeg&quot; alt=&quot;Open&quot; &#x2F;&gt;&lt;&#x2F;td&gt;&lt;td&gt;[Pre-GSoC] Return a tuple (&lt;code&gt;Time&lt;&#x2F;code&gt;, &lt;code&gt;CartesianRepresentation&lt;&#x2F;code&gt;) in &lt;code&gt;Orbit.sample()&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A lot of other cool stuff happened in these past few months. We went from a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy-logo&quot;&gt;new logo&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;with-text-dark.png&quot; width=&quot;350&quot;&gt;
&lt;p&gt;from no releases to releasing v0.1.1 &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;plasmapy&#x2F;&quot;&gt;on PyPi&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;conda-forge&#x2F;staged-recipes&#x2F;pull&#x2F;4793&quot;&gt;coming soon on conda!&lt;&#x2F;a&gt;), from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;490&quot;&gt;Coveralls to CodeCov&lt;&#x2F;a&gt;, confirmed that PlasmaPy works great with Python 3.7, to &lt;a href=&quot;https:&#x2F;&#x2F;agu.confex.com&#x2F;agu&#x2F;fm18&#x2F;preliminaryview.cgi&#x2F;Paper401465&quot;&gt;submitting an abstract&lt;&#x2F;a&gt; for the AGU Fall Meeting!&lt;&#x2F;p&gt;
&lt;p&gt;This was one hell of an awesome summer working with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&quot;&gt;PlasmaPy&lt;&#x2F;a&gt; under Google Summer of Code 2018. I want to thank Google and OpenAstronomy (an umbrella organization for PlasmaPy) for giving me this opportunity to work with such an amazing community. A shoutout and a special thanks to my mentors
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;namurphy&quot;&gt;Nick Murphy&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SolarDrew&quot;&gt;Drew Leonard&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;StanczakDominik&quot;&gt;Dominik Stańczak&lt;&#x2F;a&gt;) for guiding me throughout the summer!&lt;&#x2F;p&gt;
&lt;p&gt;And so the wonderful journey comes to an end.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Further work and thoughts on PlasmaPy</title>
        <published>2018-07-23T00:00:00+00:00</published>
        <updated>2018-07-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/07/23/further-work-and-thoughts-on-plasmapy/"/>
        <id>https://ritiek.github.io/2018/07/23/further-work-and-thoughts-on-plasmapy/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/07/23/further-work-and-thoughts-on-plasmapy/">&lt;p&gt;Oh, there we go! Time for GSoC&#x27;s pre-final blog post.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, so the last week was a bit draining for me. My college started last monday
and I accidently messed up my Linux machine the next day! Never ever remove
(&lt;code&gt;apt purge&lt;&#x2F;code&gt;) the &lt;code&gt;dbus&lt;&#x2F;code&gt; package (especially not when playing with &lt;code&gt;python-dbus&lt;&#x2F;code&gt; package).
It will render your system utter useless, atleast that&#x27;s what happened to me.
It removed several other system packages on my machine along with &lt;code&gt;dbus&lt;&#x2F;code&gt;.
I ended up destroying my X server and network-manager (and god knows how many other packages).&lt;&#x2F;p&gt;
&lt;p&gt;For fixing these broken packages - I tried to install the missing .deb packages via external USB but those packages
complained about several other missing packages and this kept recursing
until I gave up. Couldn&#x27;t get chroot from a live USB to install the missing
packages either.
I finally took a backup of the little things I wouldn&#x27;t be able to live
without and installed Linux Mint 19. Tara (codename) has many cool features and UI
improvements. Though I won&#x27;t be mentioning them here and consume more of your
time hearing my nasty adventures.&lt;&#x2F;p&gt;
&lt;p&gt;During these unfortunate times, I tried to set-up PlasmaPy on my brother&#x27;s
Windows machine. Everything went fine except I wasn&#x27;t able to run our
test suite, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;issues&#x2F;516&quot;&gt;so I filed a bug&lt;&#x2F;a&gt;.
Eventually, I was able to trace it back to astropy and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7673&quot;&gt;pushed a fix to upstream&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, this period went pretty smooth. We decided to not work further on
JHTDP (atleast not in this phase) as we&#x27;re not yet perfectly clear on how we
are going to be using this database and if it would be worth the effort.
Additonally, I looked up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;idies&#x2F;pyJHTDB&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;some examples&lt;&#x2F;a&gt;
on using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;idies&#x2F;pyJHTDB&quot;&gt;pyJHTDB&lt;&#x2F;a&gt; API and IMO this
probably wasn&#x27;t going to be completed within a single GSoC phase. Those
examples still scare me.&lt;&#x2F;p&gt;
&lt;p&gt;The community is working to get PlasmaPy on conda-forge and has made
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;conda-forge&#x2F;staged-recipes&#x2F;pull&#x2F;4793&quot;&gt;quite a progress&lt;&#x2F;a&gt;!
We might be coming to conda soon!&lt;&#x2F;p&gt;
&lt;p&gt;I also made a PR (not yet merged) to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy&#x2F;pull&#x2F;7672&quot;&gt;accept non-unit type annotations in &lt;code&gt;@quantity_input&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
in astropy. This will allow us to use this useful decorator in PlasmaPy in many
places we avoided earlier. Many a times, we end up annotating our function definitions
to whatever data type is expected by the function parameter. That&#x27;s some cool stuff.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment, I am manually playing with our API hoping to find bugs and ideas.
I did find a bug where our
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;511&quot;&gt;&lt;code&gt;online_help&lt;&#x2F;code&gt; function did not work as expected&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We also added another attribute
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;510&quot;&gt;&lt;code&gt;isotope_name&lt;&#x2F;code&gt; on &lt;code&gt;Particle&lt;&#x2F;code&gt; class&lt;&#x2F;a&gt;
a few days back. Yey!&lt;&#x2F;p&gt;
&lt;p&gt;By the way, I haven&#x27;t been able to spend as much time on PlasmaPy and other projects under
OpenAstronomy due to my college classes and travelling to &amp;amp; fro, which take most
of my day time. I hope this wouldn&#x27;t be a problem as I completed many of my
GSoC&#x27;s main project goals already. ;)&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I&#x27;m still trying to make time to contribute the littlest of things I can
manage during this phase.&lt;&#x2F;p&gt;
&lt;p&gt;(I also just realized I need to enable the comment section on these posts, oh crud,
I felt some static. This would be more work than I expected.)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adding support for JHTD in PlasmaPy</title>
        <published>2018-07-11T00:00:00+00:00</published>
        <updated>2018-07-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/07/11/adding-support-for-jhtd-in-plasmapy/"/>
        <id>https://ritiek.github.io/2018/07/11/adding-support-for-jhtd-in-plasmapy/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/07/11/adding-support-for-jhtd-in-plasmapy/">&lt;p&gt;During this period, nothing big happened except we&#x27;re able to get merge a new
Plasma subclass supposed to work with OpenPMD Datasets
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;500&quot;&gt;#500&lt;&#x2F;a&gt;! It still isn&#x27;t
very efficient to work with larger datasets and should rather be considered a
prototype at the moment. It currently supports reading only mesh data from an
HDF5. It also reads the complete record into memory, which is certain to cause
problems with big datasets. In the real world, heavy datasets can go into dozens
of GBs. In the future, we&#x27;re going to have to provide a way to read stuff
directly from disk or provide some other way instead writing all of it to memory.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned in my last blog post, we were able to add some more tests and
fill up some missing coverage in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;506&quot;&gt;#506&lt;&#x2F;a&gt;. It gets kinda weird
when you&#x27;re at a really high coverage like 95%+ and to increment another percent,
you have to add over a hundred more lines of code for tests. IMO it&#x27;s worth it.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re also working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;459&quot;&gt;#509&lt;&#x2F;a&gt; to
implement two fluid dispersion solvers in PlasmaPy. We have the formulae and
methods working to tackle &quot;two fluid problems&quot;. We need some more refactoring to
make the interface a bit more cleaner, more tests and docs, and then it should
be ready to merge.&lt;&#x2F;p&gt;
&lt;p&gt;There were a few PRs accommodating small changes like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;504&quot;&gt;#504&lt;&#x2F;a&gt;
which I took over as the original contributor went inactive on GitHub and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;510&quot;&gt;#510&lt;&#x2F;a&gt; which adds another
attribute to return istopic name of a &lt;code&gt;Particle&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We had some discussion over adding another subclass for working with
&lt;a href=&quot;http:&#x2F;&#x2F;turbulence.pha.jhu.edu&#x2F;&quot;&gt;JHTD (Johns Hopkins Turbulence Databases)&lt;&#x2F;a&gt; in
PlasmaPy and this is probably what we&#x27;re going to be working on in the next phase.&lt;&#x2F;p&gt;
&lt;p&gt;As a side news, SunPy on the other hand might be rewriting their baseclass for
visibilities in xrayvision to focus on a more factory based approach just like
we did it with our plasma classes.&lt;&#x2F;p&gt;
&lt;p&gt;Also, my next semester classes are going to be starting on 16th this July. I really
wish I could stay home all day and just code and stuff for a little while more
but nah, life happens.&lt;&#x2F;p&gt;
&lt;p&gt;Okay then, take care. Oh and yes, evaluations for phase-2 are currently on their way!
Time frikkin&#x27; flies and here we are about to move into our GSoC&#x27;s final phase!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reading HDF5 files based on OpenPMD</title>
        <published>2018-06-25T00:00:00+00:00</published>
        <updated>2018-06-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/06/25/reading-hdf5-files-based-on-openpmd/"/>
        <id>https://ritiek.github.io/2018/06/25/reading-hdf5-files-based-on-openpmd/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/06/25/reading-hdf5-files-based-on-openpmd/">&lt;p&gt;We&#x27;re currently working on developing a new Plasma subclass. It is supposed to read
HDF5 files that are based on OpenPMD standard and we have a sort of prototype ready
in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;500&quot;&gt;#500&lt;&#x2F;a&gt;. It should be ready to
merge once we figure out how we are supposed to handle the example datasets for our
tests. It probably isn&#x27;t a good idea to ship them with the main PlasmaPy codebase.
I guess we&#x27;re going to settle downloading them on the fly when running our tests.
Let&#x27;s see.&lt;&#x2F;p&gt;
&lt;p&gt;I had trouble getting
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api&quot;&gt;OpenPMD-api&lt;&#x2F;a&gt; to install from source and
with spack package manager but the guys at OpenPMD are really helpful and
updated their documentation appropriately real quick
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-api&#x2F;issues&#x2F;279&quot;&gt;openPMD&#x2F;openPMD-api#279&lt;&#x2F;a&gt;)!&lt;&#x2F;p&gt;
&lt;p&gt;As an update from my last blog post on our coveragerc problems; in the end
we decided to settle with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;502&quot;&gt;#502&lt;&#x2F;a&gt;.
The problem is that PlasmaPy and SunPy (maybe also other projects?) depend on Astropy&#x27;s testing
modules which is the root cause of the problem. We&#x27;ve had some discussion in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astropy&#x2F;astropy-helpers&#x2F;issues&#x2F;397&quot;&gt;astropy&#x2F;astropy-helpers#397&lt;&#x2F;a&gt;.
However, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Cadair&quot;&gt;@Cadiar&lt;&#x2F;a&gt; is still messing around with it in
SunPy and has made progress in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sunpy&#x2F;sunpy&#x2F;pull&#x2F;2667&quot;&gt;sunpy&#x2F;sunpy#2667&lt;&#x2F;a&gt;. Hopefully, astropy
will go through some refactoring too and then we could all live peacefully.&lt;&#x2F;p&gt;
&lt;p&gt;Some other cool stuff that happened during this period. We increased coverage
in our langmuir.py module in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;498&quot;&gt;#498&lt;&#x2F;a&gt;.
There are still some corners where could increase coverage a bit, I think I am
going to make more PRs soon. I remember we had 99% code coverage in March then it
dropped to somewhere around 92% shortly after we had our first release. I am glad
we made it back to 98% as of now!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Oh, I almost forgot! I received my first stipend a few days back! I&#x27;ve never
earned more in my whole life before this, not even a quarter to be honest.
I am not sure what I am going to do with it for now. Maybe get a new lappy?
A musical instrument? Pay the bills? Donate to a cause? No idea but it makes me
happy to think about stuff! :D&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all folks. Stay happy, have fun!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Completing our Plasma factory implementation</title>
        <published>2018-06-13T00:00:00+00:00</published>
        <updated>2018-06-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/06/13/completing-our-plasma-factory-implementation/"/>
        <id>https://ritiek.github.io/2018/06/13/completing-our-plasma-factory-implementation/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/06/13/completing-our-plasma-factory-implementation/">&lt;p&gt;As we all (probably) know now, our Plasma factory implementation got finished much
sooner than expected. So, I&#x27;ve been mostly lurking around since my last blog post
adding features in our plasma pie, discovering bugs under our plasma bed, reviewing
plasma requests, gazing at stars made of plasma, etc.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll talk about some of the progress that&#x27;s being made in PlasmaPy. I made a PR
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;483&quot;&gt;#483&lt;&#x2F;a&gt;) that allows us to pass collections
to our &lt;code&gt;particle_input&lt;&#x2F;code&gt; decorator. This was my first time working with decorators in real
world programming. It seems like it turned out pretty well. Oh and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;493&quot;&gt;#493&lt;&#x2F;a&gt; was cute.&lt;&#x2F;p&gt;
&lt;p&gt;I also moved around tests for our plasma subclasses
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;489&quot;&gt;#489&lt;&#x2F;a&gt;).
One thing I noticed during this PR that it is important to have &lt;code&gt;__init__.py&lt;&#x2F;code&gt; in each of
your directory, otherwise any tests in directories without &lt;code&gt;__init__.py&lt;&#x2F;code&gt; are not going
to be picked up with &lt;code&gt;.&#x2F;setup.py test&lt;&#x2F;code&gt;! However, they seem to work when using &lt;code&gt;pytest&lt;&#x2F;code&gt;
directly though. I found a similar problem with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;494&quot;&gt;#494&lt;&#x2F;a&gt; which shot up our coverage from
93.18% and 95.38%. It is pretty surprising, a single empty &lt;code&gt;__init__.py&lt;&#x2F;code&gt; can do wonders.
So, if anyone is reading this uses &lt;code&gt;.&#x2F;setup.py test&lt;&#x2F;code&gt; in their projects right now, you better
take care of such stuff in your codebase. You really don&#x27;t want to be writing tests only
to realize it later on that they aren&#x27;t even being executed.&lt;&#x2F;p&gt;
&lt;p&gt;Also, we recently shifted to CodeCov instead of Coveralls. Why? No big reason except CodeCov
apparently has a greater userbase.
&lt;a href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;search?q=codecov+vs+coveralls&quot;&gt;and some minor differences can be found here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are currently fighting with &lt;code&gt;coveragerc&lt;&#x2F;code&gt; configuration file not being picked up by &lt;code&gt;coverage&lt;&#x2F;code&gt;,
which is a code coverage measurement in tool for Python.
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;495&quot;&gt;#495&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;496&quot;&gt;#496&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;497&quot;&gt;#497&lt;&#x2F;a&gt;). So, some stuff like &lt;code&gt;# coveralls: ignore&lt;&#x2F;code&gt;
does not get respected and &lt;code&gt;coverage&lt;&#x2F;code&gt; marks these lines in red (meaning that they aren&#x27;t covered)
instead of just leaving them whitish (ignoring them).&lt;&#x2F;p&gt;
&lt;p&gt;We could replace &lt;code&gt;# coveralls: ignore&lt;&#x2F;code&gt; with &lt;code&gt;# pragma: no cover&lt;&#x2F;code&gt; since that is the
default for &lt;code&gt;coverage&lt;&#x2F;code&gt; and it works with CodeCov integration
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;PlasmaPy&#x2F;pull&#x2F;3&quot;&gt;ritiek&#x2F;PlasmaPy#3&lt;&#x2F;a&gt;), but this might
leave other future additions to &lt;code&gt;coveragerc&lt;&#x2F;code&gt; file still a problem if it isn&#x27;t going to be picked up
by &lt;code&gt;coverage&lt;&#x2F;code&gt;. There is a workaround that seems
to be sort of working (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ritiek&#x2F;PlasmaPy&#x2F;pull&#x2F;4&quot;&gt;ritiek&#x2F;PlasmaPy#4&lt;&#x2F;a&gt;, do
notice it further shoots up our coverage from 95.38% to 96.69%!) and is probably bit ugly but
should hopefully suffice for the moment if we can&#x27;t find a better solution.&lt;&#x2F;p&gt;
&lt;p&gt;The next little bit related to GSoC is that I expect to create a Plasma subclass which reads
HDF5 files that are based upon OpenPMD format using h5py python module and then expose relevant
attributes of information.
I suspect it isn&#x27;t going to be a big task but we&#x27;ll get to shed light on further details once
we see this little bit happen in PlasmaPy.&lt;&#x2F;p&gt;
&lt;p&gt;OK that would be all for now. Happy plasma pie baking, bye!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Structuring our Plasma factory</title>
        <published>2018-05-28T00:00:00+00:00</published>
        <updated>2018-05-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/05/28/structuring-the-plasma-factory/"/>
        <id>https://ritiek.github.io/2018/05/28/structuring-the-plasma-factory/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/05/28/structuring-the-plasma-factory/">&lt;p&gt;We&#x27;re mostly done with structuring our Plasma factory. The PR
(&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;pull&#x2F;459&quot;&gt;#459&lt;&#x2F;a&gt;) just got merged yesterday! I&#x27;d have to say
we weren&#x27;t expecting this to work out this quickly.&lt;&#x2F;p&gt;
&lt;p&gt;The reference to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sunpy&#x2F;sunpy&#x2F;tree&#x2F;0d784d24160ab04a0bd6876d948c915cdffea092&#x2F;sunpy&#x2F;map&quot;&gt;SunPy&#x27;s Map&lt;&#x2F;a&gt;
source made it a tad easier to understand how things are supposed to work for our PlasmaPy&#x27;s
Plasma. :D&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sunpy&#x2F;sunpy&#x2F;blob&#x2F;0d784d24160ab04a0bd6876d948c915cdffea092&#x2F;sunpy&#x2F;util&#x2F;datatype_factory_base.py&quot;&gt;SunPy&#x27;s &lt;code&gt;BasicRegistrationFactory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
was so generic that we could have directly imported it in PlasmaPy without having to work &lt;u&gt;o&lt;&#x2F;u&gt;ut &lt;u&gt;o&lt;&#x2F;u&gt;n
&lt;u&gt;o&lt;&#x2F;u&gt;ne &lt;u&gt;o&lt;&#x2F;u&gt;n &lt;u&gt;o&lt;&#x2F;u&gt;ur &lt;u&gt;o&lt;&#x2F;u&gt;wn (wow, that&#x27;s a lot of &quot;&lt;u&gt;o&lt;&#x2F;u&gt;&quot;s!). But really, I wonder
if it makes more sense that they should just publish a separate PyPi package for just this
registration factory.&lt;&#x2F;p&gt;
&lt;p&gt;If we didn&#x27;t had any such reference, I am certain that our factory implementation would have consumed
a lot more time than we actually took.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, there are plenty of things that probably would need work in near future, like
overriding methods under &lt;code&gt;BasicRegistraionFactory&lt;&#x2F;code&gt; being inherited in &lt;code&gt;PlasmaFactory&lt;&#x2F;code&gt; to make it more
specific as we get to know our subclass needs, and defining generic plasma methods which are
common in most plasmas (&lt;code&gt;electronTemperature&lt;&#x2F;code&gt;, &lt;code&gt;ionTemperature&lt;&#x2F;code&gt;, etc.) under a &lt;code&gt;GenericPlasma&lt;&#x2F;code&gt; class.
We&#x27;ll get to learn more about these needs as we work on subclasses for our Plasma factory as well.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, We&#x27;ve been discussing about what subclasses would be nice to have
(some bits can be found in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PlasmaPy&#x2F;PlasmaPy&#x2F;issues&#x2F;458&quot;&gt;#458&lt;&#x2F;a&gt;).
And so, this is our next plan, to create variety of subclasses that deal with different plasma datasets.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the openly available datasets we&#x27;ve located are
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MurilloGroupMSU&#x2F;Dense-Plasma-Properties-Database&quot;&gt;Dense plasma database&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;turbulence.pha.jhu.edu&quot;&gt;Johns Hopkins Turbulence Database&lt;&#x2F;a&gt; and some
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-example-datasets&quot;&gt;example datasets&lt;&#x2F;a&gt; using the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openPMD&#x2F;openPMD-standard&quot;&gt;OpenPMD stanadard&lt;&#x2F;a&gt;.
By the way, if by any chance you&#x27;re working on a particle-mesh dataset, I&#x27;d recommend you to use the
conventions under OpenPMD standard. It has the potential to make particle-mesh databases easier for other
people to visually parse and automate!&lt;&#x2F;p&gt;
&lt;p&gt;Lately, I&#x27;ve been working with &lt;a href=&quot;https:&#x2F;&#x2F;www.h5py.org&quot;&gt;h5py&lt;&#x2F;a&gt; python package which allows parsing
the &lt;a href=&quot;https:&#x2F;&#x2F;hdfgroup.org&quot;&gt;HDF5 binary data format&lt;&#x2F;a&gt;. I&#x27;m very excited since this is going to be my
first time working in such a close proximity to large scientific datasets!&lt;&#x2F;p&gt;
&lt;p&gt;That will be all for now. See ya later.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Community Bonding Period</title>
        <published>2018-05-11T00:00:00+00:00</published>
        <updated>2018-05-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ritiek.github.io/2018/05/11/community-bonding-period-plasmapy/"/>
        <id>https://ritiek.github.io/2018/05/11/community-bonding-period-plasmapy/</id>
        
        <content type="html" xml:base="https://ritiek.github.io/2018/05/11/community-bonding-period-plasmapy/">&lt;h2 id=&quot;how-i-got-here&quot;&gt;How I Got Here&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve known about GSoC for a while but wasn&#x27;t sure if it was something
I could be a part of. I decided to give it my first try this year. I got to know about
OpenAstronomy from the GSoC&#x27;18 organizations page. Initially, almost all of the
projects on their ideas page were very appealing to me. I started to get to know more about
different communities under OpenAstronomy and submitted patches to their
codebase to some of them. It was fun to contribute to them but I was still not sure
which organization and what project would work best for me.
After thinking for a while, I decided to settle on the project to develop a better way
of dealing with different types of plasma data structures using metaclasses under the
PlasmaPy organization.&lt;&#x2F;p&gt;
&lt;p&gt;These guys were still progressing to v0.1.0 and to have it up on PyPi. I imagined it
would be nice to give a hand and speed up things a bit as well as this was the
first time I was going to work with Python metaclasses in an actual real-world project,
metaclasses are some nasty Python dark magic! I spent most of march working on a proposal
and invloving with the PlasmaPy community. To my surprise, my proposal got selected for GSoC&#x27;18!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonding-period&quot;&gt;Bonding Period&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re currently in the community bonding phase where I am getting to know more about
our community and my GSoC project. By the way, we also had our v0.1.0 release and
a brand new logo for our organization during this phase. Here is the glimpse of it!&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;graphic-circular.png&quot; width=&quot;100&quot;&gt;
&lt;p&gt;As for the GSoC project, since PlasmaPy only supports Python 3.6+, it was suggested that
we use a base class that is a subclass of
&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;abc.html#abc.ABC&quot;&gt;&lt;code&gt;ABC.abc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; instead of defining
a metaclass. Python 3.6 brought this amazing method
&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0487&#x2F;#subclass-registration&quot;&gt;&lt;code&gt;__init_subclass__&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
that would make for a great replacement to register our subclasses.
In the first Jitsi meeting we had yesterday, we discussed about the project and
some stuff about what my mentors are expecting from me.
Our implemenation is supposed to be quite similar to how
&lt;a href=&quot;http:&#x2F;&#x2F;docs.sunpy.org&#x2F;en&#x2F;stable&#x2F;code_ref&#x2F;map.html&quot;&gt;&lt;code&gt;sunpy.map.Map&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ending-thoughts&quot;&gt;Ending Thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m very excited about the journey next 3 months! I&#x27;ll probably end up learning a
lot more about metaprogamming in Python and in general. I am grateful to OpenAstronomy
and my mentors for giving me this amazing opportunity and helping me get started!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
